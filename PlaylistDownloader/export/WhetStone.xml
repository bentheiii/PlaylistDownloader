<?xml version="1.0"?>
<doc>
    <assembly>
        <name>WhetStone</name>
    </assembly>
    <members>
        <member name="T:WhetStone.Looping.all">
            <summary>
            A static container for identity method
            </summary>
        </member>
        <member name="M:WhetStone.Looping.all.All(System.Collections.Generic.IEnumerable{System.Boolean})">
            <summary>
            Checks whether all the elements of a <see cref="T:System.Collections.Generic.IEnumerable`1"/> of type <see cref="T:System.Boolean"/> are true.
            </summary>
            <param name="this">The <see cref="T:System.Collections.Generic.IEnumerable`1"/> of type <see cref="T:System.Boolean"/> to check.</param>
            <returns>Whether all elements of <paramref name="this"/> are true.</returns>
        </member>
        <member name="T:WhetStone.Looping.allEqual">
            <summary>
            A static container for identity method
            </summary>
        </member>
        <member name="M:WhetStone.Looping.allEqual.AllEqual``1(System.Collections.Generic.IEnumerable{``0},System.Collections.Generic.IEqualityComparer{``0})">
            <summary>
            Checks whether all members of an <see cref="T:System.Collections.Generic.IEnumerable`1"/> are equal.
            </summary>
            <typeparam name="T">The type of the <see cref="T:System.Collections.Generic.IEnumerable`1"/>.</typeparam>
            <param name="this">The <see cref="T:System.Collections.Generic.IEnumerable`1"/> to check.</param>
            <param name="comp">The <see cref="T:System.Collections.Generic.IEqualityComparer`1"/> to use, to check all the elements all are the same.</param>
            <returns>Whether all the elements in <paramref name="this"/> are equal.</returns>
            <remarks><para>This compares every element to <paramref name="this"/>'s first element.</para><para>If <paramref name="this"/> is empty, <see langword="true"/> is returned.</para></remarks>
        </member>
        <member name="M:WhetStone.Looping.allEqual.AllEqual``1(System.Collections.Generic.IEnumerable{``0},``0,System.Collections.Generic.IEqualityComparer{``0})">
            <summary>
            Checks whether all members of an <see cref="T:System.Collections.Generic.IEnumerable`1"/> are equal to a value.
            </summary>
            <typeparam name="T">The type of the <see cref="T:System.Collections.Generic.IEnumerable`1"/>.</typeparam>
            <param name="this">The <see cref="T:System.Collections.Generic.IEnumerable`1"/> to check.</param>
            <param name="value">The value to compare all elements to.</param>
            <param name="comp">The <see cref="T:System.Collections.Generic.IEqualityComparer`1"/> to use, to check all the elements all are the same.</param>
            <returns>Whether all the elements in <paramref name="this"/> are equal to <paramref name="value"/>.</returns>
            <remarks><para>If <paramref name="this"/> is empty, <see langword="true"/> is returned.</para></remarks>
        </member>
        <member name="T:WhetStone.Looping.anyAndAll">
            <summary>
            A static container for identity method
            </summary>
        </member>
        <member name="M:WhetStone.Looping.anyAndAll.AnyAndAll``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Boolean})">
            <overloads>Checks that an <see cref="T:System.Collections.Generic.IEnumerable`1"/> is all true and also that it is not empty.</overloads>
            <summary>
            Checks that all members of the <see cref="T:System.Collections.Generic.IEnumerable`1"/> are <see langword="true"/> (when subject to <paramref name="cond"/>) and that the <see cref="T:System.Collections.Generic.IEnumerable`1"/> is not empty.
            </summary>
            <typeparam name="T">The <see cref="T:System.Collections.Generic.IEnumerable`1"/>'s type.</typeparam>
            <param name="this">The <see cref="T:System.Collections.Generic.IEnumerable`1"/> to check.</param>
            <param name="cond">The selector to use on each element to check for trueness.</param>
            <returns>Whether <paramref name="cond"/> evaluates all elements to <see langword="true"/> and <paramref name="this"/> is not empty.</returns>
        </member>
        <member name="M:WhetStone.Looping.anyAndAll.AnyAndAll(System.Collections.Generic.IEnumerable{System.Boolean})">
            <summary>
            Checks that all members of the <see cref="T:System.Collections.Generic.IEnumerable`1"/> of type <see cref="T:System.Boolean"/> are <see langword="true"/> and that the <see cref="T:System.Collections.Generic.IEnumerable`1"/> of type <see cref="T:System.Boolean"/> is not empty.
            </summary>
            <param name="this">The <see cref="T:System.Collections.Generic.IEnumerable`1"/> of type <see cref="T:System.Boolean"/> to check.</param>
            <returns>Whether all elements are <see langword="true"/> and <paramref name="this"/> is not empty.</returns>
        </member>
        <member name="T:WhetStone.Looping.append">
            <summary>
            A static container for identity method
            </summary>
        </member>
        <member name="M:WhetStone.Looping.append.Append``1(``0[]@,``0[])">
            <overloads>Enlarges an array and adds elements to it.</overloads>
            <summary>
            Resizes an array and adds <paramref name="toAdd"/> to its end.
            </summary>
            <typeparam name="T">The type of <paramref name="this"/>.</typeparam>
            <param name="this">The array to append to.</param>
            <param name="toAdd">The <see cref="T:System.Collections.Generic.IEnumerable`1"/> to copy to the <paramref name="this"/>.</param>
            <seealso cref="M:WhetStone.Looping.append.Append``1(``0[]@,System.Collections.Generic.IEnumerable{``0})"/>
        </member>
        <member name="M:WhetStone.Looping.append.Append``1(``0[]@,System.Collections.Generic.IEnumerable{``0})">
            <summary>
            Resizes an array and adds <paramref name="toAdd"/> to its end.
            </summary>
            <typeparam name="T">The type of <paramref name="this"/>.</typeparam>
            <param name="this">The array to append to.</param>
            <param name="toAdd">The <see cref="T:System.Collections.Generic.IEnumerable`1"/> to copy to the <paramref name="this"/>.</param>
            <remarks><para>The array will be mutated.</para><para>If <paramref name="toAdd"/> is a <see cref="T:System.Collections.Generic.ICollection`1"/> or <see cref="T:System.Collections.Generic.IReadOnlyCollection`1"/>, its <see cref="M:System.Collections.Generic.ICollection`1.CopyTo(`0[],System.Int32)"/> method will be called.</para>
            <para>If all the elements to add are <typeparamref name="T"/>'s default value, assigning can be skipped.</para></remarks>
        </member>
        <member name="T:WhetStone.Looping.asArray">
            <summary>
            A static container for identity method
            </summary>
        </member>
        <member name="M:WhetStone.Looping.asArray.AsArray``1(System.Collections.Generic.IEnumerable{``0})">
            <summary>
            Get an <see cref="T:System.Collections.Generic.IEnumerable`1"/> as an array, or convert it to an array is unable
            </summary>
            <param name="this">The <see cref="T:System.Collections.Generic.IEnumerable`1"/> to convert.</param>
            <typeparam name="T">The inner type of <paramref name="this"/>.</typeparam>
            <returns><paramref name="this"/> casted to an <see cref="T:System.Array"/>, or converted to an array.</returns>
        </member>
        <member name="T:WhetStone.Looping.asyncDo">
            <summary>
            A static container for identity method
            </summary>
        </member>
        <member name="M:WhetStone.Looping.asyncDo.AsyncDo``1(System.Collections.Generic.IEnumerable{``0},System.Action{``0},System.Int32)">
            <summary>
            Enumerates and applies <paramref name="action" /> on an <see cref="T:System.Collections.Generic.IEnumerable`1"/> in parallel.
            </summary>
            <typeparam name="T">The type of the <see cref="T:System.Collections.Generic.IEnumerable`1"/>.</typeparam>
            <param name="this">The <see cref="T:System.Collections.Generic.IEnumerable`1"/> to enumerate.</param>
            <param name="action">The action to apply to each element of <paramref name="this"/></param>
            <param name="maxParallelism">The maximum number of threads that can enumerate <paramref name="this"/> simultaneously.</param>
            <returns>The result of the parallel loop</returns>
            <remarks>This simply decorates <see cref="M:WhetStone.Looping.asyncDo.AsyncDo``1(System.Collections.Generic.IEnumerable{``0},System.Action{``0,System.Threading.Tasks.ParallelLoopState,System.Int64},System.Int32)"/>.</remarks>
            <seealso cref="M:System.Threading.Tasks.Parallel.ForEach``1(System.Collections.Generic.IEnumerable{``0},System.Action{``0,System.Threading.Tasks.ParallelLoopState,System.Int64})"/>
        </member>
        <member name="M:WhetStone.Looping.asyncDo.AsyncDo``1(System.Collections.Generic.IEnumerable{``0},System.Action{``0,System.Threading.Tasks.ParallelLoopState},System.Int32)">
            <summary>
            Enumerates and applies <paramref name="action" /> on an <see cref="T:System.Collections.Generic.IEnumerable`1"/> in parallel.
            </summary>
            <typeparam name="T">The type of the <see cref="T:System.Collections.Generic.IEnumerable`1"/>.</typeparam>
            <param name="this">The <see cref="T:System.Collections.Generic.IEnumerable`1"/> to enumerate.</param>
            <param name="action">The action to apply to each element of <paramref name="this"/></param>
            <param name="maxParallelism">The maximum number of threads that can enumerate <paramref name="this"/> simultaneously.</param>
            <returns>The result of the parallel loop</returns>
            <remarks>This simply decorates <see cref="M:WhetStone.Looping.asyncDo.AsyncDo``1(System.Collections.Generic.IEnumerable{``0},System.Action{``0,System.Threading.Tasks.ParallelLoopState,System.Int64},System.Int32)"/>.</remarks>
            <seealso cref="M:System.Threading.Tasks.Parallel.ForEach``1(System.Collections.Generic.IEnumerable{``0},System.Action{``0,System.Threading.Tasks.ParallelLoopState,System.Int64})"/>
        </member>
        <member name="M:WhetStone.Looping.asyncDo.AsyncDo``1(System.Collections.Generic.IEnumerable{``0},System.Action{``0,System.Int64},System.Int32)">
            <summary>
            Enumerates and applies <paramref name="action" /> on an <see cref="T:System.Collections.Generic.IEnumerable`1"/> in parallel.
            </summary>
            <typeparam name="T">The type of the <see cref="T:System.Collections.Generic.IEnumerable`1"/>.</typeparam>
            <param name="this">The <see cref="T:System.Collections.Generic.IEnumerable`1"/> to enumerate.</param>
            <param name="action">The action to apply to each element of <paramref name="this"/></param>
            <param name="maxParallelism">The maximum number of threads that can enumerate <paramref name="this"/> simultaneously.</param>
            <returns>The result of the parallel loop</returns>
            <remarks>This simply decorates <see cref="M:WhetStone.Looping.asyncDo.AsyncDo``1(System.Collections.Generic.IEnumerable{``0},System.Action{``0,System.Threading.Tasks.ParallelLoopState,System.Int64},System.Int32)"/>.</remarks>
            <seealso cref="M:System.Threading.Tasks.Parallel.ForEach``1(System.Collections.Generic.IEnumerable{``0},System.Action{``0,System.Threading.Tasks.ParallelLoopState,System.Int64})"/>
        </member>
        <member name="M:WhetStone.Looping.asyncDo.AsyncDo``1(System.Collections.Generic.IEnumerable{``0},System.Action{``0,System.Threading.Tasks.ParallelLoopState,System.Int64},System.Int32)">
            <summary>
            Enumerates and applies <paramref name="action" /> on an <see cref="T:System.Collections.Generic.IEnumerable`1"/> in parallel.
            </summary>
            <typeparam name="T">The type of the <see cref="T:System.Collections.Generic.IEnumerable`1"/>.</typeparam>
            <param name="this">The <see cref="T:System.Collections.Generic.IEnumerable`1"/> to enumerate.</param>
            <param name="action">The action to apply to each element of <paramref name="this"/></param>
            <param name="maxParallelism">The maximum number of threads that can enumerate <paramref name="this"/> simultaneously.</param>
            <returns>The result of the parallel loop</returns>
            <remarks>This simply decorates <see cref="M:System.Threading.Tasks.Parallel.ForEach``1(System.Collections.Generic.IEnumerable{``0},System.Action{``0,System.Threading.Tasks.ParallelLoopState,System.Int64})"/>.</remarks>
            <seealso cref="M:System.Threading.Tasks.Parallel.ForEach``1(System.Collections.Generic.IEnumerable{``0},System.Action{``0,System.Threading.Tasks.ParallelLoopState,System.Int64})"/>
        </member>
        <member name="M:WhetStone.Looping.asyncDo.AsyncDo``1(System.Collections.Generic.IEnumerable{``0},System.Action{``0},System.Threading.Tasks.ParallelOptions)">
            <summary>
            Enumerates and applies <paramref name="action" /> on an <see cref="T:System.Collections.Generic.IEnumerable`1"/> in parallel.
            </summary>
            <typeparam name="T">The type of the <see cref="T:System.Collections.Generic.IEnumerable`1"/>.</typeparam>
            <param name="this">The <see cref="T:System.Collections.Generic.IEnumerable`1"/> to enumerate.</param>
            <param name="action">The action to apply to each element of <paramref name="this"/></param>
            <param name="options">The <see cref="T:System.Threading.Tasks.ParallelOptions"/> for the parallel loop.<paramref name="this"/> simultaneously.</param>
            <returns>The result of the parallel loop</returns>
            <remarks>This simply decorates <see cref="M:System.Threading.Tasks.Parallel.ForEach``1(System.Collections.Generic.IEnumerable{``0},System.Action{``0,System.Threading.Tasks.ParallelLoopState,System.Int64})"/>.</remarks>
            <seealso cref="M:System.Threading.Tasks.Parallel.ForEach``1(System.Collections.Generic.IEnumerable{``0},System.Action{``0,System.Threading.Tasks.ParallelLoopState,System.Int64})"/>
        </member>
        <member name="M:WhetStone.Looping.asyncDo.AsyncDo``1(System.Collections.Generic.IEnumerable{``0},System.Action{``0,System.Threading.Tasks.ParallelLoopState},System.Threading.Tasks.ParallelOptions)">
            <summary>
            Enumerates and applies <paramref name="action" /> on an <see cref="T:System.Collections.Generic.IEnumerable`1"/> in parallel.
            </summary>
            <typeparam name="T">The type of the <see cref="T:System.Collections.Generic.IEnumerable`1"/>.</typeparam>
            <param name="this">The <see cref="T:System.Collections.Generic.IEnumerable`1"/> to enumerate.</param>
            <param name="action">The action to apply to each element of <paramref name="this"/></param>
            <param name="options">The <see cref="T:System.Threading.Tasks.ParallelOptions"/> for the parallel loop.<paramref name="this"/> simultaneously.</param>
            <returns>The result of the parallel loop</returns>
            <remarks>This simply decorates <see cref="M:System.Threading.Tasks.Parallel.ForEach``1(System.Collections.Generic.IEnumerable{``0},System.Action{``0,System.Threading.Tasks.ParallelLoopState,System.Int64})"/>.</remarks>
            <seealso cref="M:System.Threading.Tasks.Parallel.ForEach``1(System.Collections.Generic.IEnumerable{``0},System.Action{``0,System.Threading.Tasks.ParallelLoopState,System.Int64})"/>
        </member>
        <member name="M:WhetStone.Looping.asyncDo.AsyncDo``1(System.Collections.Generic.IEnumerable{``0},System.Action{``0,System.Int64},System.Threading.Tasks.ParallelOptions)">
            <summary>
            Enumerates and applies <paramref name="action" /> on an <see cref="T:System.Collections.Generic.IEnumerable`1"/> in parallel.
            </summary>
            <typeparam name="T">The type of the <see cref="T:System.Collections.Generic.IEnumerable`1"/>.</typeparam>
            <param name="this">The <see cref="T:System.Collections.Generic.IEnumerable`1"/> to enumerate.</param>
            <param name="action">The action to apply to each element of <paramref name="this"/></param>
            <param name="options">The <see cref="T:System.Threading.Tasks.ParallelOptions"/> for the parallel loop.<paramref name="this"/> simultaneously.</param>
            <returns>The result of the parallel loop</returns>
            <remarks>This simply decorates <see cref="M:System.Threading.Tasks.Parallel.ForEach``1(System.Collections.Generic.IEnumerable{``0},System.Action{``0,System.Threading.Tasks.ParallelLoopState,System.Int64})"/>.</remarks>
            <seealso cref="M:System.Threading.Tasks.Parallel.ForEach``1(System.Collections.Generic.IEnumerable{``0},System.Action{``0,System.Threading.Tasks.ParallelLoopState,System.Int64})"/>
        </member>
        <member name="M:WhetStone.Looping.asyncDo.AsyncDo``1(System.Collections.Generic.IEnumerable{``0},System.Action{``0,System.Threading.Tasks.ParallelLoopState,System.Int64},System.Threading.Tasks.ParallelOptions)">
            <summary>
            Enumerates and applies <paramref name="action" /> on an <see cref="T:System.Collections.Generic.IEnumerable`1"/> in parallel.
            </summary>
            <typeparam name="T">The type of the <see cref="T:System.Collections.Generic.IEnumerable`1"/>.</typeparam>
            <param name="this">The <see cref="T:System.Collections.Generic.IEnumerable`1"/> to enumerate.</param>
            <param name="action">The action to apply to each element of <paramref name="this"/></param>
            <param name="options">The <see cref="T:System.Threading.Tasks.ParallelOptions"/> for the parallel loop.<paramref name="this"/> simultaneously.</param>
            <returns>The result of the parallel loop</returns>
            <remarks>This simply decorates <see cref="M:System.Threading.Tasks.Parallel.ForEach``1(System.Collections.Generic.IEnumerable{``0},System.Action{``0,System.Threading.Tasks.ParallelLoopState,System.Int64})"/>.</remarks>
            <seealso cref="M:System.Threading.Tasks.Parallel.ForEach``1(System.Collections.Generic.IEnumerable{``0},System.Action{``0,System.Threading.Tasks.ParallelLoopState,System.Int64})"/>
        </member>
        <member name="M:WhetStone.Looping.asyncDo.AsyncDo``1(System.Collections.Generic.IEnumerable{``0},System.Action{``0})">
            <summary>
            Enumerates and applies <paramref name="action" /> on an <see cref="T:System.Collections.Generic.IEnumerable`1"/> in parallel.
            </summary>
            <typeparam name="T">The type of the <see cref="T:System.Collections.Generic.IEnumerable`1"/>.</typeparam>
            <param name="this">The <see cref="T:System.Collections.Generic.IEnumerable`1"/> to enumerate.</param>
            <param name="action">The action to apply to each element of <paramref name="this"/></param>
            <returns>The result of the parallel loop</returns>
            <remarks>This simply decorates <see cref="M:System.Threading.Tasks.Parallel.ForEach``1(System.Collections.Generic.IEnumerable{``0},System.Action{``0,System.Threading.Tasks.ParallelLoopState,System.Int64})"/>.</remarks>
            <seealso cref="M:System.Threading.Tasks.Parallel.ForEach``1(System.Collections.Generic.IEnumerable{``0},System.Action{``0,System.Threading.Tasks.ParallelLoopState,System.Int64})"/>
        </member>
        <member name="M:WhetStone.Looping.asyncDo.AsyncDo``1(System.Collections.Generic.IEnumerable{``0},System.Action{``0,System.Threading.Tasks.ParallelLoopState})">
            <summary>
            Enumerates and applies <paramref name="action" /> on an <see cref="T:System.Collections.Generic.IEnumerable`1"/> in parallel.
            </summary>
            <typeparam name="T">The type of the <see cref="T:System.Collections.Generic.IEnumerable`1"/>.</typeparam>
            <param name="this">The <see cref="T:System.Collections.Generic.IEnumerable`1"/> to enumerate.</param>
            <param name="action">The action to apply to each element of <paramref name="this"/></param>
            <returns>The result of the parallel loop</returns>
            <remarks>This simply decorates <see cref="M:System.Threading.Tasks.Parallel.ForEach``1(System.Collections.Generic.IEnumerable{``0},System.Action{``0,System.Threading.Tasks.ParallelLoopState,System.Int64})"/>.</remarks>
            <seealso cref="M:System.Threading.Tasks.Parallel.ForEach``1(System.Collections.Generic.IEnumerable{``0},System.Action{``0,System.Threading.Tasks.ParallelLoopState,System.Int64})"/>
        </member>
        <member name="M:WhetStone.Looping.asyncDo.AsyncDo``1(System.Collections.Generic.IEnumerable{``0},System.Action{``0,System.Int64})">
            <summary>
            Enumerates and applies <paramref name="action" /> on an <see cref="T:System.Collections.Generic.IEnumerable`1"/> in parallel.
            </summary>
            <typeparam name="T">The type of the <see cref="T:System.Collections.Generic.IEnumerable`1"/>.</typeparam>
            <param name="this">The <see cref="T:System.Collections.Generic.IEnumerable`1"/> to enumerate.</param>
            <param name="action">The action to apply to each element of <paramref name="this"/></param>
            <returns>The result of the parallel loop</returns>
            <remarks>This simply decorates <see cref="M:System.Threading.Tasks.Parallel.ForEach``1(System.Collections.Generic.IEnumerable{``0},System.Action{``0,System.Threading.Tasks.ParallelLoopState,System.Int64})"/>.</remarks>
            <seealso cref="M:System.Threading.Tasks.Parallel.ForEach``1(System.Collections.Generic.IEnumerable{``0},System.Action{``0,System.Threading.Tasks.ParallelLoopState,System.Int64})"/>
        </member>
        <member name="M:WhetStone.Looping.asyncDo.AsyncDo``1(System.Collections.Generic.IEnumerable{``0},System.Action{``0,System.Threading.Tasks.ParallelLoopState,System.Int64})">
            <summary>
            Enumerates and applies <paramref name="action" /> on an <see cref="T:System.Collections.Generic.IEnumerable`1"/> in parallel.
            </summary>
            <typeparam name="T">The type of the <see cref="T:System.Collections.Generic.IEnumerable`1"/>.</typeparam>
            <param name="this">The <see cref="T:System.Collections.Generic.IEnumerable`1"/> to enumerate.</param>
            <param name="action">The action to apply to each element of <paramref name="this"/></param>
            <returns>The result of the parallel loop</returns>
            <remarks>This simply decorates <see cref="M:System.Threading.Tasks.Parallel.ForEach``1(System.Collections.Generic.IEnumerable{``0},System.Action{``0,System.Threading.Tasks.ParallelLoopState,System.Int64})"/>.</remarks>
            <seealso cref="M:System.Threading.Tasks.Parallel.ForEach``1(System.Collections.Generic.IEnumerable{``0},System.Action{``0,System.Threading.Tasks.ParallelLoopState,System.Int64})"/>
        </member>
        <member name="M:WhetStone.Looping.asyncDo.AsyncDo``1(System.Collections.Generic.IList{``0},System.Action{``0},System.Int32)">
            <summary>
            Enumerates and applies <paramref name="action" /> on an <see cref="T:System.Collections.Generic.IList`1"/> in parallel.
            </summary>
            <typeparam name="T">The type of the <see cref="T:System.Collections.Generic.IEnumerable`1"/>.</typeparam>
            <param name="this">The <see cref="T:System.Collections.Generic.IList`1"/> to enumerate.</param>
            <param name="action">The action to apply to each element of <paramref name="this"/></param>
            <param name="maxParallelism">The maximum number of threads that can enumerate <paramref name="this"/> simultaneously.</param>
            <returns>The result of the parallel loop</returns>
            <remarks>
            <para>This simply decorates <see cref="M:System.Threading.Tasks.Parallel.For(System.Int32,System.Int32,System.Action{System.Int32})"/>.</para>
            <para>Each thread is started to independently run over a slice of <paramref name="this"/>. This accesses each member of <paramref name="this"/> via the <see cref="P:System.Collections.Generic.IList`1.Item(System.Int32)"/> operator. If the <see cref="P:System.Collections.Generic.IList`1.Item(System.Int32)"/> operator is particularly slow, consider the <see cref="M:WhetStone.Looping.asyncDo.AsyncDo``1(System.Collections.Generic.IEnumerable{``0},System.Action{``0},System.Int32)"> Enumerating overloads</see>.</para></remarks>
            <seealso cref="M:System.Threading.Tasks.Parallel.For(System.Int32,System.Int32,System.Action{System.Int32})"/>
        </member>
        <member name="M:WhetStone.Looping.asyncDo.AsyncDo``1(System.Collections.Generic.IList{``0},System.Action{``0,System.Threading.Tasks.ParallelLoopState},System.Int32)">
            <summary>
            Enumerates and applies <paramref name="action" /> on an <see cref="T:System.Collections.Generic.IList`1"/> in parallel.
            </summary>
            <typeparam name="T">The type of the <see cref="T:System.Collections.Generic.IEnumerable`1"/>.</typeparam>
            <param name="this">The <see cref="T:System.Collections.Generic.IList`1"/> to enumerate.</param>
            <param name="action">The action to apply to each element of <paramref name="this"/></param>
            <param name="maxParallelism">The maximum number of threads that can enumerate <paramref name="this"/> simultaneously.</param>
            <returns>The result of the parallel loop</returns>
            <remarks>
            <para>This simply decorates <see cref="M:System.Threading.Tasks.Parallel.For(System.Int32,System.Int32,System.Action{System.Int32})"/>.</para>
            <para>Each thread is started to independently run over a slice of <paramref name="this"/>. This accesses each member of <paramref name="this"/> via the <see cref="P:System.Collections.Generic.IList`1.Item(System.Int32)"/> operator. If the <see cref="P:System.Collections.Generic.IList`1.Item(System.Int32)"/> operator is particularly slow, consider the <see cref="M:WhetStone.Looping.asyncDo.AsyncDo``1(System.Collections.Generic.IEnumerable{``0},System.Action{``0},System.Int32)"> Enumerating overloads</see>.</para></remarks>
        </member>
        <member name="M:WhetStone.Looping.asyncDo.AsyncDo``1(System.Collections.Generic.IList{``0},System.Action{``0,System.Int64},System.Int32)">
            <summary>
            Enumerates and applies <paramref name="action" /> on an <see cref="T:System.Collections.Generic.IList`1"/> in parallel.
            </summary>
            <typeparam name="T">The type of the <see cref="T:System.Collections.Generic.IEnumerable`1"/>.</typeparam>
            <param name="this">The <see cref="T:System.Collections.Generic.IList`1"/> to enumerate.</param>
            <param name="action">The action to apply to each element of <paramref name="this"/></param>
            <param name="maxParallelism">The maximum number of threads that can enumerate <paramref name="this"/> simultaneously.</param>
            <returns>The result of the parallel loop</returns>
            <remarks>
            <para>This simply decorates <see cref="M:System.Threading.Tasks.Parallel.For(System.Int32,System.Int32,System.Action{System.Int32})"/>.</para>
            <para>Each thread is started to independently run over a slice of <paramref name="this"/>. This accesses each member of <paramref name="this"/> via the <see cref="P:System.Collections.Generic.IList`1.Item(System.Int32)"/> operator. If the <see cref="P:System.Collections.Generic.IList`1.Item(System.Int32)"/> operator is particularly slow, consider the <see cref="M:WhetStone.Looping.asyncDo.AsyncDo``1(System.Collections.Generic.IEnumerable{``0},System.Action{``0},System.Int32)"> Enumerating overloads</see>.</para></remarks>
        </member>
        <member name="M:WhetStone.Looping.asyncDo.AsyncDo``1(System.Collections.Generic.IList{``0},System.Action{``0,System.Threading.Tasks.ParallelLoopState,System.Int64},System.Int32)">
            <summary>
            Enumerates and applies <paramref name="action" /> on an <see cref="T:System.Collections.Generic.IList`1"/> in parallel.
            </summary>
            <typeparam name="T">The type of the <see cref="T:System.Collections.Generic.IEnumerable`1"/>.</typeparam>
            <param name="this">The <see cref="T:System.Collections.Generic.IList`1"/> to enumerate.</param>
            <param name="action">The action to apply to each element of <paramref name="this"/></param>
            <param name="maxParallelism">The maximum number of threads that can enumerate <paramref name="this"/> simultaneously.</param>
            <returns>The result of the parallel loop</returns>
            <remarks>
            <para>This simply decorates <see cref="M:System.Threading.Tasks.Parallel.For(System.Int32,System.Int32,System.Action{System.Int32})"/>.</para>
            <para>Each thread is started to independently run over a slice of <paramref name="this"/>. This accesses each member of <paramref name="this"/> via the <see cref="P:System.Collections.Generic.IList`1.Item(System.Int32)"/> operator. If the <see cref="P:System.Collections.Generic.IList`1.Item(System.Int32)"/> operator is particularly slow, consider the <see cref="M:WhetStone.Looping.asyncDo.AsyncDo``1(System.Collections.Generic.IEnumerable{``0},System.Action{``0},System.Int32)"> Enumerating overloads</see>.</para></remarks>
        </member>
        <member name="M:WhetStone.Looping.asyncDo.AsyncDo``1(System.Collections.Generic.IList{``0},System.Action{``0},System.Threading.Tasks.ParallelOptions)">
            <summary>
            Enumerates and applies <paramref name="action" /> on an <see cref="T:System.Collections.Generic.IList`1"/> in parallel.
            </summary>
            <typeparam name="T">The type of the <see cref="T:System.Collections.Generic.IEnumerable`1"/>.</typeparam>
            <param name="this">The <see cref="T:System.Collections.Generic.IList`1"/> to enumerate.</param>
            <param name="action">The action to apply to each element of <paramref name="this"/></param>
            <param name="options">The options for the parallel loop.</param>
            <returns>The result of the parallel loop</returns>
            <remarks>
            <para>This simply decorates <see cref="M:System.Threading.Tasks.Parallel.For(System.Int32,System.Int32,System.Action{System.Int32})"/>.</para>
            <para>Each thread is started to independently run over a slice of <paramref name="this"/>. This accesses each member of <paramref name="this"/> via the <see cref="P:System.Collections.Generic.IList`1.Item(System.Int32)"/> operator. If the <see cref="P:System.Collections.Generic.IList`1.Item(System.Int32)"/> operator is particularly slow, consider the <see cref="M:WhetStone.Looping.asyncDo.AsyncDo``1(System.Collections.Generic.IEnumerable{``0},System.Action{``0},System.Int32)"> Enumerating overloads</see>.</para></remarks>
        </member>
        <member name="M:WhetStone.Looping.asyncDo.AsyncDo``1(System.Collections.Generic.IList{``0},System.Action{``0,System.Threading.Tasks.ParallelLoopState},System.Threading.Tasks.ParallelOptions)">
            <summary>
            Enumerates and applies <paramref name="action" /> on an <see cref="T:System.Collections.Generic.IList`1"/> in parallel.
            </summary>
            <typeparam name="T">The type of the <see cref="T:System.Collections.Generic.IEnumerable`1"/>.</typeparam>
            <param name="this">The <see cref="T:System.Collections.Generic.IList`1"/> to enumerate.</param>
            <param name="action">The action to apply to each element of <paramref name="this"/></param>
            <param name="options">The options for the parallel loop.</param>
            <returns>The result of the parallel loop</returns>
            <remarks>
            <para>This simply decorates <see cref="M:System.Threading.Tasks.Parallel.For(System.Int32,System.Int32,System.Action{System.Int32})"/>.</para>
            <para>Each thread is started to independently run over a slice of <paramref name="this"/>. This accesses each member of <paramref name="this"/> via the <see cref="P:System.Collections.Generic.IList`1.Item(System.Int32)"/> operator. If the <see cref="P:System.Collections.Generic.IList`1.Item(System.Int32)"/> operator is particularly slow, consider the <see cref="M:WhetStone.Looping.asyncDo.AsyncDo``1(System.Collections.Generic.IEnumerable{``0},System.Action{``0},System.Int32)"> Enumerating overloads</see>.</para></remarks>
        </member>
        <member name="M:WhetStone.Looping.asyncDo.AsyncDo``1(System.Collections.Generic.IList{``0},System.Action{``0,System.Int64},System.Threading.Tasks.ParallelOptions)">
            <summary>
            Enumerates and applies <paramref name="action" /> on an <see cref="T:System.Collections.Generic.IList`1"/> in parallel.
            </summary>
            <typeparam name="T">The type of the <see cref="T:System.Collections.Generic.IEnumerable`1"/>.</typeparam>
            <param name="this">The <see cref="T:System.Collections.Generic.IList`1"/> to enumerate.</param>
            <param name="action">The action to apply to each element of <paramref name="this"/></param>
            <param name="options">The options for the parallel loop.</param>
            <returns>The result of the parallel loop</returns>
            <remarks>
            <para>This simply decorates <see cref="M:System.Threading.Tasks.Parallel.For(System.Int32,System.Int32,System.Action{System.Int32})"/>.</para>
            <para>Each thread is started to independently run over a slice of <paramref name="this"/>. This accesses each member of <paramref name="this"/> via the <see cref="P:System.Collections.Generic.IList`1.Item(System.Int32)"/> operator. If the <see cref="P:System.Collections.Generic.IList`1.Item(System.Int32)"/> operator is particularly slow, consider the <see cref="M:WhetStone.Looping.asyncDo.AsyncDo``1(System.Collections.Generic.IEnumerable{``0},System.Action{``0},System.Int32)"> Enumerating overloads</see>.</para></remarks>
        </member>
        <member name="M:WhetStone.Looping.asyncDo.AsyncDo``1(System.Collections.Generic.IList{``0},System.Action{``0,System.Threading.Tasks.ParallelLoopState,System.Int64},System.Threading.Tasks.ParallelOptions)">
            <summary>
            Enumerates and applies <paramref name="action" /> on an <see cref="T:System.Collections.Generic.IList`1"/> in parallel.
            </summary>
            <typeparam name="T">The type of the <see cref="T:System.Collections.Generic.IEnumerable`1"/>.</typeparam>
            <param name="this">The <see cref="T:System.Collections.Generic.IList`1"/> to enumerate.</param>
            <param name="action">The action to apply to each element of <paramref name="this"/></param>
            <param name="options">The options for the parallel loop.</param>
            <returns>The result of the parallel loop</returns>
            <remarks>
            <para>This simply decorates <see cref="M:System.Threading.Tasks.Parallel.For(System.Int32,System.Int32,System.Action{System.Int32})"/>.</para>
            <para>Each thread is started to independently run over a slice of <paramref name="this"/>. This accesses each member of <paramref name="this"/> via the <see cref="P:System.Collections.Generic.IList`1.Item(System.Int32)"/> operator. If the <see cref="P:System.Collections.Generic.IList`1.Item(System.Int32)"/> operator is particularly slow, consider the <see cref="M:WhetStone.Looping.asyncDo.AsyncDo``1(System.Collections.Generic.IEnumerable{``0},System.Action{``0},System.Int32)"> Enumerating overloads</see>.</para></remarks>
        </member>
        <member name="M:WhetStone.Looping.asyncDo.AsyncDo``1(System.Collections.Generic.IList{``0},System.Action{``0})">
            <summary>
            Enumerates and applies <paramref name="action" /> on an <see cref="T:System.Collections.Generic.IList`1"/> in parallel.
            </summary>
            <typeparam name="T">The type of the <see cref="T:System.Collections.Generic.IEnumerable`1"/>.</typeparam>
            <param name="this">The <see cref="T:System.Collections.Generic.IList`1"/> to enumerate.</param>
            <param name="action">The action to apply to each element of <paramref name="this"/></param>
            <returns>The result of the parallel loop</returns>
            <remarks>
            <para>This simply decorates <see cref="M:System.Threading.Tasks.Parallel.For(System.Int32,System.Int32,System.Action{System.Int32})"/>.</para>
            <para>Each thread is started to independently run over a slice of <paramref name="this"/>. This accesses each member of <paramref name="this"/> via the <see cref="P:System.Collections.Generic.IList`1.Item(System.Int32)"/> operator. If the <see cref="P:System.Collections.Generic.IList`1.Item(System.Int32)"/> operator is particularly slow, consider the <see cref="M:WhetStone.Looping.asyncDo.AsyncDo``1(System.Collections.Generic.IEnumerable{``0},System.Action{``0},System.Int32)"> Enumerating overloads</see>.</para></remarks>
        </member>
        <member name="M:WhetStone.Looping.asyncDo.AsyncDo``1(System.Collections.Generic.IList{``0},System.Action{``0,System.Threading.Tasks.ParallelLoopState})">
            <summary>
            Enumerates and applies <paramref name="action" /> on an <see cref="T:System.Collections.Generic.IList`1"/> in parallel.
            </summary>
            <typeparam name="T">The type of the <see cref="T:System.Collections.Generic.IEnumerable`1"/>.</typeparam>
            <param name="this">The <see cref="T:System.Collections.Generic.IList`1"/> to enumerate.</param>
            <param name="action">The action to apply to each element of <paramref name="this"/></param>
            <returns>The result of the parallel loop</returns>
            <remarks>
            <para>This simply decorates <see cref="M:System.Threading.Tasks.Parallel.For(System.Int32,System.Int32,System.Action{System.Int32})"/>.</para>
            <para>Each thread is started to independently run over a slice of <paramref name="this"/>. This accesses each member of <paramref name="this"/> via the <see cref="P:System.Collections.Generic.IList`1.Item(System.Int32)"/> operator. If the <see cref="P:System.Collections.Generic.IList`1.Item(System.Int32)"/> operator is particularly slow, consider the <see cref="M:WhetStone.Looping.asyncDo.AsyncDo``1(System.Collections.Generic.IEnumerable{``0},System.Action{``0},System.Int32)"> Enumerating overloads</see>.</para></remarks>
        </member>
        <member name="M:WhetStone.Looping.asyncDo.AsyncDo``1(System.Collections.Generic.IList{``0},System.Action{``0,System.Int64})">
            <summary>
            Enumerates and applies <paramref name="action" /> on an <see cref="T:System.Collections.Generic.IList`1"/> in parallel.
            </summary>
            <typeparam name="T">The type of the <see cref="T:System.Collections.Generic.IEnumerable`1"/>.</typeparam>
            <param name="this">The <see cref="T:System.Collections.Generic.IList`1"/> to enumerate.</param>
            <param name="action">The action to apply to each element of <paramref name="this"/></param>
            <returns>The result of the parallel loop</returns>
            <remarks>
            <para>This simply decorates <see cref="M:System.Threading.Tasks.Parallel.For(System.Int32,System.Int32,System.Action{System.Int32})"/>.</para>
            <para>Each thread is started to independently run over a slice of <paramref name="this"/>. This accesses each member of <paramref name="this"/> via the <see cref="P:System.Collections.Generic.IList`1.Item(System.Int32)"/> operator. If the <see cref="P:System.Collections.Generic.IList`1.Item(System.Int32)"/> operator is particularly slow, consider the <see cref="M:WhetStone.Looping.asyncDo.AsyncDo``1(System.Collections.Generic.IEnumerable{``0},System.Action{``0},System.Int32)"> Enumerating overloads</see>.</para></remarks>
        </member>
        <member name="M:WhetStone.Looping.asyncDo.AsyncDo``1(System.Collections.Generic.IList{``0},System.Action{``0,System.Threading.Tasks.ParallelLoopState,System.Int64})">
            <summary>
            Enumerates and applies <paramref name="action" /> on an <see cref="T:System.Collections.Generic.IList`1"/> in parallel.
            </summary>
            <typeparam name="T">The type of the <see cref="T:System.Collections.Generic.IEnumerable`1"/>.</typeparam>
            <param name="this">The <see cref="T:System.Collections.Generic.IList`1"/> to enumerate.</param>
            <param name="action">The action to apply to each element of <paramref name="this"/></param>
            <returns>The result of the parallel loop</returns>
            <remarks>
            <para>This simply decorates <see cref="M:System.Threading.Tasks.Parallel.For(System.Int32,System.Int32,System.Action{System.Int32})"/>.</para>
            <para>Each thread is started to independently run over a slice of <paramref name="this"/>. This accesses each member of <paramref name="this"/> via the <see cref="P:System.Collections.Generic.IList`1.Item(System.Int32)"/> operator. If the <see cref="P:System.Collections.Generic.IList`1.Item(System.Int32)"/> operator is particularly slow, consider the <see cref="M:WhetStone.Looping.asyncDo.AsyncDo``1(System.Collections.Generic.IEnumerable{``0},System.Action{``0},System.Int32)"> Enumerating overloads</see>.</para></remarks>
        </member>
        <member name="T:WhetStone.Looping.attach">
            <summary>
            A static container for identity method
            </summary>
        </member>
        <member name="M:WhetStone.Looping.attach.Attach``2(System.Collections.Generic.IEnumerable{``0},System.Func{``0,``1})">
            <summary>
            Turns each element in an <see cref="T:System.Collections.Generic.IEnumerable`1"/> to a tuple including itself and an output of itself and a selector function.
            </summary>
            <typeparam name="T1">The type of the original <see cref="T:System.Collections.Generic.IEnumerable`1"/></typeparam>
            <typeparam name="T2">The type of <paramref name="selector"/>'s output.</typeparam>
            <param name="this">The original <see cref="T:System.Collections.Generic.IEnumerable`1"/></param>
            <param name="selector">The function from which to get the output as the second member of the tuple.</param>
            <returns>An <see cref="T:System.Collections.Generic.IEnumerable`1"/> of type <see cref="T:System.ValueTuple`2"/> of <paramref name="this"/>'s elements with the output of the selector function applied to them.</returns>
            <remarks><c>enumerable.Attach(selector)</c> is functionally identical to <c>enumerable.Zip(enumerable.Select(selector))</c>. Although here, the enumerable is enumerated only once per output enumeration.</remarks>
        </member>
        <member name="M:WhetStone.Looping.attach.Attach``3(System.Collections.Generic.IEnumerable{System.ValueTuple{``0,``1}},System.Func{``0,``1,``2})">
            <summary>
            Turns each element in an <see cref="T:System.Collections.Generic.IEnumerable`1"/> of type <see cref="T:System.ValueTuple`2"/> to a tuple including itself and an output of itself and a selector function.
            </summary>
            <typeparam name="T1">The first type of the original <see cref="T:System.Collections.Generic.IEnumerable`1"/> of type <see cref="T:System.ValueTuple`2"/></typeparam>
            <typeparam name="T2">The second type of the original <see cref="T:System.Collections.Generic.IEnumerable`1"/> of type <see cref="T:System.ValueTuple`2"/></typeparam>
            <typeparam name="T3">The type of <paramref name="selector"/>'s output.</typeparam>
            <param name="this">The original <see cref="T:System.Collections.Generic.IEnumerable`1"/> of type <see cref="T:System.ValueTuple`2"/></param>
            <param name="selector">The function from which to get the output as the third member of the tuple.</param>
            <returns>An <see cref="T:System.Collections.Generic.IEnumerable`1"/> of type <see cref="T:System.ValueTuple`3"/> of <paramref name="this"/>'s elements with the output of the selector function applied to them.</returns>
        </member>
        <member name="M:WhetStone.Looping.attach.Attach``4(System.Collections.Generic.IEnumerable{System.ValueTuple{``0,``1,``2}},System.Func{``0,``1,``2,``3})">
            <summary>
            Turns each element in an <see cref="T:System.Collections.Generic.IEnumerable`1"/> of type <see cref="T:System.ValueTuple`3"/> to a tuple including itself and an output of itself and a selector function.
            </summary>
            <typeparam name="T1">The first type of the original <see cref="T:System.Collections.Generic.IEnumerable`1"/> of type <see cref="T:System.ValueTuple`3"/></typeparam>
            <typeparam name="T2">The second type of the original <see cref="T:System.Collections.Generic.IEnumerable`1"/> of type <see cref="T:System.ValueTuple`3"/></typeparam>
            <typeparam name="T3">The third type of the original <see cref="T:System.Collections.Generic.IEnumerable`1"/> of type <see cref="T:System.ValueTuple`3"/></typeparam>
            <typeparam name="T4">The type of <paramref name="selector"/>'s output.</typeparam>
            <param name="this">The original <see cref="T:System.Collections.Generic.IEnumerable`1"/> of type <see cref="T:System.ValueTuple`3"/></param>
            <param name="selector">The function from which to get the output as the fourth member of the tuple.</param>
            <returns>An <see cref="T:System.Collections.Generic.IEnumerable`1"/> of type <see cref="T:System.ValueTuple`4"/> of <paramref name="this"/>'s elements with the output of the selector function applied to them.</returns>
        </member>
        <member name="M:WhetStone.Looping.attach.Attach``5(System.Collections.Generic.IEnumerable{System.ValueTuple{``0,``1,``2,``3}},System.Func{``0,``1,``2,``3,``4})">
            <summary>
            Turns each element in an <see cref="T:System.Collections.Generic.IEnumerable`1"/> of type <see cref="T:System.ValueTuple`4"/> to a tuple including itself and an output of itself and a selector function.
            </summary>
            <typeparam name="T1">The first type of the original <see cref="T:System.Collections.Generic.IEnumerable`1"/> of type <see cref="T:System.ValueTuple`4"/></typeparam>
            <typeparam name="T2">The second type of the original <see cref="T:System.Collections.Generic.IEnumerable`1"/> of type <see cref="T:System.ValueTuple`4"/></typeparam>
            <typeparam name="T3">The third type of the original <see cref="T:System.Collections.Generic.IEnumerable`1"/> of type <see cref="T:System.ValueTuple`4"/></typeparam>
            <typeparam name="T4">The fourth type of the original <see cref="T:System.Collections.Generic.IEnumerable`1"/> of type <see cref="T:System.ValueTuple`4"/></typeparam>
            <typeparam name="T5">The type of <paramref name="selector"/>'s output.</typeparam>
            <param name="this">The original <see cref="T:System.Collections.Generic.IEnumerable`1"/> of type <see cref="T:System.ValueTuple`4"/></param>
            <param name="selector">The function from which to get the output as the fifth member of the tuple.</param>
            <returns>An <see cref="T:System.Collections.Generic.IEnumerable`1"/> of type <see cref="T:System.ValueTuple`5"/> of <paramref name="this"/>'s elements with the output of the selector function applied to them.</returns>
        </member>
        <member name="M:WhetStone.Looping.attach.Attach``2(System.Collections.Generic.IList{``0},System.Func{``0,``1})">
            <summary>
            Turns each element in an <see cref="T:System.Collections.Generic.IList`1"/> to a tuple including itself and an output of itself and a selector function.
            </summary>
            <typeparam name="T1">The type of the original <see cref="T:System.Collections.Generic.IList`1"/></typeparam>
            <typeparam name="T2">The type of <paramref name="selector"/>'s output.</typeparam>
            <param name="this">The original <see cref="T:System.Collections.Generic.IList`1"/></param>
            <param name="selector">The function from which to get the output as the second member of the tuple.</param>
            <returns>An <see cref="T:System.Collections.Generic.IList`1"/> of type <see cref="T:System.ValueTuple`2"/> of <paramref name="this"/>'s elements with the output of the selector function applied to them.</returns>
            <remarks><c>enumerable.Attach(selector)</c> is functionally identical to <c>enumerable.Zip(enumerable.Select(selector))</c>. Although here, the enumerable is enumerated only once per output enumeration, the <see cref="P:System.Collections.Generic.IList`1.Item(System.Int32)"/> is invoked once per access.</remarks>
        </member>
        <member name="M:WhetStone.Looping.attach.Attach``3(System.Collections.Generic.IList{System.ValueTuple{``0,``1}},System.Func{``0,``1,``2})">
            <summary>
            Turns each element in an <see cref="T:System.Collections.Generic.IList`1"/> of type <see cref="T:System.ValueTuple`2"/> to a tuple including itself and an output of itself and a selector function.
            </summary>
            <typeparam name="T1">The first type of the original <see cref="T:System.Collections.Generic.IList`1"/> of type <see cref="T:System.ValueTuple`2"/></typeparam>
            <typeparam name="T2">The second type of the original <see cref="T:System.Collections.Generic.IList`1"/> of type <see cref="T:System.ValueTuple`2"/></typeparam>
            <typeparam name="T3">The type of <paramref name="selector"/>'s output.</typeparam>
            <param name="this">The original <see cref="T:System.Collections.Generic.IList`1"/> of type <see cref="T:System.ValueTuple`2"/></param>
            <param name="selector">The function from which to get the output as the third member of the tuple.</param>
            <returns>An <see cref="T:System.Collections.Generic.IList`1"/> of type <see cref="T:System.ValueTuple`3"/> of <paramref name="this"/>'s elements with the output of the selector function applied to them.</returns>
        </member>
        <member name="M:WhetStone.Looping.attach.Attach``4(System.Collections.Generic.IList{System.ValueTuple{``0,``1,``2}},System.Func{``0,``1,``2,``3})">
            <summary>
            Turns each element in an <see cref="T:System.Collections.Generic.IList`1"/> of type <see cref="T:System.ValueTuple`3"/> to a tuple including itself and an output of itself and a selector function.
            </summary>
            <typeparam name="T1">The first type of the original <see cref="T:System.Collections.Generic.IList`1"/> of type <see cref="T:System.ValueTuple`3"/></typeparam>
            <typeparam name="T2">The second type of the original <see cref="T:System.Collections.Generic.IList`1"/> of type <see cref="T:System.ValueTuple`3"/></typeparam>
            <typeparam name="T3">The third type of the original <see cref="T:System.Collections.Generic.IList`1"/> of type <see cref="T:System.ValueTuple`3"/></typeparam>
            <typeparam name="T4">The type of <paramref name="selector"/>'s output.</typeparam>
            <param name="this">The original <see cref="T:System.Collections.Generic.IList`1"/> of type <see cref="T:System.ValueTuple`3"/></param>
            <param name="selector">The function from which to get the output as the fourth member of the tuple.</param>
            <returns>An <see cref="T:System.Collections.Generic.IList`1"/> of type <see cref="T:System.ValueTuple`4"/> of <paramref name="this"/>'s elements with the output of the selector function applied to them.</returns>
        </member>
        <member name="M:WhetStone.Looping.attach.Attach``5(System.Collections.Generic.IList{System.ValueTuple{``0,``1,``2,``3}},System.Func{``0,``1,``2,``3,``4})">
            <summary>
            Turns each element in an <see cref="T:System.Collections.Generic.IList`1"/> of type <see cref="T:System.ValueTuple`4"/> to a tuple including itself and an output of itself and a selector function.
            </summary>
            <typeparam name="T1">The first type of the original <see cref="T:System.Collections.Generic.IList`1"/> of type <see cref="T:System.ValueTuple`4"/></typeparam>
            <typeparam name="T2">The second type of the original <see cref="T:System.Collections.Generic.IList`1"/> of type <see cref="T:System.ValueTuple`4"/></typeparam>
            <typeparam name="T3">The third type of the original <see cref="T:System.Collections.Generic.IList`1"/> of type <see cref="T:System.ValueTuple`4"/></typeparam>
            <typeparam name="T4">The fourth type of the original <see cref="T:System.Collections.Generic.IList`1"/> of type <see cref="T:System.ValueTuple`4"/></typeparam>
            <typeparam name="T5">The type of <paramref name="selector"/>'s output.</typeparam>
            <param name="this">The original <see cref="T:System.Collections.Generic.IList`1"/> of type <see cref="T:System.ValueTuple`4"/></param>
            <param name="selector">The function from which to get the output as the fifth member of the tuple.</param>
            <returns>An <see cref="T:System.Collections.Generic.IList`1"/> of type <see cref="T:System.ValueTuple`5"/> of <paramref name="this"/>'s elements with the output of the selector function applied to them.</returns>
        </member>
        <member name="T:WhetStone.Looping.attachAggregate">
            <summary>
            A static container for identity method
            </summary>
        </member>
        <member name="M:WhetStone.Looping.attachAggregate.AttachAggregate``2(System.Collections.Generic.IEnumerable{``0},System.Func{``0,``1,``1},``1)">
            <summary>
            Attaches a new <see cref="T:System.Collections.Generic.IEnumerable`1"/> to the original <see cref="T:System.Collections.Generic.IEnumerable`1"/>, created with an aggregator function.
            </summary>
            <typeparam name="T">The type of the original <see cref="T:System.Collections.Generic.IEnumerable`1"/>.</typeparam>
            <typeparam name="R">The type of the output of <paramref name="aggregator"/>.</typeparam>
            <param name="this">The original <see cref="T:System.Collections.Generic.IEnumerable`1"/></param>
            <param name="aggregator">The aggregator function.</param>
            <param name="seed">The initial seed for the aggregator function.</param>
            <returns><paramref name="this"/> zipped to <paramref name="aggregator"/>'s output.</returns>
            <example>
            This can simplify complicated <see cref="T:System.Collections.Generic.IEnumerable`1"/> expressions to a single line:
            <code>
            var indexedTriangleNumbers = range.Range(10).AttachAggregate((a,b)=>a+b);
            </code> 
            </example>
        </member>
        <member name="T:WhetStone.Looping.cache">
            <summary>
            A static container for identity method
            </summary>
        </member>
        <member name="M:WhetStone.Looping.cache.Cache``1(System.Collections.Generic.IEnumerable{``0},System.Nullable{System.Int32})">
            <overloads><summary>Stores the values of the enumerable in an cached container.</summary></overloads>
            <summary>
            Caches the <see cref="T:System.Collections.Generic.IEnumerable`1"/>, causing it to enumerate once at most.
            </summary>
            <typeparam name="T">The type of the <see cref="T:System.Collections.Generic.IEnumerable`1"/>.</typeparam>
            <param name="this">The <see cref="T:System.Collections.Generic.IEnumerable`1"/> to be cached.</param>
            <param name="bound">If set to an integer, only that number of elements will be cached.</param>
            <returns>A new structure, wrapping <paramref name="this"/> and storing its elements as they are enumerated.</returns>
        </member>
        <member name="M:WhetStone.Looping.cache.Cache``1(System.Collections.Generic.IList{``0},System.Nullable{System.Int32})">
            <summary>
            Caches the <see cref="T:System.Collections.Generic.IList`1"/>, causing it to enumerate once at most.
            </summary>
            <typeparam name="T">The type of the <see cref="T:System.Collections.Generic.IList`1"/>.</typeparam>
            <param name="this">The <see cref="T:System.Collections.Generic.IList`1"/> to be cached.</param>
            <param name="bound">If set to an integer, only that number of elements will be cached.</param>
            <returns>A new structure, wrapping <paramref name="this"/> and storing its elements as they are enumerated.</returns>
            <remarks>Because of the way caching works, and that lists may be partially cached, there are two ways enumerating a cache can be done. See <see cref="T:WhetStone.Looping.cache.IListCache`1"/>.</remarks>
        </member>
        <member name="T:WhetStone.Looping.cache.IListCache`1">
            <summary>
            An abstract class for Cached lists, allowing two ways to enumerate.
            </summary>
            <typeparam name="T">The type of the cached list.</typeparam>
        </member>
        <member name="M:WhetStone.Looping.cache.IListCache`1.GetEnumeratorRandAccess">
            <summary>
            Returns an enumerable, that returns its elements through <see cref="P:System.Collections.Generic.IList`1.Item(System.Int32)"/> operator. This means that only elements not cached will be accessed.
            </summary>
            <returns>An <see cref="T:System.Collections.Generic.IEnumerable`1"/> with specialized caching</returns>
        </member>
        <member name="M:WhetStone.Looping.cache.IListCache`1.GetEnumerator">
            <inheritdoc />
            <remarks>This uses the cache until it needs to access an element it has not cached. When this happens it will run an <see cref="T:System.Collections.Generic.IEnumerator`1"/> up to that element and continue.</remarks>
        </member>
        <member name="M:WhetStone.Looping.cache.IListCache`1.Add(`0)">
            <inheritdoc />
        </member>
        <member name="M:WhetStone.Looping.cache.IListCache`1.Clear">
            <inheritdoc />
        </member>
        <member name="M:WhetStone.Looping.cache.IListCache`1.Contains(`0)">
            <inheritdoc />
        </member>
        <member name="M:WhetStone.Looping.cache.IListCache`1.CopyTo(`0[],System.Int32)">
            <inheritdoc />
        </member>
        <member name="M:WhetStone.Looping.cache.IListCache`1.Remove(`0)">
            <inheritdoc />
        </member>
        <member name="P:WhetStone.Looping.cache.IListCache`1.Count">
            <inheritdoc />
        </member>
        <member name="P:WhetStone.Looping.cache.IListCache`1.IsReadOnly">
            <inheritdoc />
        </member>
        <member name="M:WhetStone.Looping.cache.IListCache`1.IndexOf(`0)">
            <inheritdoc />
        </member>
        <member name="M:WhetStone.Looping.cache.IListCache`1.Insert(System.Int32,`0)">
            <inheritdoc />
        </member>
        <member name="M:WhetStone.Looping.cache.IListCache`1.RemoveAt(System.Int32)">
            <inheritdoc />
        </member>
        <member name="P:WhetStone.Looping.cache.IListCache`1.Item(System.Int32)">
            <inheritdoc />
        </member>
        <member name="T:WhetStone.Looping.cacheCount">
            <summary>
            A static container for identity method
            </summary>
        </member>
        <member name="M:WhetStone.Looping.cacheCount.CacheCount``1(System.Collections.Generic.IEnumerable{``0})">
            <summary>
            Caches only the count of an <see cref="T:System.Collections.Generic.IEnumerable`1"/>, making only enumerate once at most in case of multiple <see cref="M:System.Linq.Enumerable.Count``1(System.Collections.Generic.IEnumerable{``0})"/> calls.
            </summary>
            <typeparam name="T">The type of the <see cref="T:System.Collections.Generic.IEnumerable`1"/></typeparam>
            <param name="this">The <see cref="T:System.Collections.Generic.IEnumerable`1"/> whose count will be cached.</param>
            <returns>A new, read only <see cref="T:System.Collections.Generic.ICollection`1"/> that remembers the count of <paramref name="this"/> hen it is calculated.</returns>
        </member>
        <member name="T:WhetStone.Looping.concat">
            <summary>
            A static container for identity method
            </summary>
        </member>
        <member name="M:WhetStone.Looping.concat.Concat``1(System.Collections.Generic.IList{System.Collections.Generic.IEnumerable{``0}})">
            <overloads>Concatenates multiple enumerables.</overloads>
            <summary>
            Concatenates an <see cref="T:System.Collections.Generic.IList`1"/> of <see cref="T:System.Collections.Generic.IEnumerable`1"/>.
            </summary>
            <typeparam name="T">Type of the <see cref="T:System.Collections.Generic.IEnumerable`1"/>s.</typeparam>
            <param name="a">An <see cref="T:System.Collections.Generic.IList`1"/> of <see cref="T:System.Collections.Generic.IEnumerable`1"/>s to concatenate.</param>
            <returns>An <see cref="T:System.Collections.Generic.IEnumerable`1"/>, with all the elements in the elements of <paramref name="a"/>, concatenated.</returns>
            <remarks>The underlying type of the return value is <see cref="T:System.Collections.Generic.IList`1"/>. However, many of the <see cref="T:System.Collections.Generic.IList`1"/> operations are not constant time (and are only at worst better then LINQ implementation) and as such, should not be called explicitly by the user. Use <see cref="M:System.Linq.Enumerable.ElementAt``1(System.Collections.Generic.IEnumerable{``0},System.Int32)"/> and <see cref="M:System.Linq.Enumerable.Count``1(System.Collections.Generic.IEnumerable{``0})"/> for list operations.</remarks>
        </member>
        <member name="M:WhetStone.Looping.concat.Concat``1(System.Collections.Generic.IList{System.Collections.Generic.IList{``0}},System.Nullable{System.Boolean})">
            <summary>
            Concatenates an <see cref="T:System.Collections.Generic.IList`1"/> of <see cref="T:System.Collections.Generic.IList`1"/>.
            </summary>
            <typeparam name="T">Type of the <see cref="T:System.Collections.Generic.IEnumerable`1"/>s.</typeparam>
            <param name="a">An <see cref="T:System.Collections.Generic.IList`1"/> of <see cref="T:System.Collections.Generic.IList`1"/>s to concatenate.</param>
            <param name="sameCount">Whether to optimize operations by assuming all sublists have he same lengths. a <see langword="null"/> value means that equal-length values should be checked for.</param>
            <returns>An <see cref="T:System.Collections.Generic.IList`1"/>, with all the elements in the elements of <paramref name="a"/>, concatenated.</returns>
            <remarks>In cases where you are certain the lists will either have different or same length, set the <paramref name="sameCount"/> accordingly.</remarks>
        </member>
        <member name="M:WhetStone.Looping.concat.Concat``1(System.Collections.Generic.IList{``0},System.Collections.Generic.IList{``0})">
            <summary>
            Concatenates two <see cref="T:System.Collections.Generic.IList`1"/>s.
            </summary>
            <typeparam name="T">Type of the <see cref="T:System.Collections.Generic.IEnumerable`1"/>s.</typeparam>
            <param name="this">The first <see cref="T:System.Collections.Generic.IList`1"/> to concatenate.</param>
            <param name="other">The second <see cref="T:System.Collections.Generic.IList`1"/> to concatenate.</param>
            <returns>A concatenated list of <paramref name="this"/> and <paramref name="other"/></returns>
            <remarks>This simply wraps <see cref="M:WhetStone.Looping.concat.Concat``1(System.Collections.Generic.IList{System.Collections.Generic.IList{``0}},System.Nullable{System.Boolean})"/>.</remarks>
        </member>
        <member name="M:WhetStone.Looping.concat.Concat``1(System.Collections.Generic.IEnumerable{System.Collections.Generic.IEnumerable{``0}})">
            <summary>
            Concatenates an <see cref="T:System.Collections.Generic.IEnumerable`1"/> of <see cref="T:System.Collections.Generic.IEnumerable`1"/>.
            </summary>
            <typeparam name="T">Type of the <see cref="T:System.Collections.Generic.IEnumerable`1"/>s.</typeparam>
            <param name="a">An <see cref="T:System.Collections.Generic.IList`1"/> of <see cref="T:System.Collections.Generic.IEnumerable`1"/>s to concatenate.</param>
            <returns>An <see cref="T:System.Collections.Generic.IEnumerable`1"/>, with all the elements in the elements of <paramref name="a"/>, concatenated.</returns>
            <remarks>The underlying type of the return value is <see cref="T:System.Collections.Generic.ICollection`1"/>. However, many of the <see cref="T:System.Collections.Generic.ICollection`1"/> operations are not constant time (and are only at worst better then LINQ implementation) and as such, should not be called explicitly by the user. Use <see cref="M:System.Linq.Enumerable.Count``1(System.Collections.Generic.IEnumerable{``0})"/> for list operations.</remarks>
        </member>
        <member name="T:WhetStone.Looping.coordinateBind">
            <summary>
            A static container for identity method
            </summary>
        </member>
        <member name="M:WhetStone.Looping.coordinateBind.CoordinateBind``1(``0[0:,0:])">
            <overloads>Attaches coordinates to nested enumerables.</overloads>
            <summary>
            Binds the elements in a 2D <see cref="T:System.Array"/> to their coordinates.
            </summary>
            <typeparam name="T">The type of the <see cref="T:System.Array"/>.</typeparam>
            <param name="this">The <see cref="T:System.Array"/> whose elements to use.</param>
            <returns>A new <see cref="T:System.Collections.Generic.IEnumerable`1"/> of <see cref="T:System.Tuple`3"/>. The first element of each tuple is the element, the next are the coordinates.</returns>
        </member>
        <member name="M:WhetStone.Looping.coordinateBind.CoordinateBind``1(``0[0:,0:,0:])">
            <summary>
            Binds the elements in a 3D <see cref="T:System.Array"/> to their coordinates.
            </summary>
            <typeparam name="T">The type of the <see cref="T:System.Array"/>.</typeparam>
            <param name="this">The <see cref="T:System.Array"/> whose elements to use.</param>
            <returns>A new <see cref="T:System.Collections.Generic.IEnumerable`1"/> of <see cref="T:System.Tuple`4"/>. The first element of each tuple is the element, the next are the coordinates.</returns>
        </member>
        <member name="M:WhetStone.Looping.coordinateBind.CoordinateBind(System.Array)">
            <summary>
            Binds the elements in an <see cref="T:System.Array"/> to their coordinates.
            </summary>
            <param name="this">The <see cref="T:System.Array"/> whose elements to use.</param>
            <returns>A new <see cref="T:System.Collections.Generic.IEnumerable`1"/> of <see cref="T:System.Tuple`2"/>. The first element of each tuple is the element, the second is the coordinates.</returns>
            <remarks>This is a non-generic overload, to use strong typing, see <see cref="M:WhetStone.Looping.coordinateBind.CoordinateBind``1(System.Array)"/>.</remarks>
        </member>
        <member name="M:WhetStone.Looping.coordinateBind.CoordinateBind``1(System.Array)">
            <summary>
            Binds the elements in an <see cref="T:System.Array"/> to their coordinates.
            </summary>
            <typeparam name="T">The type of the <see cref="T:System.Array"/>.</typeparam>
            <param name="this">The <see cref="T:System.Array"/> whose elements to use.</param>
            <returns>A new <see cref="T:System.Collections.Generic.IEnumerable`1"/> of <see cref="T:System.Tuple`2"/>. The first element of each tuple is the element, the second is the coordinates.</returns>
            <remarks>This is a generic overload, to use weak typing, see <see cref="M:WhetStone.Looping.coordinateBind.CoordinateBind``1(System.Array)"/>.</remarks>
        </member>
        <member name="M:WhetStone.Looping.coordinateBind.CoordinateBind``1(System.Collections.Generic.IEnumerable{System.Collections.Generic.IEnumerable{``0}})">
            <summary>
            Binds the elements in an <see cref="T:System.Collections.Generic.IEnumerable`1"/> of <see cref="T:System.Collections.Generic.IEnumerable`1"/>s to their coordinates.
            </summary>
            <typeparam name="T">The type of the <see cref="T:System.Collections.Generic.IEnumerable`1"/> of <see cref="T:System.Collections.Generic.IEnumerable`1"/>s.</typeparam>
            <param name="this">The <see cref="T:System.Collections.Generic.IEnumerable`1"/> of <see cref="T:System.Collections.Generic.IEnumerable`1"/>s whose elements to use.</param>
            <returns>A new <see cref="T:System.Collections.Generic.IEnumerable`1"/> of <see cref="T:System.Tuple`3"/>. The first element of each tuple is the element, the next are the coordinates.</returns>
        </member>
        <member name="M:WhetStone.Looping.coordinateBind.CoordinateBind``1(System.Collections.Generic.IEnumerable{System.Collections.Generic.IEnumerable{System.Collections.Generic.IEnumerable{``0}}})">
            <summary>
            Binds the elements in an <see cref="T:System.Collections.Generic.IEnumerable`1"/> of <see cref="T:System.Collections.Generic.IEnumerable`1"/> of <see cref="T:System.Collections.Generic.IEnumerable`1"/>s to their coordinates.
            </summary>
            <typeparam name="T">The type of the <see cref="T:System.Collections.Generic.IEnumerable`1"/> of <see cref="T:System.Collections.Generic.IEnumerable`1"/> of <see cref="T:System.Collections.Generic.IEnumerable`1"/>s.</typeparam>
            <param name="this">The <see cref="T:System.Collections.Generic.IEnumerable`1"/> of <see cref="T:System.Collections.Generic.IEnumerable`1"/> of <see cref="T:System.Collections.Generic.IEnumerable`1"/>s whose elements to use.</param>
            <returns>A new <see cref="T:System.Collections.Generic.IEnumerable`1"/> of <see cref="T:System.Tuple`4"/>. The first element of each tuple is the element, the next are the coordinates.</returns>
        </member>
        <member name="T:WhetStone.Looping.countBind">
            <summary>
            A static container for identity method
            </summary>
        </member>
        <member name="M:WhetStone.Looping.countBind.CountBind``1(System.Collections.Generic.IEnumerable{``0},System.Int32)">
            <overloads>Attaches indices to elements of enumerables.</overloads>
            <summary>
            Attaches indices to elements of an <see cref="T:System.Collections.Generic.IEnumerable`1"/>.
            </summary>
            <typeparam name="T">The type of the <see cref="T:System.Collections.Generic.IEnumerable`1"/></typeparam>
            <param name="a">The <see cref="T:System.Collections.Generic.IEnumerable`1"/> to attach to.</param>
            <param name="start">The initial index to count from.</param>
            <returns>An <see cref="T:System.Collections.Generic.IEnumerable`1"/> of <see cref="T:System.ValueTuple`2"/>, the second element of which is the index.</returns>
        </member>
        <member name="M:WhetStone.Looping.countBind.CountBind``2(System.Collections.Generic.IEnumerable{``0},``1)">
            <summary>
            Attaches indices to elements of an <see cref="T:System.Collections.Generic.IEnumerable`1"/>. Indexes are of any type and use fielding to increment.
            </summary>
            <typeparam name="T">The type of the <see cref="T:System.Collections.Generic.IEnumerable`1"/></typeparam>
            <typeparam name="C">The type of the index to attach.</typeparam>
            <param name="a">The <see cref="T:System.Collections.Generic.IEnumerable`1"/> to attach to.</param>
            <param name="start">The initial index to count from.</param>
            <returns>An <see cref="T:System.Collections.Generic.IEnumerable`1"/> of <see cref="T:System.ValueTuple`2"/>, the second element of which is the index.</returns>
            <remarks>This function uses fielding to increment the index.</remarks>
        </member>
        <member name="M:WhetStone.Looping.countBind.CountBind``1(System.Collections.Generic.ICollection{``0},System.Int32)">
            <summary>
            Attaches indices to elements of an <see cref="T:System.Collections.Generic.ICollection`1"/>.
            </summary>
            <typeparam name="T">The type of the <see cref="T:System.Collections.Generic.ICollection`1"/></typeparam>
            <param name="a">The <see cref="T:System.Collections.Generic.ICollection`1"/> to attach to.</param>
            <param name="start">The initial index to count from.</param>
            <returns>An <see cref="T:System.Collections.Generic.ICollection`1"/> of <see cref="T:System.ValueTuple`2"/>, the second element of which is the index.</returns>
        </member>
        <member name="M:WhetStone.Looping.countBind.CountBind``2(System.Collections.Generic.ICollection{``0},``1)">
            <summary>
            Attaches indices to elements of an <see cref="T:System.Collections.Generic.ICollection`1"/>. Indexes are of any type and use fielding to increment.
            </summary>
            <typeparam name="T">The type of the <see cref="T:System.Collections.Generic.ICollection`1"/></typeparam>
            <typeparam name="C">The type of the index to attach.</typeparam>
            <param name="a">The <see cref="T:System.Collections.Generic.ICollection`1"/> to attach to.</param>
            <param name="start">The initial index to count from.</param>
            <returns>An <see cref="T:System.Collections.Generic.ICollection`1"/> of <see cref="T:System.ValueTuple`2"/>, the second element of which is the index.</returns>
            <remarks>This function uses fielding to increment the index.</remarks>
        </member>
        <member name="M:WhetStone.Looping.countBind.CountBind``1(System.Collections.Generic.IList{``0},System.Int32)">
            <summary>
            Attaches indices to elements of an <see cref="T:System.Collections.Generic.IList`1"/>.
            </summary>
            <typeparam name="T">The type of the <see cref="T:System.Collections.Generic.IList`1"/></typeparam>
            <param name="a">The <see cref="T:System.Collections.Generic.IList`1"/> to attach to.</param>
            <param name="start">The initial index to count from.</param>
            <returns>An <see cref="T:System.Collections.Generic.IList`1"/> of <see cref="T:System.ValueTuple`2"/>, the second element of which is the index.</returns>
        </member>
        <member name="M:WhetStone.Looping.countBind.CountBind``2(System.Collections.Generic.IList{``0},``1)">
            <summary>
            Attaches indices to elements of an <see cref="T:System.Collections.Generic.IList`1"/>. Indexes are of any type and use fielding to increment.
            </summary>
            <typeparam name="T">The type of the <see cref="T:System.Collections.Generic.IList`1"/></typeparam>
            <typeparam name="C">The type of the index to attach.</typeparam>
            <param name="a">The <see cref="T:System.Collections.Generic.IList`1"/> to attach to.</param>
            <param name="start">The initial index to count from.</param>
            <returns>An <see cref="T:System.Collections.Generic.IList`1"/> of <see cref="T:System.ValueTuple`2"/>, the second element of which is the index.</returns>
            <remarks>This function uses fielding to increment the index.</remarks>
        </member>
        <member name="T:WhetStone.Looping.countUp">
            <summary>
            A static container for identity method
            </summary>
        </member>
        <member name="M:WhetStone.Looping.countUp.CountUp">
            <overloads>Get an infinite enumerable counting up from a value</overloads>
            <summary>
            Get an infinite <see cref="T:System.Collections.Generic.IList`1"/> of <see cref="T:System.Int32"/>s counting up from 0 in steps of 1. 
            </summary>
            <returns>A read-only, infinite <see cref="T:System.Collections.Generic.IList`1"/> of <see cref="T:System.Int32"/>s.</returns>
        </member>
        <member name="M:WhetStone.Looping.countUp.CountUp(System.Int32)">
            <overloads>Get an infinite enumerable counting up from a value</overloads>
            <summary>
            Get an infinite <see cref="T:System.Collections.Generic.IList`1"/> of <see cref="T:System.Int32"/>s counting up from <paramref name="start"/> in steps of 1. 
            </summary>
            <param name="start">The first element of the <see cref="T:System.Collections.Generic.IList`1"/></param>
            <returns>A read-only, infinite <see cref="T:System.Collections.Generic.IList`1"/> of <see cref="T:System.Int32"/>s.</returns>
        </member>
        <member name="M:WhetStone.Looping.countUp.CountUp(System.Int32,System.Int32)">
            <overloads>Get an infinite enumerable counting up from a value</overloads>
            <summary>
            Get an infinite <see cref="T:System.Collections.Generic.IList`1"/> of <see cref="T:System.Int32"/>s counting up from <paramref name="start"/> in steps of <paramref name="step"/>. 
            </summary>
            <param name="start">The first element of the <see cref="T:System.Collections.Generic.IList`1"/></param>
            <param name="step">The difference between any two consecutive elements.</param>
            <returns>A read-only, infinite <see cref="T:System.Collections.Generic.IList`1"/> of <see cref="T:System.Int32"/>s.</returns>
        </member>
        <member name="M:WhetStone.Looping.countUp.CountUp``1(``0,``0)">
            <summary>
            Get an infinite <see cref="T:System.Collections.Generic.IList`1"/> of generic type. counting up from <paramref name="start"/> in steps of <paramref name="step"/>. 
            </summary>
            <param name="start">The first element of the <see cref="T:System.Collections.Generic.IList`1"/></param>
            <param name="step">The difference between any two consecutive elements.</param>
            <returns>A read-only, infinite <see cref="T:System.Collections.Generic.IList`1"/>.</returns>
            <remarks>This function uses fielding to generate the addition function.</remarks>
        </member>
        <member name="M:WhetStone.Looping.countUp.CountUp``1(``0)">
            <summary>
            Get an infinite <see cref="T:System.Collections.Generic.IList`1"/> of generic type. counting up from <paramref name="start"/> in steps of 1 (uses fielding to get generic 1). 
            </summary>
            <param name="start">The first element of the <see cref="T:System.Collections.Generic.IList`1"/></param>
            <returns>A read-only, infinite <see cref="T:System.Collections.Generic.IList`1"/>.</returns>
            <remarks>This function uses fielding to generate the addition function and the step member.</remarks>
        </member>
        <member name="M:WhetStone.Looping.countUp.CountUp``1">
            <summary>
            Get an infinite <see cref="T:System.Collections.Generic.IList`1"/> of generic type. counting up from 0 in steps of 1 (uses fielding to get generic 0 and 1). 
            </summary>
            <returns>A read-only, infinite <see cref="T:System.Collections.Generic.IList`1"/>.</returns>
            <remarks>This function uses fielding to generate the addition function, the step member, and initial member.</remarks>
        </member>
        <member name="T:WhetStone.Looping.cover">
            <summary>
            A static container for identity method
            </summary>
        </member>
        <member name="M:WhetStone.Looping.cover.Cover``1(System.Collections.Generic.IEnumerable{``0},System.Collections.Generic.IEnumerable{``0},System.Int32)">
            <overloads>Gets an enumerable that has some members replaced by members of another enumerable</overloads>
            <summary>
            Get an <see cref="T:System.Collections.Generic.IEnumerable`1"/> that has members starting at <paramref name="start"/> replaced with <paramref name="cover"/>'s members.
            </summary>
            <typeparam name="T">The type of the <see cref="T:System.Collections.Generic.IEnumerable`1"/>s.</typeparam>
            <param name="this">The <see cref="T:System.Collections.Generic.IEnumerable`1"/> to cover.</param>
            <param name="cover">The <see cref="T:System.Collections.Generic.IEnumerable`1"/> to cover with.</param>
            <param name="start">The start of the covering. Inclusive.</param>
            <returns><paramref name="this"/> overlayed with <paramref name="cover"/> starting at index <paramref name="start"/>.</returns>
            <remarks>The returned enumerable is as long as <paramref name="this"/>, regardless of <paramref name="cover"/>'s length.</remarks>
        </member>
        <member name="M:WhetStone.Looping.cover.Cover``1(System.Collections.Generic.IEnumerable{``0},System.Collections.Generic.IEnumerable{``0},System.Collections.Generic.IEnumerable{System.Int32})">
            <summary>
            Get an <see cref="T:System.Collections.Generic.IEnumerable`1"/> that has members at <paramref name="coverindices"/> replaced with <paramref name="cover"/>'s members.
            </summary>
            <typeparam name="T">The type of the <see cref="T:System.Collections.Generic.IEnumerable`1"/>s.</typeparam>
            <param name="this">The <see cref="T:System.Collections.Generic.IEnumerable`1"/> to cover.</param>
            <param name="cover">The <see cref="T:System.Collections.Generic.IEnumerable`1"/> to cover with.</param>
            <param name="coverindices">The indices that will be covered.</param>
            <returns><paramref name="this"/> overlayed with <paramref name="cover"/> at indices <paramref name="coverindices"/>.</returns>
            <remarks>
            <para>The returned enumerable is as long as <paramref name="this"/>, regardless of <paramref name="cover"/>'s length.</para>
            <para>If <paramref name="coverindices"/> is longer than <paramref name="cover"/>, <paramref name="cover"/> will cycle over itself to provide adequate overlay.</para>
            <para>If <paramref name="coverindices"/> is shorter than <paramref name="cover"/>, the remaining elements of <paramref name="cover"/> will be ignored. The cover is only as long as <paramref name="coverindices"/>.</para>
            </remarks>
            <exception cref="T:System.ArgumentException">If <paramref name="cover"/> is empty.</exception>
        </member>
        <member name="M:WhetStone.Looping.cover.Cover``1(System.Collections.Generic.IEnumerable{``0},``0[])">
            <summary>
            Get an <see cref="T:System.Collections.Generic.IEnumerable`1"/> that has its first members replaced with <paramref name="cover"/>'s members.
            </summary>
            <typeparam name="T">The type of the <see cref="T:System.Collections.Generic.IEnumerable`1"/>s.</typeparam>
            <param name="this">The <see cref="T:System.Collections.Generic.IEnumerable`1"/> to cover.</param>
            <param name="cover">The <see cref="T:System.Collections.Generic.IEnumerable`1"/> to cover with.</param>
            <returns><paramref name="this"/> overlayed with <paramref name="cover"/> at index 0.</returns>
            <remarks>
            The returned enumerable is as long as <paramref name="this"/>, regardless of <paramref name="cover"/>'s length.
            </remarks>
        </member>
        <member name="M:WhetStone.Looping.cover.Cover``1(System.Collections.Generic.IEnumerable{``0},``0,System.Int32)">
            <summary>
            Get an <see cref="T:System.Collections.Generic.IEnumerable`1"/> that has member at <paramref name="start"/> replaced with <paramref name="cover"/> members.
            </summary>
            <typeparam name="T">The type of the <see cref="T:System.Collections.Generic.IEnumerable`1"/>s.</typeparam>
            <param name="this">The <see cref="T:System.Collections.Generic.IEnumerable`1"/> to cover.</param>
            <param name="cover">The <see cref="T:System.Collections.Generic.IEnumerable`1"/> to cover with.</param>
            <param name="start">The index of the cover.</param>
            <returns><paramref name="this"/> overlayed with <paramref name="cover"/> at index <paramref name="start"/>.</returns>
        </member>
        <member name="M:WhetStone.Looping.cover.Cover``1(System.Collections.Generic.IList{``0},System.Collections.Generic.IList{``0},System.Collections.Generic.IList{System.Int32})">
            <summary>
            Get an <see cref="T:System.Collections.Generic.IList`1"/> that has members at <paramref name="coverindices"/> replaced with <paramref name="cover"/>'s members.
            </summary>
            <typeparam name="T">The type of the <see cref="T:System.Collections.Generic.IList`1"/>s.</typeparam>
            <param name="this">The <see cref="T:System.Collections.Generic.IList`1"/> to cover.</param>
            <param name="cover">The <see cref="T:System.Collections.Generic.IList`1"/> to cover with.</param>
            <param name="coverindices">The indices that will be covered.</param>
            <returns><paramref name="this"/> overlayed with <paramref name="cover"/> at indices <paramref name="coverindices"/>.</returns>
            <remarks>
            <para>The returned enumerable is as long as <paramref name="this"/>, regardless of <paramref name="cover"/>'s length.</para>
            <para>If <paramref name="coverindices"/> is longer than <paramref name="cover"/>, <paramref name="cover"/> will cycle over itself to provide adequate overlay.</para>
            <para>If <paramref name="coverindices"/> is shorter than <paramref name="cover"/>, the remaining elements of <paramref name="cover"/> will be ignored. The cover is only as long as <paramref name="coverindices"/>.</para>
            <para>The returned <see cref="T:System.Collections.Generic.IList`1"/> is mutability passing (assuming all <paramref name="this"/>, <paramref name="cover"/>, <paramref name="coverindices"/> are mutable), however, its mutating methods are undefined and untested, and should be considered experimental.</para>
            </remarks>
            <exception cref="T:System.ArgumentException">If <paramref name="cover"/> is empty.</exception>
        </member>
        <member name="M:WhetStone.Looping.cover.Cover``1(System.Collections.Generic.IList{``0},System.Collections.Generic.IList{``0},System.Int32)">
            <summary>
            Get an <see cref="T:System.Collections.Generic.IList`1"/> that has members starting at <paramref name="start"/> replaced with <paramref name="cover"/>'s members.
            </summary>
            <typeparam name="T">The type of the <see cref="T:System.Collections.Generic.IList`1"/>s.</typeparam>
            <param name="this">The <see cref="T:System.Collections.Generic.IList`1"/> to cover.</param>
            <param name="cover">The <see cref="T:System.Collections.Generic.IList`1"/> to cover with.</param>
            <param name="start">The start of the covering. Inclusive.</param>
            <returns><paramref name="this"/> overlayed with <paramref name="cover"/> starting at index <paramref name="start"/>.</returns>
            <remarks>
            <para>The returned enumerable is as long as <paramref name="this"/>, regardless of <paramref name="cover"/>'s length.</para>
            <para>The returned <see cref="T:System.Collections.Generic.IList`1"/> is mutability passing (assuming both <paramref name="this"/>, <paramref name="cover"/> are mutable), however, its mutating methods are undefined and untested, and should be considered experimental.</para>
            </remarks>
        </member>
        <member name="M:WhetStone.Looping.cover.Cover``1(System.Collections.Generic.IList{``0},``0[])">
            <summary>
            Get an <see cref="T:System.Collections.Generic.IList`1"/> that has its first members replaced with <paramref name="cover"/>'s members.
            </summary>
            <typeparam name="T">The type of the <see cref="T:System.Collections.Generic.IList`1"/>s.</typeparam>
            <param name="this">The <see cref="T:System.Collections.Generic.IList`1"/> to cover.</param>
            <param name="cover">The <see cref="T:System.Collections.Generic.IList`1"/> to cover with.</param>
            <returns><paramref name="this"/> overlayed with <paramref name="cover"/> at index 0.</returns>
            <remarks>
            <para>The returned enumerable is as long as <paramref name="this"/>, regardless of <paramref name="cover"/>'s length.</para>
            <para>The returned <see cref="T:System.Collections.Generic.IList`1"/> is mutability passing (assuming both <paramref name="this"/>, <paramref name="cover"/> are mutable), however, its mutating methods are undefined and untested, and should be considered experimental.</para>
            </remarks>
        </member>
        <member name="M:WhetStone.Looping.cover.Cover``1(System.Collections.Generic.IList{``0},``0,System.Int32)">
            <summary>
            Get an <see cref="T:System.Collections.Generic.IList`1"/> that has member at <paramref name="start"/> replaced with <paramref name="cover"/> members.
            </summary>
            <typeparam name="T">The type of the <see cref="T:System.Collections.Generic.IList`1"/>s.</typeparam>
            <param name="this">The <see cref="T:System.Collections.Generic.IList`1"/> to cover.</param>
            <param name="cover">The <see cref="T:System.Collections.Generic.IList`1"/> to cover with.</param>
            <param name="start">The index of the cover.</param>
            <returns><paramref name="this"/> overlayed with <paramref name="cover"/> at index <paramref name="start"/>.</returns>
            /// <remarks>
            <para>The returned <see cref="T:System.Collections.Generic.IList`1"/> is mutability passing (assuming both <paramref name="this"/>, <paramref name="cover"/> are mutable), however, its mutating methods are undefined and untested, and should be considered experimental.</para>
            </remarks>
        </member>
        <member name="T:WhetStone.Looping.cycle">
            <summary>
            A static container for identity method
            </summary>
        </member>
        <member name="M:WhetStone.Looping.cycle.Cycle``1(System.Collections.Generic.IList{``0},System.Nullable{System.Int32})">
            <overloads>Gets an enumerable, repeating another enumerable.</overloads>
            <summary>
            Gets a new <see cref="T:System.Collections.Generic.IList`1"/>, that is <paramref name="this"/> repeated.
            </summary>
            <typeparam name="T">The type of the <see cref="T:System.Collections.Generic.IList`1"/>.</typeparam>
            <param name="this">The <see cref="T:System.Collections.Generic.IList`1"/> to repeat.</param>
            <param name="amount">How many times to repeat enumeration, or <see langword="null"/> for infinite repetition.</param>
            <returns>An <see cref="T:System.Collections.Generic.IList`1"/> that contains <paramref name="this"/>'s elements repeated.</returns>
        </member>
        <member name="M:WhetStone.Looping.cycle.Cycle``1(System.Collections.Generic.IEnumerable{``0},System.Nullable{System.Int32})">
            <summary>
            Gets a new <see cref="T:System.Collections.Generic.IEnumerable`1"/>, that is <paramref name="this"/> repeated.
            </summary>
            <typeparam name="T">The type of the <see cref="T:System.Collections.Generic.IEnumerable`1"/>.</typeparam>
            <param name="this">The <see cref="T:System.Collections.Generic.IEnumerable`1"/> to repeat.</param>
            <param name="amount">How many times to repeat enumeration, or <see langword="null"/> for infinite repetition.</param>
            <returns>An <see cref="T:System.Collections.Generic.IEnumerable`1"/> that contains <paramref name="this"/>'s elements repeated.</returns>
            <remarks>The underlying class of the return value implements a read-only <see cref="T:System.Collections.Generic.IList`1"/> interface. This is to accelerate certain LINQ operations, and should not be accessed by the user.</remarks>
        </member>
        <member name="T:WhetStone.Looping.deconstructEnumerable">
            <summary>
            A static container for identity method
            </summary>
        </member>
        <member name="M:WhetStone.Looping.deconstructEnumerable.Deconstruct``1(System.Collections.Generic.IEnumerator{``0},``0@)">
            <summary>
            Pop one element out of an <see cref="T:System.Collections.Generic.IEnumerator`1"/> and insert it into out variable
            </summary>
            <param name="this">the <see cref="T:System.Collections.Generic.IEnumerator`1"/> to deconstruct</param>
            <param name="mem1">the first element to pop into</param>
            <typeparam name="T">the type of the elements</typeparam>
        </member>
        <member name="M:WhetStone.Looping.deconstructEnumerable.Deconstruct``1(System.Collections.Generic.IEnumerator{``0},``0@,``0@)">
            <summary>
            Pop elements out of an <see cref="T:System.Collections.Generic.IEnumerator`1"/> and insert it into out variable
            </summary>
            <param name="this">the <see cref="T:System.Collections.Generic.IEnumerator`1"/> to deconstruct</param>
            <param name="mem1">the first element to pop into</param>
            <param name="mem2">the second element to pop into</param>
            <typeparam name="T">the type of the elements</typeparam>
        </member>
        <member name="M:WhetStone.Looping.deconstructEnumerable.Deconstruct``1(System.Collections.Generic.IEnumerator{``0},``0@,``0@,``0@)">
            <summary>
            Pop elements out of an <see cref="T:System.Collections.Generic.IEnumerator`1"/> and insert it into out variable
            </summary>
            <param name="this">the <see cref="T:System.Collections.Generic.IEnumerator`1"/> to deconstruct</param>
            <param name="mem1">the first element to pop into</param>
            <param name="mem2">the second element to pop into</param>
            <param name="mem3">the third element to pop into</param>
            <typeparam name="T">the type of the elements</typeparam>
        </member>
        <member name="M:WhetStone.Looping.deconstructEnumerable.Deconstruct``1(System.Collections.Generic.IEnumerator{``0},``0@,``0@,``0@,``0@)">
            <summary>
            Pop elements out of an <see cref="T:System.Collections.Generic.IEnumerator`1"/> and insert it into out variable
            </summary>
            <param name="this">the <see cref="T:System.Collections.Generic.IEnumerator`1"/> to deconstruct</param>
            <param name="mem1">the first element to pop into</param>
            <param name="mem2">the second element to pop into</param>
            <param name="mem3">the third element to pop into</param>
            <param name="mem4">the fourth element to pop into</param>
            <typeparam name="T">the type of the elements</typeparam>
        </member>
        <member name="M:WhetStone.Looping.deconstructEnumerable.Deconstruct``1(System.Collections.Generic.IEnumerator{``0},``0@,``0@,``0@,``0@,``0@)">
            <summary>
            Pop elements out of an <see cref="T:System.Collections.Generic.IEnumerator`1"/> and insert it into out variable
            </summary>
            <param name="this">the <see cref="T:System.Collections.Generic.IEnumerator`1"/> to deconstruct</param>
            <param name="mem1">the first element to pop into</param>
            <param name="mem2">the second element to pop into</param>
            <param name="mem3">the third element to pop into</param>
            <param name="mem4">the fourth element to pop into</param>
            <param name="mem5">the fifth element to pop into</param>
            <typeparam name="T">the type of the elements</typeparam>
        </member>
        <member name="M:WhetStone.Looping.deconstructEnumerable.Deconstruct``1(System.Collections.Generic.IEnumerator{``0},``0@,``0@,``0@,``0@,``0@,``0@)">
            <summary>
            Pop elements out of an <see cref="T:System.Collections.Generic.IEnumerator`1"/> and insert it into out variable
            </summary>
            <param name="this">the <see cref="T:System.Collections.Generic.IEnumerator`1"/> to deconstruct</param>
            <param name="mem1">the first element to pop into</param>
            <param name="mem2">the second element to pop into</param>
            <param name="mem3">the third element to pop into</param>
            <param name="mem4">the fourth element to pop into</param>
            <param name="mem5">the fifth element to pop into</param>
            <param name="mem6">the sixth element to pop into</param>
            <typeparam name="T">the type of the elements</typeparam>
        </member>
        <member name="M:WhetStone.Looping.deconstructEnumerable.Deconstruct``1(System.Collections.Generic.IEnumerator{``0},``0@,``0@,``0@,``0@,``0@,``0@,``0@)">
            <summary>
            Pop elements out of an <see cref="T:System.Collections.Generic.IEnumerator`1"/> and insert it into out variable
            </summary>
            <param name="this">the <see cref="T:System.Collections.Generic.IEnumerator`1"/> to deconstruct</param>
            <param name="mem1">the first element to pop into</param>
            <param name="mem2">the second element to pop into</param>
            <param name="mem3">the third element to pop into</param>
            <param name="mem4">the fourth element to pop into</param>
            <param name="mem5">the fifth element to pop into</param>
            <param name="mem6">the sixth element to pop into</param>
            <param name="mem7">the seventh element to pop into</param>
            <typeparam name="T">the type of the elements</typeparam>
        </member>
        <member name="M:WhetStone.Looping.deconstructEnumerable.Deconstruct``1(System.Collections.Generic.IEnumerable{``0},``0@)">
            <summary>
            deconstruct an <see cref="T:System.Collections.Generic.IEnumerable`1"/>
            </summary>
            <param name="this">The <see cref="T:System.Collections.Generic.IEnumerable`1"/> to deconstruct</param>
            <param name="mem1">the first memeber of the <paramref name="this"/></param>
            <typeparam name="T">The type of the elements</typeparam>
            <exception cref="T:System.ArgumentException">If <paramref name="this"/> is the wrong size</exception>
        </member>
        <member name="M:WhetStone.Looping.deconstructEnumerable.Deconstruct``1(System.Collections.Generic.IEnumerable{``0},``0@,``0@)">
            <summary>
            deconstruct an <see cref="T:System.Collections.Generic.IEnumerable`1"/>
            </summary>
            <param name="this">The <see cref="T:System.Collections.Generic.IEnumerable`1"/> to deconstruct</param>
            <param name="mem1">the first memeber of the <paramref name="this"/></param>
            <param name="mem2">the second memeber of the <paramref name="this"/></param>
            <typeparam name="T">The type of the elements</typeparam>
            <exception cref="T:System.ArgumentException">If <paramref name="this"/> is the wrong size</exception>
        </member>
        <member name="M:WhetStone.Looping.deconstructEnumerable.Deconstruct``1(System.Collections.Generic.IEnumerable{``0},``0@,``0@,``0@)">
            <summary>
            deconstruct an <see cref="T:System.Collections.Generic.IEnumerable`1"/>
            </summary>
            <param name="this">The <see cref="T:System.Collections.Generic.IEnumerable`1"/> to deconstruct</param>
            <param name="mem1">the first memeber of the <paramref name="this"/></param>
            <param name="mem2">the second memeber of the <paramref name="this"/></param>
            <param name="mem3">the third memeber of the <paramref name="this"/></param>
            <typeparam name="T">The type of the elements</typeparam>
            <exception cref="T:System.ArgumentException">If <paramref name="this"/> is the wrong size</exception>
        </member>
        <member name="M:WhetStone.Looping.deconstructEnumerable.Deconstruct``1(System.Collections.Generic.IEnumerable{``0},``0@,``0@,``0@,``0@)">
            <summary>
            deconstruct an <see cref="T:System.Collections.Generic.IEnumerable`1"/>
            </summary>
            <param name="this">The <see cref="T:System.Collections.Generic.IEnumerable`1"/> to deconstruct</param>
            <param name="mem1">the first memeber of the <paramref name="this"/></param>
            <param name="mem2">the second memeber of the <paramref name="this"/></param>
            <param name="mem3">the third memeber of the <paramref name="this"/></param>
            <param name="mem4">the fourth memeber of the <paramref name="this"/></param>
            <typeparam name="T">The type of the elements</typeparam>
            <exception cref="T:System.ArgumentException">If <paramref name="this"/> is the wrong size</exception>
        </member>
        <member name="M:WhetStone.Looping.deconstructEnumerable.Deconstruct``1(System.Collections.Generic.IEnumerable{``0},``0@,``0@,``0@,``0@,``0@)">
            <summary>
            deconstruct an <see cref="T:System.Collections.Generic.IEnumerable`1"/>
            </summary>
            <param name="this">The <see cref="T:System.Collections.Generic.IEnumerable`1"/> to deconstruct</param>
            <param name="mem1">the first memeber of the <paramref name="this"/></param>
            <param name="mem2">the second memeber of the <paramref name="this"/></param>
            <param name="mem3">the third memeber of the <paramref name="this"/></param>
            <param name="mem4">the fourth memeber of the <paramref name="this"/></param>
            <param name="mem5">the fifth memeber of the <paramref name="this"/></param>
            <typeparam name="T">The type of the elements</typeparam>
            <exception cref="T:System.ArgumentException">If <paramref name="this"/> is the wrong size</exception>
        </member>
        <member name="M:WhetStone.Looping.deconstructEnumerable.Deconstruct``1(System.Collections.Generic.IEnumerable{``0},``0@,``0@,``0@,``0@,``0@,``0@)">
            <summary>
            deconstruct an <see cref="T:System.Collections.Generic.IEnumerable`1"/>
            </summary>
            <param name="this">The <see cref="T:System.Collections.Generic.IEnumerable`1"/> to deconstruct</param>
            <param name="mem1">the first memeber of the <paramref name="this"/></param>
            <param name="mem2">the second memeber of the <paramref name="this"/></param>
            <param name="mem3">the third memeber of the <paramref name="this"/></param>
            <param name="mem4">the fourth memeber of the <paramref name="this"/></param>
            <param name="mem5">the fifth memeber of the <paramref name="this"/></param>
            <param name="mem6">the sixth memeber of the <paramref name="this"/></param>
            <typeparam name="T">The type of the elements</typeparam>
            <exception cref="T:System.ArgumentException">If <paramref name="this"/> is the wrong size</exception>
        </member>
        <member name="M:WhetStone.Looping.deconstructEnumerable.Deconstruct``1(System.Collections.Generic.IEnumerable{``0},``0@,``0@,``0@,``0@,``0@,``0@,``0@)">
            <summary>
            deconstruct an <see cref="T:System.Collections.Generic.IEnumerable`1"/>
            </summary>
            <param name="this">The <see cref="T:System.Collections.Generic.IEnumerable`1"/> to deconstruct</param>
            <param name="mem1">the first memeber of the <paramref name="this"/></param>
            <param name="mem2">the second memeber of the <paramref name="this"/></param>
            <param name="mem3">the third memeber of the <paramref name="this"/></param>
            <param name="mem4">the fourth memeber of the <paramref name="this"/></param>
            <param name="mem5">the fifth memeber of the <paramref name="this"/></param>
            <param name="mem6">the sixth memeber of the <paramref name="this"/></param>
            <param name="mem7">the seventh memeber of the <paramref name="this"/></param>
            <typeparam name="T">The type of the elements</typeparam>
            <exception cref="T:System.ArgumentException">If <paramref name="this"/> is the wrong size</exception>
        </member>
        <member name="T:WhetStone.Looping.detach">
            <summary>
            A static container for identity method
            </summary>
        </member>
        <member name="M:WhetStone.Looping.detach.Detach``2(System.Collections.Generic.IEnumerable{System.ValueTuple{``0,``1}},WhetStone.Guard.IGuard{``1})">
            <overloads>
            <summary>Transform an enumerable of tuples into only the tuple's first-most elements, assigning the leftover elements to guard objects upon enumeration.</summary>
            <remarks>This method is intended to be removed upon entry to C# 7 with tuple unpacking.</remarks>
            </overloads>
            <summary>
            Transform an <see cref="T:System.Collections.Generic.IEnumerable`1"/> of <see cref="T:System.ValueTuple`2"/>s into only the <see cref="T:System.ValueTuple`2"/>'s first element, assigning the second element to an <see cref="T:WhetStone.Guard.IGuard`1"/> upon enumeration.
            </summary>
            <typeparam name="T1">The first type of the <see cref="T:System.ValueTuple`2"/> members.</typeparam>
            <typeparam name="T2">The second type of the <see cref="T:System.ValueTuple`2"/> members.</typeparam>
            <param name="this">The <see cref="T:System.Collections.Generic.IEnumerable`1"/> to transform</param>
            <param name="informer1">The <see cref="T:WhetStone.Guard.IGuard`1"/> to which put the second values of the members. Setting to <see langword="null"/> will put the values nowhere.</param>
            <returns>A new <see cref="T:System.Collections.Generic.IEnumerable`1"/> with only the first member of each <see cref="T:System.ValueTuple`2"/> member. When an element is enumerated, the second element of the original enumerated member is set to be <paramref name="informer1"/>s value.</returns>
            <example>
            <code>
            var names = new [] {"Alice","Bob","Clara","Danny","Emily"};
            var index = new Guard&lt;int&gt;();
            foreach (var name in names.CountBind(start:1).Detach(index)){
                Console.WriteLine($"name #{index} is {name}");
            }
            </code>
            </example>
        </member>
        <member name="M:WhetStone.Looping.detach.Detach``3(System.Collections.Generic.IEnumerable{System.ValueTuple{``0,``1,``2}},WhetStone.Guard.IGuard{``1},WhetStone.Guard.IGuard{``2})">
            <summary>
            Transform an <see cref="T:System.Collections.Generic.IEnumerable`1"/> of <see cref="T:System.ValueTuple`3"/>s into only the <see cref="T:System.ValueTuple`3"/>'s first element, assigning the second and third elements to <see cref="T:WhetStone.Guard.IGuard`1"/>s upon enumeration.
            </summary>
            <typeparam name="T1">The first type of the <see cref="T:System.ValueTuple`3"/> members.</typeparam>
            <typeparam name="T2">The second type of the <see cref="T:System.ValueTuple`3"/> members.</typeparam>
            <typeparam name="T3">The third type of the <see cref="T:System.ValueTuple`3"/> members.</typeparam>
            <param name="this">The <see cref="T:System.Collections.Generic.IEnumerable`1"/> to transform</param>
            <param name="informer1">The <see cref="T:WhetStone.Guard.IGuard`1"/> to which put the second values of the members. Setting to <see langword="null"/> will put the values nowhere.</param>
            <param name="informer2">The <see cref="T:WhetStone.Guard.IGuard`1"/> to which put the third values of the members. Setting to <see langword="null"/> will put the values nowhere.</param>
            <returns>A new <see cref="T:System.Collections.Generic.IEnumerable`1"/> with only the first member of each <see cref="T:System.ValueTuple`2"/> member. When an element is enumerated, the second element of the original enumerated member is set to be <paramref name="informer1"/>s value.</returns>
        </member>
        <member name="M:WhetStone.Looping.detach.Detach``3(System.Collections.Generic.IEnumerable{System.ValueTuple{``0,``1,``2}},WhetStone.Guard.IGuard{``2})">
            <summary>
            Transform an <see cref="T:System.Collections.Generic.IEnumerable`1"/> of <see cref="T:System.ValueTuple`3"/>s into only the <see cref="T:System.ValueTuple`3"/>'s first and second elements, assigning the third element to an <see cref="T:WhetStone.Guard.IGuard`1"/> upon enumeration.
            </summary>
            <typeparam name="T1">The first type of the <see cref="T:System.ValueTuple`3"/> members.</typeparam>
            <typeparam name="T2">The second type of the <see cref="T:System.ValueTuple`3"/> members.</typeparam>
            <typeparam name="T3">The third type of the <see cref="T:System.ValueTuple`3"/> members.</typeparam>
            <param name="this">The <see cref="T:System.Collections.Generic.IEnumerable`1"/> to transform</param>
            <param name="informer1">The <see cref="T:WhetStone.Guard.IGuard`1"/> to which put the third values of the members. Setting to <see langword="null"/> will put the values nowhere.</param>
            <returns>A new <see cref="T:System.Collections.Generic.IEnumerable`1"/> with only the first member of each tuple member. When an element is enumerated, the remaining elements of the original enumerated member is set to be the informer's values.</returns>
        </member>
        <member name="M:WhetStone.Looping.detach.Detach``4(System.Collections.Generic.IEnumerable{System.ValueTuple{``0,``1,``2,``3}},WhetStone.Guard.IGuard{``1},WhetStone.Guard.IGuard{``2},WhetStone.Guard.IGuard{``3})">
            <summary>
            Transform an <see cref="T:System.Collections.Generic.IEnumerable`1"/> of <see cref="T:System.ValueTuple`4"/>s into only the <see cref="T:System.ValueTuple`4"/>'s first element, assigning the remaining elements to <see cref="T:WhetStone.Guard.IGuard`1"/>s upon enumeration.
            </summary>
            <typeparam name="T1">The first type of the <see cref="T:System.ValueTuple`4"/> members.</typeparam>
            <typeparam name="T2">The second type of the <see cref="T:System.ValueTuple`4"/> members.</typeparam>
            <typeparam name="T3">The third type of the <see cref="T:System.ValueTuple`4"/> members.</typeparam>
            <typeparam name="T4">The fourth type of the <see cref="T:System.ValueTuple`4"/> members.</typeparam>
            <param name="this">The <see cref="T:System.Collections.Generic.IEnumerable`1"/> to transform</param>
            <param name="informer1">The <see cref="T:WhetStone.Guard.IGuard`1"/> to which put the second values of the members. Setting to <see langword="null"/> will put the values nowhere.</param>
            <param name="informer2">The <see cref="T:WhetStone.Guard.IGuard`1"/> to which put the third values of the members. Setting to <see langword="null"/> will put the values nowhere.</param>
            <param name="informer3">The <see cref="T:WhetStone.Guard.IGuard`1"/> to which put the fourth values of the members. Setting to <see langword="null"/> will put the values nowhere.</param>
            <returns>A new <see cref="T:System.Collections.Generic.IEnumerable`1"/> with only the first member of each tuple member. When an element is enumerated, the remaining elements of the original enumerated member is set to be the informer's values.</returns>
        </member>
        <member name="M:WhetStone.Looping.detach.Detach``4(System.Collections.Generic.IEnumerable{System.ValueTuple{``0,``1,``2,``3}},WhetStone.Guard.IGuard{``2},WhetStone.Guard.IGuard{``3})">
            <summary>
            Transform an <see cref="T:System.Collections.Generic.IEnumerable`1"/> of <see cref="T:System.ValueTuple`4"/>s into only the <see cref="T:System.ValueTuple`4"/>'s first and second elements, assigning the remaining elements to <see cref="T:WhetStone.Guard.IGuard`1"/>s upon enumeration.
            </summary>
            <typeparam name="T1">The first type of the <see cref="T:System.ValueTuple`4"/> members.</typeparam>
            <typeparam name="T2">The second type of the <see cref="T:System.ValueTuple`4"/> members.</typeparam>
            <typeparam name="T3">The third type of the <see cref="T:System.ValueTuple`4"/> members.</typeparam>
            <typeparam name="T4">The fourth type of the <see cref="T:System.ValueTuple`4"/> members.</typeparam>
            <param name="this">The <see cref="T:System.Collections.Generic.IEnumerable`1"/> to transform</param>
            <param name="informer2">The <see cref="T:WhetStone.Guard.IGuard`1"/> to which put the third values of the members. Setting to <see langword="null"/> will put the values nowhere.</param>
            <param name="informer3">The <see cref="T:WhetStone.Guard.IGuard`1"/> to which put the fourth values of the members. Setting to <see langword="null"/> will put the values nowhere.</param>
            <returns>A new <see cref="T:System.Collections.Generic.IEnumerable`1"/> with only the first member of each tuple member. When an element is enumerated, the remaining elements of the original enumerated member is set to be the informer's values.</returns>
        </member>
        <member name="M:WhetStone.Looping.detach.Detach``4(System.Collections.Generic.IEnumerable{System.ValueTuple{``0,``1,``2,``3}},WhetStone.Guard.IGuard{``3})">
            <summary>
            Transform an <see cref="T:System.Collections.Generic.IEnumerable`1"/> of <see cref="T:System.ValueTuple`4"/>s into only the <see cref="T:System.ValueTuple`4"/>'s first, second, and third elements, assigning the remaining elements to <see cref="T:WhetStone.Guard.IGuard`1"/>s upon enumeration.
            </summary>
            <typeparam name="T1">The first type of the <see cref="T:System.ValueTuple`4"/> members.</typeparam>
            <typeparam name="T2">The second type of the <see cref="T:System.ValueTuple`4"/> members.</typeparam>
            <typeparam name="T3">The third type of the <see cref="T:System.ValueTuple`4"/> members.</typeparam>
            <typeparam name="T4">The fourth type of the <see cref="T:System.ValueTuple`4"/> members.</typeparam>
            <param name="this">The <see cref="T:System.Collections.Generic.IEnumerable`1"/> to transform</param>
            <param name="informer3">The <see cref="T:WhetStone.Guard.IGuard`1"/> to which put the fourth values of the members. Setting to <see langword="null"/> will put the values nowhere.</param>
            <returns>A new <see cref="T:System.Collections.Generic.IEnumerable`1"/> with only the first member of each tuple member. When an element is enumerated, the remaining elements of the original enumerated member is set to be the informer's values.</returns>
        </member>
        <member name="M:WhetStone.Looping.detach.Detach``2(System.Collections.Generic.IList{System.ValueTuple{``0,``1}},WhetStone.Guard.IGuard{``1})">
            <summary>
            Transform an <see cref="T:System.Collections.Generic.IList`1"/> of <see cref="T:System.ValueTuple`2"/>s into only the <see cref="T:System.ValueTuple`2"/>'s first element, assigning the second element to an <see cref="T:WhetStone.Guard.IGuard`1"/> upon enumeration.
            </summary>
            <typeparam name="T1">The first type of the <see cref="T:System.ValueTuple`2"/> members.</typeparam>
            <typeparam name="T2">The second type of the <see cref="T:System.ValueTuple`2"/> members.</typeparam>
            <param name="this">The <see cref="T:System.Collections.Generic.IList`1"/> to transform</param>
            <param name="informer1">The <see cref="T:WhetStone.Guard.IGuard`1"/> to which put the second values of the members. Setting to <see langword="null"/> will put the values nowhere.</param>
            <returns>A new <see cref="T:System.Collections.Generic.IList`1"/> with only the first member of each <see cref="T:System.ValueTuple`2"/> member. When an element is enumerated, the second element of the original enumerated member is set to be <paramref name="informer1"/>s value.</returns>
        </member>
        <member name="M:WhetStone.Looping.detach.Detach``3(System.Collections.Generic.IList{System.ValueTuple{``0,``1,``2}},WhetStone.Guard.IGuard{``1},WhetStone.Guard.IGuard{``2})">
            <summary>
            Transform an <see cref="T:System.Collections.Generic.IList`1"/> of <see cref="T:System.ValueTuple`3"/>s into only the <see cref="T:System.ValueTuple`3"/>'s first element, assigning the second and third elements to <see cref="T:WhetStone.Guard.IGuard`1"/>s upon enumeration.
            </summary>
            <typeparam name="T1">The first type of the <see cref="T:System.ValueTuple`3"/> members.</typeparam>
            <typeparam name="T2">The second type of the <see cref="T:System.ValueTuple`3"/> members.</typeparam>
            <typeparam name="T3">The third type of the <see cref="T:System.ValueTuple`3"/> members.</typeparam>
            <param name="this">The <see cref="T:System.Collections.Generic.IList`1"/> to transform</param>
            <param name="informer1">The <see cref="T:WhetStone.Guard.IGuard`1"/> to which put the second values of the members. Setting to <see langword="null"/> will put the values nowhere.</param>
            <param name="informer2">The <see cref="T:WhetStone.Guard.IGuard`1"/> to which put the third values of the members. Setting to <see langword="null"/> will put the values nowhere.</param>
            <returns>A new <see cref="T:System.Collections.Generic.IList`1"/> with only the first member of each <see cref="T:System.ValueTuple`2"/> member. When an element is enumerated, the second element of the original enumerated member is set to be <paramref name="informer1"/>s value.</returns>
        </member>
        <member name="M:WhetStone.Looping.detach.Detach``3(System.Collections.Generic.IList{System.ValueTuple{``0,``1,``2}},WhetStone.Guard.IGuard{``2})">
            <summary>
            Transform an <see cref="T:System.Collections.Generic.IList`1"/> of <see cref="T:System.ValueTuple`3"/>s into only the <see cref="T:System.ValueTuple`3"/>'s first and second elements, assigning the third element to an <see cref="T:WhetStone.Guard.IGuard`1"/> upon enumeration.
            </summary>
            <typeparam name="T1">The first type of the <see cref="T:System.ValueTuple`3"/> members.</typeparam>
            <typeparam name="T2">The second type of the <see cref="T:System.ValueTuple`3"/> members.</typeparam>
            <typeparam name="T3">The third type of the <see cref="T:System.ValueTuple`3"/> members.</typeparam>
            <param name="this">The <see cref="T:System.Collections.Generic.IList`1"/> to transform</param>
            <param name="informer1">The <see cref="T:WhetStone.Guard.IGuard`1"/> to which put the third values of the members. Setting to <see langword="null"/> will put the values nowhere.</param>
            <returns>A new <see cref="T:System.Collections.Generic.IList`1"/> with only the first member of each tuple member. When an element is enumerated, the remaining elements of the original enumerated member is set to be the informer's values.</returns>
        </member>
        <member name="M:WhetStone.Looping.detach.Detach``4(System.Collections.Generic.IList{System.ValueTuple{``0,``1,``2,``3}},WhetStone.Guard.IGuard{``1},WhetStone.Guard.IGuard{``2},WhetStone.Guard.IGuard{``3})">
            <summary>
            Transform an <see cref="T:System.Collections.Generic.IList`1"/> of <see cref="T:System.ValueTuple`4"/>s into only the <see cref="T:System.ValueTuple`4"/>'s first element, assigning the remaining elements to <see cref="T:WhetStone.Guard.IGuard`1"/>s upon enumeration.
            </summary>
            <typeparam name="T1">The first type of the <see cref="T:System.ValueTuple`4"/> members.</typeparam>
            <typeparam name="T2">The second type of the <see cref="T:System.ValueTuple`4"/> members.</typeparam>
            <typeparam name="T3">The third type of the <see cref="T:System.ValueTuple`4"/> members.</typeparam>
            <typeparam name="T4">The fourth type of the <see cref="T:System.ValueTuple`4"/> members.</typeparam>
            <param name="this">The <see cref="T:System.Collections.Generic.IList`1"/> to transform</param>
            <param name="informer1">The <see cref="T:WhetStone.Guard.IGuard`1"/> to which put the second values of the members. Setting to <see langword="null"/> will put the values nowhere.</param>
            <param name="informer2">The <see cref="T:WhetStone.Guard.IGuard`1"/> to which put the third values of the members. Setting to <see langword="null"/> will put the values nowhere.</param>
            <param name="informer3">The <see cref="T:WhetStone.Guard.IGuard`1"/> to which put the fourth values of the members. Setting to <see langword="null"/> will put the values nowhere.</param>
            <returns>A new <see cref="T:System.Collections.Generic.IList`1"/> with only the first member of each tuple member. When an element is enumerated, the remaining elements of the original enumerated member is set to be the informer's values.</returns>
        </member>
        <member name="M:WhetStone.Looping.detach.Detach``4(System.Collections.Generic.IList{System.ValueTuple{``0,``1,``2,``3}},WhetStone.Guard.IGuard{``2},WhetStone.Guard.IGuard{``3})">
            <summary>
            Transform an <see cref="T:System.Collections.Generic.IList`1"/> of <see cref="T:System.ValueTuple`4"/>s into only the <see cref="T:System.ValueTuple`4"/>'s first and second elements, assigning the remaining elements to <see cref="T:WhetStone.Guard.IGuard`1"/>s upon enumeration.
            </summary>
            <typeparam name="T1">The first type of the <see cref="T:System.ValueTuple`4"/> members.</typeparam>
            <typeparam name="T2">The second type of the <see cref="T:System.ValueTuple`4"/> members.</typeparam>
            <typeparam name="T3">The third type of the <see cref="T:System.ValueTuple`4"/> members.</typeparam>
            <typeparam name="T4">The fourth type of the <see cref="T:System.ValueTuple`4"/> members.</typeparam>
            <param name="this">The <see cref="T:System.Collections.Generic.IList`1"/> to transform</param>
            <param name="informer2">The <see cref="T:WhetStone.Guard.IGuard`1"/> to which put the third values of the members. Setting to <see langword="null"/> will put the values nowhere.</param>
            <param name="informer3">The <see cref="T:WhetStone.Guard.IGuard`1"/> to which put the fourth values of the members. Setting to <see langword="null"/> will put the values nowhere.</param>
            <returns>A new <see cref="T:System.Collections.Generic.IList`1"/> with only the first member of each tuple member. When an element is enumerated, the remaining elements of the original enumerated member is set to be the informer's values.</returns>
        </member>
        <member name="M:WhetStone.Looping.detach.Detach``4(System.Collections.Generic.IList{System.ValueTuple{``0,``1,``2,``3}},WhetStone.Guard.IGuard{``3})">
            <summary>
            Transform an <see cref="T:System.Collections.Generic.IList`1"/> of <see cref="T:System.ValueTuple`4"/>s into only the <see cref="T:System.ValueTuple`4"/>'s first, second, and third elements, assigning the remaining elements to <see cref="T:WhetStone.Guard.IGuard`1"/>s upon enumeration.
            </summary>
            <typeparam name="T1">The first type of the <see cref="T:System.ValueTuple`4"/> members.</typeparam>
            <typeparam name="T2">The second type of the <see cref="T:System.ValueTuple`4"/> members.</typeparam>
            <typeparam name="T3">The third type of the <see cref="T:System.ValueTuple`4"/> members.</typeparam>
            <typeparam name="T4">The fourth type of the <see cref="T:System.ValueTuple`4"/> members.</typeparam>
            <param name="this">The <see cref="T:System.Collections.Generic.IList`1"/> to transform</param>
            <param name="informer3">The <see cref="T:WhetStone.Guard.IGuard`1"/> to which put the fourth values of the members. Setting to <see langword="null"/> will put the values nowhere.</param>
            <returns>A new <see cref="T:System.Collections.Generic.IList`1"/> with only the first member of each tuple member. When an element is enumerated, the remaining elements of the original enumerated member is set to be the informer's values.</returns>
        </member>
        <member name="T:WhetStone.Looping.distinct">
            <summary>
            A static container for identity method
            </summary>
        </member>
        <member name="M:WhetStone.Looping.distinct.DistinctSorted``1(System.Collections.Generic.IEnumerable{``0},System.Collections.Generic.IEqualityComparer{``0})">
            <summary>
            Filters the sorted <see cref="T:System.Collections.Generic.IEnumerable`1"/>  of any duplicates. 
            </summary>
            <typeparam name="T">The type of the sorted <see cref="T:System.Collections.Generic.IEnumerable`1"/></typeparam>
            <param name="this">The sorted <see cref="T:System.Collections.Generic.IEnumerable`1"/></param>
            <param name="comp">The <see cref="T:System.Collections.Generic.IEqualityComparer`1"/> to check for equality. <see langword="null"/> means default <see cref="T:System.Collections.Generic.IEqualityComparer`1"/>.</param>
            <returns>A new <see cref="T:System.Collections.Generic.IEnumerable`1"/> that only contains one element for every equal sub-enumerable in <paramref name="this"/>.</returns>
            <remarks>
            <para><paramref name="this"/> doesn't have to be sorted, it just has to have all elements equal to each other adjacent.</para>
            <para>Alternately, all non-adjacent equal elements will be treated as non-equal.</para>
            </remarks>
        </member>
        <member name="T:WhetStone.Looping.do">
            <summary>
            A static container for identity method
            </summary>
        </member>
        <member name="M:WhetStone.Looping.do.Do``1(System.Collections.Generic.IEnumerable{``0},System.Action{``0})">
            <summary>
            Enumerates the entire <see cref="T:System.Collections.Generic.IEnumerable`1"/> and applies a method to it.
            </summary>
            <typeparam name="T">The type of the <see cref="T:System.Collections.Generic.IEnumerable`1"/>.</typeparam>
            <param name="this">The <see cref="T:System.Collections.Generic.IEnumerable`1"/> to enumerate.</param>
            <param name="action">The <see cref="T:System.Action`1"/> to invoke on each element. If null, no action will be invoked, but the <paramref name="this"/> will still be enumerated.</param>
        </member>
        <member name="T:WhetStone.Looping.duplicates">
            <summary>
            A static container for identity method
            </summary>
        </member>
        <member name="M:WhetStone.Looping.duplicates.Duplicates``1(System.Collections.Generic.IEnumerable{``0},System.Collections.Generic.IEqualityComparer{``0},System.Int32)">
            <summary>
            Filters out all elements in an <see cref="T:System.Collections.Generic.IEnumerable`1"/> that don't appear enough times.
            </summary>
            <typeparam name="T">The type of the <see cref="T:System.Collections.Generic.IEnumerable`1"/>.</typeparam>
            <param name="arr">The <see cref="T:System.Collections.Generic.IEnumerable`1"/> to filter.</param>
            <param name="comp">The <see cref="T:System.Collections.Generic.IEqualityComparer`1"/> to use to compare elements. <see langword="null"/> will use the default <see cref="T:System.Collections.Generic.IEqualityComparer`1"/></param>
            <param name="minoccurances">The minimum number of times an element must appear in order to not be filtered out.</param>
            <returns>A filtered <see cref="T:System.Collections.Generic.IEnumerable`1"/> with only elements in <paramref name="arr"/> that appear at least <paramref name="minoccurances"/> times.</returns>
            <remarks>Space complexity: O(|arr|)</remarks>
        </member>
        <member name="M:WhetStone.Looping.duplicates.DuplicatesSorted``1(System.Collections.Generic.IEnumerable{``0},System.Collections.Generic.IEqualityComparer{``0},System.Int32)">
            <summary>
            Filters out all elements in a sorted <see cref="T:System.Collections.Generic.IEnumerable`1"/> that don't appear enough times.
            </summary>
            <typeparam name="T">The type of the <see cref="T:System.Collections.Generic.IEnumerable`1"/>.</typeparam>
            <param name="arr">The sorted <see cref="T:System.Collections.Generic.IEnumerable`1"/> to filter.</param>
            <param name="comp">The <see cref="T:System.Collections.Generic.IEqualityComparer`1"/> to use to compare elements. <see langword="null"/> will use the default <see cref="T:System.Collections.Generic.IEqualityComparer`1"/></param>
            <param name="minoccurances">The minimum number of times an element must appear in order to not be filtered out.</param>
            <returns>A filtered <see cref="T:System.Collections.Generic.IEnumerable`1"/> with only elements in <paramref name="arr"/> that appear at least <paramref name="minoccurances"/> times.</returns>
            <remarks>
            <para><paramref name="arr"/> doesn't have to be sorted, it just has to have all elements equal to each other adjacent.</para>
            <para>Alternately, all non-adjacent equal elements will be treated as non-equal.</para>
            </remarks>
        </member>
        <member name="T:WhetStone.Looping.editDistance">
            <summary>
            A static container for identity method
            </summary>
        </member>
        <member name="T:WhetStone.Looping.editDistance.IEditStep`1">
            <summary>
            An interface for an edit step.
            </summary>
            <typeparam name="T">The type of the element the step affects.</typeparam>
        </member>
        <member name="M:WhetStone.Looping.editDistance.IEditStep`1.apply(System.Collections.Generic.IEnumerable{`0})">
            <summary>
            Get a new <see cref="T:System.Collections.Generic.IEnumerable`1"/> with the step applied to the original
            </summary>
            <param name="en">The enumerable to apply to.</param>
            <returns>A new enumerable with <paramref name="en"/>'s member except the step is applied to it.</returns>
        </member>
        <member name="M:WhetStone.Looping.editDistance.IEditStep`1.apply(System.Collections.Generic.IList{`0})">
            <summary>
            Mutates an <see cref="T:System.Collections.Generic.IList`1"/> to reflect the edit step.
            </summary>
            <param name="li">The <see cref="T:System.Collections.Generic.IList`1"/> to mutate.</param>
            <remarks>This will mutate <paramref name="li"/>.</remarks>
        </member>
        <member name="T:WhetStone.Looping.editDistance.Insert`1">
            <summary>
            Represents an element being added to an enumerable.
            </summary>
            <typeparam name="T">The type of the element to add.</typeparam>
        </member>
        <member name="M:WhetStone.Looping.editDistance.Insert`1.#ctor(`0,System.Int32)">
            <summary>
            Constructor.
            </summary>
            <param name="newVal">The element to add.</param>
            <param name="newInd">The index to add the element in.</param>
        </member>
        <member name="P:WhetStone.Looping.editDistance.Insert`1.newVal">
            <summary>
            The element that is added during the step.
            </summary>
        </member>
        <member name="P:WhetStone.Looping.editDistance.Insert`1.newInd">
            <summary>
            The destination index of the added element.
            </summary>
        </member>
        <member name="M:WhetStone.Looping.editDistance.Insert`1.apply(System.Collections.Generic.IEnumerable{`0})">
            <inheritdoc />
        </member>
        <member name="M:WhetStone.Looping.editDistance.Insert`1.apply(System.Collections.Generic.IList{`0})">
            <inheritdoc />
        </member>
        <member name="M:WhetStone.Looping.editDistance.Insert`1.ToString">
            <inheritdoc />
        </member>
        <member name="T:WhetStone.Looping.editDistance.Delete`1">
            <summary>
            Represents an element being removed from an enumerable.
            </summary>
            <typeparam name="T">The type of the element to remove.</typeparam>
        </member>
        <member name="M:WhetStone.Looping.editDistance.Delete`1.#ctor(System.Int32)">
            <summary>
            Constructor.
            </summary>
            <param name="deletedInd">The index of the element to remove.</param>
        </member>
        <member name="P:WhetStone.Looping.editDistance.Delete`1.deletedInd">
            <summary>
            The index of the element to remove.
            </summary>
        </member>
        <member name="M:WhetStone.Looping.editDistance.Delete`1.apply(System.Collections.Generic.IEnumerable{`0})">
            <inheritdoc />
        </member>
        <member name="M:WhetStone.Looping.editDistance.Delete`1.apply(System.Collections.Generic.IList{`0})">
            <inheritdoc />
        </member>
        <member name="M:WhetStone.Looping.editDistance.Delete`1.ToString">
            <inheritdoc />
        </member>
        <member name="T:WhetStone.Looping.editDistance.Substitute`1">
            <summary>
            Represents an element being replaced in an enumerable.
            </summary>
            <typeparam name="T">The type of the element to rep-lace.</typeparam>
        </member>
        <member name="M:WhetStone.Looping.editDistance.Substitute`1.#ctor(`0,System.Int32)">
            <summary>
            Constructor.
            </summary>
            <param name="newVal">The value to replace the element with.</param>
            <param name="ind">The index of the element to replace.</param>
        </member>
        <member name="P:WhetStone.Looping.editDistance.Substitute`1.newVal">
            <summary>
            The value to replace the element with.
            </summary>
        </member>
        <member name="P:WhetStone.Looping.editDistance.Substitute`1.ind">
            <summary>
            The index of the element to replace.
            </summary>
        </member>
        <member name="M:WhetStone.Looping.editDistance.Substitute`1.apply(System.Collections.Generic.IEnumerable{`0})">
            <inheritdoc />
        </member>
        <member name="M:WhetStone.Looping.editDistance.Substitute`1.apply(System.Collections.Generic.IList{`0})">
            <inheritdoc />
        </member>
        <member name="M:WhetStone.Looping.editDistance.Substitute`1.ToString">
            <inheritdoc />
        </member>
        <member name="M:WhetStone.Looping.editDistance.EditSteps``1(System.Collections.Generic.IEnumerable{``0},System.Collections.Generic.IEnumerable{``0},System.Collections.Generic.IEqualityComparer{``0},System.Boolean,System.Boolean,System.Boolean,System.Double,System.Double,System.Double)">
            <summary>
            Get the edit steps in the shortest edit path from <paramref name="this"/> to <paramref name="other"/>.
            </summary>
            <param name="this">The starting <see cref="T:System.Collections.Generic.IEnumerable`1"/>.</param>
            <param name="other">The destination <see cref="T:System.Collections.Generic.IEnumerable`1"/>.</param>
            <param name="comp">The <see cref="T:System.Collections.Generic.IEqualityComparer`1"/> to compare elements. Setting to <see langword="null"/>.</param>
            <param name="allowIns">Whether to allow insertions.</param>
            <param name="allowDel">Whether to allow deletions.</param>
            <param name="allowSub">Whether to allow substations.</param>
            <param name="insertWeight">weight of an insert step.</param>
            <param name="removeWeight">weight of a remove step.</param>
            <param name="subWeight">weight of a substitution step.</param>
            <typeparam name="T">The type of <paramref name="this"/> and <paramref name="other"/>'s elements.</typeparam>
            <returns>An enumerable with all the edit steps necessary to turn <paramref name="this"/> into <paramref name="other"/>.</returns>
            <exception cref="T:System.ArgumentException">If no edit paths are found.</exception>
            <exception cref="T:System.ArgumentException">If any of the weights are non-positive.</exception>
            <remarks>
            <para>Using dynamic programming, space and time complexity O(n^2).</para>
            <para>Because <paramref name="other"/> is enumerated so many times, it is recommended to be more efficient than <paramref name="this"/>, if possible.</para>
            </remarks>
        </member>
        <member name="M:WhetStone.Looping.editDistance.EditDistance``1(System.Collections.Generic.IEnumerable{``0},System.Collections.Generic.IEnumerable{``0},System.Collections.Generic.IEqualityComparer{``0},System.Boolean,System.Boolean,System.Boolean)">
            <summary>
            Gets the minimum number of edit steps to transform <paramref name="this"/> to <paramref name="other"/>.
            </summary>
            <typeparam name="T">The type of <paramref name="this"/> and <paramref name="other"/>'s elements.</typeparam>
            <param name="this">The starting <see cref="T:System.Collections.Generic.IEnumerable`1"/>.</param>
            <param name="other">The destination <see cref="T:System.Collections.Generic.IList`1"/>.</param>
            <param name="comp">The <see cref="T:System.Collections.Generic.IEqualityComparer`1"/> to compare elements. Setting to <see langword="null"/>.</param>
            <param name="allowIns">Whether to allow insertions.</param>
            <param name="allowDel">Whether to allow deletions.</param>
            <param name="allowSub">Whether to allow substations.</param>
            <returns>The number of steps in the minimum edit path from <paramref name="this"/> to <paramref name="other"/>.</returns>
            <remarks>
            <para>Using forgetful dynamic programming, time complexity O(n^2), space complexity O(n).</para>
            </remarks>
        </member>
        <member name="T:WhetStone.Looping.enum">
            <summary>
            A static container for identity method
            </summary>
        </member>
        <member name="M:WhetStone.Looping.enum.Enum``1">
            <summary>
            Generates all the enum members of a particular <see langword="enum"/>.
            </summary>
            <typeparam name="T">The enum type.</typeparam>
            <returns>All the enum members.</returns>
            <remarks>
            <para>Uses reflection to generate types.</para>
            <para>See <see cref="M:System.Enum.GetValues(System.Type)"/> to get the order of values</para>
            </remarks>
        </member>
        <member name="M:WhetStone.Looping.enum.EnumFlags``1">
            <summary>
            Generates all the enum members of a particular <see langword="enum"/>, filtering in only ones detected as distinct flags.
            </summary>
            <typeparam name="T">The enum type.</typeparam>
            <returns>All the enum members detected as flag members.</returns>
            <remarks>
            <para>Uses reflection to generate types.</para>
            <para>Detecting Flags is tricky, will only return members that are bitwise distinct from all of the previous ones. This means that the elements generated are dependent on the order they are generated.</para>
            </remarks>
            <example>
            <code>
            [Flags] enum Enum1 {a=1,b=2,c=3 };
            @enum.EnumFlags&lt;Enum1&gt;();// a,b
            </code>
            </example>
        </member>
        <member name="M:WhetStone.Looping.enum.EnumFlags``1(``0)">
            <summary>
            Generates all the enum members of a particular <see langword="enum"/>, filtering in only ones detected as distinct flags that <paramref name="filter"/> contains.
            </summary>
            <typeparam name="T">The type of the <see langword="enum"/>.</typeparam>
            <param name="filter">Filters the results to only ones it contains.</param>
            <returns>Only flag elements that are contained in <paramref name="filter"/>.</returns>
            <remarks>Uses dynamics (once per call).</remarks>
        </member>
        <member name="T:WhetStone.Looping.enumerate">
            <summary>
            A static container for identity method
            </summary>
        </member>
        <member name="M:WhetStone.Looping.enumerate.Enumerate``1(``0,System.Nullable{System.Int32})">
            <summary>
            Creates a new <see cref="T:System.Collections.Generic.IList`1"/>, including only <paramref name="b"/> as an element.
            </summary>
            <typeparam name="T">The type of the list to return</typeparam>
            <param name="b">The element to make the <see cref="T:System.Collections.Generic.IList`1"/> out of.</param>
            <param name="count">How many elements the <see cref="T:System.Collections.Generic.IList`1"/> should contain. <see langword="null"/> for an infinite list.</param>
            <returns>An <see cref="T:System.Collections.Generic.IList`1"/> that includes only <paramref name="b"/>, <paramref name="count"/> times.</returns>
        </member>
        <member name="T:WhetStone.Looping.enumerationHook">
            <summary>
            A static container for identity method
            </summary>
        </member>
        <member name="M:WhetStone.Looping.enumerationHook.EnumerationHook``1(System.Collections.Generic.IEnumerable{``0},System.Action{``0},System.Action{``0},System.Action,System.Action)">
            <overloads>Binds an action to an enumerable, to be executed upon enumeration.</overloads>
            <summary>
            Binds actions to an <see cref="T:System.Collections.Generic.IEnumerable`1"/>, causing the action to call whenever the <see cref="T:System.Collections.Generic.IEnumerable`1"/> is enumerated.
            </summary>
            <typeparam name="T">The type of the <see cref="T:System.Collections.Generic.IEnumerable`1"/>.</typeparam>
            <param name="this">The <see cref="T:System.Collections.Generic.IEnumerable`1"/> to hook to.</param>
            <param name="preYield">An <see cref="T:System.Action`1"/> to call before the element is returned to the enumeration caller.</param>
            <param name="postYield">An <see cref="T:System.Action`1"/> to call before the element is returned to the enumeration caller (if the next item is requested).</param>
            <param name="begin">An <see cref="T:System.Action"/> to call before any element is enumerated.</param>
            <param name="end">An <see cref="T:System.Action"/> to call after all elements are enumerated.</param>
            <returns>An enumerable with the same elements, but whenever enumerated, will trigger a hooked method.</returns>
            <example>
            Say you want to find the sum and count of an <see cref="T:System.Collections.Generic.IEnumerable`1"/> <c>val</c> while only enumerating it once.
            <code>
            int count = 0;
            int sum = val.EnumerationHook(a=>count++).Sum();
            </code>
            </example>
        </member>
        <member name="M:WhetStone.Looping.enumerationHook.EnumerationHook``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Boolean},System.Func{``0,System.Boolean})">
            <summary>
            Binds actions to an <see cref="T:System.Collections.Generic.IEnumerable`1"/>, causing the action to call whenever the <see cref="T:System.Collections.Generic.IEnumerable`1"/> is enumerated.
            </summary>
            <typeparam name="T">The type of the <see cref="T:System.Collections.Generic.IEnumerable`1"/>.</typeparam>
            <param name="this">The <see cref="T:System.Collections.Generic.IEnumerable`1"/> to hook to.</param>
            <param name="preYield">An <see cref="T:System.Action`1"/> to call before the element is returned to the enumeration caller. If the function returns <see langword="false"/>, it will not be called again (but the <see cref="T:System.Collections.Generic.IEnumerable`1"/> will still be enumerated).</param>
            <param name="postYield">An <see cref="T:System.Action`1"/> to call before the element is returned to the enumeration caller (if the next item is requested). If the function returns <see langword="false"/>, it will not be called again (but the <see cref="T:System.Collections.Generic.IEnumerable`1"/> will still be enumerated).</param>
            <returns>An enumerable with the same elements, but whenever enumerated, will trigger a hooked method.</returns>
        </member>
        <member name="T:WhetStone.Looping.generate">
            <summary>
            A static container for identity method
            </summary>
        </member>
        <member name="M:WhetStone.Looping.generate.Generate``1(System.Func{``0})">
            <summary>
            Get an infinite <see cref="T:System.Collections.Generic.IEnumerable`1"/> out of a generator function.
            </summary>
            <typeparam name="T">The type of the generated elements.</typeparam>
            <param name="gen">The generator that creates elements.</param>
            <returns>An <see cref="T:System.Collections.Generic.IEnumerable`1"/> whose members are generated on-the-fly with <paramref name="gen"/>.</returns>
        </member>
        <member name="T:WhetStone.Looping.chunk">
            <summary>
            A static container for identity method
            </summary>
        </member>
        <member name="M:WhetStone.Looping.chunk.Chunk``1(System.Collections.Generic.IEnumerable{``0},System.Int32)">
            <overloads>Groups adjacent elements together in a structure.</overloads>
            <summary>
            Transforms the list by grouping adjacent elements together into a single member.
            </summary>
            <typeparam name="T">The type of the <see cref="T:System.Collections.Generic.IEnumerable`1"/></typeparam>
            <param name="this">The <see cref="T:System.Collections.Generic.IEnumerable`1"/> to be chunked.</param>
            <param name="chunkSize">The size of every chunk.</param>
            <returns>A new <see cref="T:System.Collections.Generic.IEnumerable`1"/> of <see cref="T:System.Collections.Generic.IList`1"/>s, each of which contains <paramref name="chunkSize"/> elements.</returns>
            <remarks>If the elements don't evenly divide to <paramref name="chunkSize"/>, the last element of the return value will be shorter.</remarks>
        </member>
        <member name="M:WhetStone.Looping.chunk.Chunk``1(System.Collections.Generic.IList{``0},System.Int32)">
            <summary>
            Transforms the list by grouping adjacent elements together into a single member.
            </summary>
            <typeparam name="T">The type of the <see cref="T:System.Collections.Generic.IList`1"/></typeparam>
            <param name="this">The <see cref="T:System.Collections.Generic.IList`1"/> to be chunked.</param>
            <param name="chunkSize">The size of every chunk.</param>
            <returns>A new <see cref="T:System.Collections.Generic.IList`1"/> of <see cref="T:System.Collections.Generic.IList`1"/>s, each of which contains <paramref name="chunkSize"/> elements.</returns>
            <remarks>If the elements don't evenly divide to <paramref name="chunkSize"/>, the last element of the return value will be shorter.</remarks>
        </member>
        <member name="T:WhetStone.Looping.getBounds">
            <summary>
            A static container for identity method
            </summary>
        </member>
        <member name="M:WhetStone.Looping.getBounds.GetBounds(System.Array)">
            <summary>
            Get the boundaries for all dimensions of an <see cref="T:System.Array"/>.
            </summary>
            <param name="this">The <see cref="T:System.Array"/> to check.</param>
            <returns>A read-only list, each element represent the boundaries in the appropriate dimension.</returns>
        </member>
        <member name="T:WhetStone.Looping.getOrDefault">
            <summary>
            A static container for identity method
            </summary>
        </member>
        <member name="M:WhetStone.Looping.getOrDefault.GetOrDefault``2(System.Collections.Generic.IDictionary{``0,``1},``0,``1)">
            <summary>
            Get the value for a specific key in a <see cref="T:System.Collections.Generic.IDictionary`2"/>, or a default value if none exists.
            </summary>
            <typeparam name="K">The type of the key.</typeparam>
            <typeparam name="V">The type of the value.</typeparam>
            <param name="this">The <see cref="T:System.Collections.Generic.IDictionary`2"/> to look up on.</param>
            <param name="key">The key to look up.</param>
            <param name="defaultValue">The value to return if <paramref name="this"/> does not have one for <paramref name="key"/>.</param>
            <returns><paramref name="this"/>'s value for <paramref name="key"/>, or <paramref name="defaultValue"/> if None exists.</returns>
        </member>
        <member name="T:WhetStone.Looping.hookAggregate">
            <summary>
            A static container for identity method
            </summary>
        </member>
        <member name="M:WhetStone.Looping.hookAggregate.HookAggregate``2(System.Collections.Generic.IEnumerable{``0},WhetStone.Guard.IGuard{``1},System.Func{``0,``1,``1},``1)">
            <summary>
            Hooks an aggregate value to an <see cref="T:WhetStone.Guard.IGuard`1"/>, to be recalculated upon enumeration.
            </summary>
            <typeparam name="T">The type of the <see cref="T:System.Collections.Generic.IEnumerable`1"/></typeparam>
            <typeparam name="R">The type of the aggregated value.</typeparam>
            <param name="this">The <see cref="T:System.Collections.Generic.IEnumerable`1"/> to hook to.</param>
            <param name="sink">The <see cref="T:WhetStone.Guard.IGuard`1"/> to update with the aggregate value.</param>
            <param name="aggregator">The aggregator function.</param>
            <param name="seed">The initial seed for the aggregator function.</param>
            <returns>A new <see cref="T:System.Collections.Generic.IEnumerable`1"/> that, when enumerated, will also aggregate <paramref name="sink"/>'s value.</returns>
        </member>
        <member name="T:WhetStone.Looping.hookCount">
            <summary>
            A static container for identity method
            </summary>
        </member>
        <member name="M:WhetStone.Looping.hookCount.HookCount``1(System.Collections.Generic.IEnumerable{``0},WhetStone.Guard.IGuard{System.Int32},System.Func{``0,System.Boolean})">
            <summary>
            Hooks an <see cref="T:WhetStone.Guard.IGuard`1"/>'s value to an <see cref="T:System.Collections.Generic.IEnumerable`1"/>'s number of enumerated items that match a criteria.
            </summary>
            <typeparam name="T">The type of the <see cref="T:System.Collections.Generic.IEnumerable`1"/></typeparam>
            <param name="this">The <see cref="T:System.Collections.Generic.IEnumerable`1"/> to hook.</param>
            <param name="sink">The <see cref="T:WhetStone.Guard.IGuard`1"/> to update.</param>
            <param name="criteria">The criteria to check. Or <see langword="null"/> for all elements.</param>
            <returns>A new <see cref="T:System.Collections.Generic.IEnumerable`1"/> that updates <paramref name="sink"/>'s value when enumerated.</returns>
        </member>
        <member name="T:WhetStone.Looping.hookFirst">
            <summary>
            A static container for identity method
            </summary>
        </member>
        <member name="M:WhetStone.Looping.hookFirst.HookFirst``1(System.Collections.Generic.IEnumerable{``0},WhetStone.Guard.IGuard{System.Tuple{``0}})">
            <overloads>Hooks an <see cref="T:WhetStone.Guard.IGuard`1"/> to an <see cref="T:System.Collections.Generic.IEnumerable`1"/>'s first value.</overloads>
            <summary>
            Hooks an <see cref="T:WhetStone.Guard.IGuard`1"/> to an <see cref="T:System.Collections.Generic.IEnumerable`1"/>'s first value.
            </summary>
            <typeparam name="T">The type of the <see cref="T:System.Collections.Generic.IEnumerable`1"/></typeparam>
            <param name="this">The <see cref="T:System.Collections.Generic.IEnumerable`1"/> to hook to.</param>
            <param name="sink">The <see cref="T:WhetStone.Guard.IGuard`1"/> to update.</param>
            <returns>An <see cref="T:System.Collections.Generic.IEnumerable`1"/> that sets <paramref name="sink"/> to its first enumerated value.</returns>
            <remarks>If <paramref name="sink"/> contains <see langword="null"/>, a first value has not yet been set.</remarks>
        </member>
        <member name="M:WhetStone.Looping.hookFirst.HookFirst``1(System.Collections.Generic.IEnumerable{``0},WhetStone.Guard.IGuard{System.Tuple{``0}},System.Func{``0,System.Boolean})">
            <summary>
            Hooks an <see cref="T:WhetStone.Guard.IGuard`1"/> to an <see cref="T:System.Collections.Generic.IEnumerable`1"/>'s first value that matches a criteria.
            </summary>
            <typeparam name="T">The type of the <see cref="T:System.Collections.Generic.IEnumerable`1"/></typeparam>
            <param name="this">The <see cref="T:System.Collections.Generic.IEnumerable`1"/> to hook to.</param>
            <param name="sink">The <see cref="T:WhetStone.Guard.IGuard`1"/> to update.</param>
            <param name="critiria">The criteria that finds the first element</param>
            <returns>An <see cref="T:System.Collections.Generic.IEnumerable`1"/> that sets <paramref name="sink"/> to its first enumerated value that matches <paramref name="critiria"/>.</returns>
            <remarks>If <paramref name="sink"/> contains <see langword="null"/>, a first value has not yet been set.</remarks>
        </member>
        <member name="M:WhetStone.Looping.hookFirst.HookFirst``1(System.Collections.Generic.IEnumerable{``0},WhetStone.Guard.IGuard{``0})">
            <summary>
            Hooks an <see cref="T:WhetStone.Guard.IGuard`1"/> to an <see cref="T:System.Collections.Generic.IEnumerable`1"/>'s first value.
            </summary>
            <typeparam name="T">The type of the <see cref="T:System.Collections.Generic.IEnumerable`1"/></typeparam>
            <param name="this">The <see cref="T:System.Collections.Generic.IEnumerable`1"/> to hook to.</param>
            <param name="sink">The <see cref="T:WhetStone.Guard.IGuard`1"/> to update.</param>
            <returns>An <see cref="T:System.Collections.Generic.IEnumerable`1"/> that sets <paramref name="sink"/> to its first enumerated value.</returns>
        </member>
        <member name="M:WhetStone.Looping.hookFirst.HookFirst``1(System.Collections.Generic.IEnumerable{``0},WhetStone.Guard.IGuard{``0},System.Func{``0,System.Boolean})">
            <summary>
            Hooks an <see cref="T:WhetStone.Guard.IGuard`1"/> to an <see cref="T:System.Collections.Generic.IEnumerable`1"/>'s first value that matches a criteria.
            </summary>
            <typeparam name="T">The type of the <see cref="T:System.Collections.Generic.IEnumerable`1"/></typeparam>
            <param name="this">The <see cref="T:System.Collections.Generic.IEnumerable`1"/> to hook to.</param>
            <param name="sink">The <see cref="T:WhetStone.Guard.IGuard`1"/> to update.</param>
            <param name="critiria">The criteria that finds the first element</param>
            <returns>An <see cref="T:System.Collections.Generic.IEnumerable`1"/> that sets <paramref name="sink"/> to its first enumerated value that matches <paramref name="critiria"/>.</returns>
        </member>
        <member name="T:WhetStone.Looping.hookLast">
            <summary>
            A static container for identity method
            </summary>
        </member>
        <member name="M:WhetStone.Looping.hookLast.HookLast``1(System.Collections.Generic.IEnumerable{``0},WhetStone.Guard.IGuard{System.Tuple{``0}})">
            <overloads>Hooks an <see cref="T:WhetStone.Guard.IGuard`1"/> to an <see cref="T:System.Collections.Generic.IEnumerable`1"/>'s last value.</overloads>
            <summary>
            Hooks an <see cref="T:WhetStone.Guard.IGuard`1"/> to an <see cref="T:System.Collections.Generic.IEnumerable`1"/>'s last value.
            </summary>
            <typeparam name="T">The type of the <see cref="T:System.Collections.Generic.IEnumerable`1"/></typeparam>
            <param name="this">The <see cref="T:System.Collections.Generic.IEnumerable`1"/> to hook to.</param>
            <param name="sink">The <see cref="T:WhetStone.Guard.IGuard`1"/> to update.</param>
            <returns>An <see cref="T:System.Collections.Generic.IEnumerable`1"/> that sets <paramref name="sink"/> to its last enumerated value.</returns>
            <remarks>If <paramref name="sink"/> contains <see langword="null"/>, a last value has not yet been set.</remarks>
        </member>
        <member name="M:WhetStone.Looping.hookLast.HookLast``1(System.Collections.Generic.IEnumerable{``0},WhetStone.Guard.IGuard{System.Tuple{``0}},System.Func{``0,System.Boolean})">
            <summary>
            Hooks an <see cref="T:WhetStone.Guard.IGuard`1"/> to an <see cref="T:System.Collections.Generic.IEnumerable`1"/>'s last value that matches a criteria.
            </summary>
            <typeparam name="T">The type of the <see cref="T:System.Collections.Generic.IEnumerable`1"/></typeparam>
            <param name="this">The <see cref="T:System.Collections.Generic.IEnumerable`1"/> to hook to.</param>
            <param name="sink">The <see cref="T:WhetStone.Guard.IGuard`1"/> to update.</param>
            <param name="critiria">The criteria that finds the last element</param>
            <returns>An <see cref="T:System.Collections.Generic.IEnumerable`1"/> that sets <paramref name="sink"/> to its last enumerated value that matches <paramref name="critiria"/>.</returns>
            <remarks>If <paramref name="sink"/> contains <see langword="null"/>, a last value has not yet been set.</remarks>
        </member>
        <member name="M:WhetStone.Looping.hookLast.HookLast``1(System.Collections.Generic.IEnumerable{``0},WhetStone.Guard.IGuard{``0})">
            <overloads>Hooks an <see cref="T:WhetStone.Guard.IGuard`1"/> to an <see cref="T:System.Collections.Generic.IEnumerable`1"/>'s last value.</overloads>
            <summary>
            Hooks an <see cref="T:WhetStone.Guard.IGuard`1"/> to an <see cref="T:System.Collections.Generic.IEnumerable`1"/>'s last value.
            </summary>
            <typeparam name="T">The type of the <see cref="T:System.Collections.Generic.IEnumerable`1"/></typeparam>
            <param name="this">The <see cref="T:System.Collections.Generic.IEnumerable`1"/> to hook to.</param>
            <param name="sink">The <see cref="T:WhetStone.Guard.IGuard`1"/> to update.</param>
            <returns>An <see cref="T:System.Collections.Generic.IEnumerable`1"/> that sets <paramref name="sink"/> to its last enumerated value.</returns>
        </member>
        <member name="M:WhetStone.Looping.hookLast.HookLast``1(System.Collections.Generic.IEnumerable{``0},WhetStone.Guard.IGuard{``0},System.Func{``0,System.Boolean})">
            <summary>
            Hooks an <see cref="T:WhetStone.Guard.IGuard`1"/> to an <see cref="T:System.Collections.Generic.IEnumerable`1"/>'s last value that matches a criteria.
            </summary>
            <typeparam name="T">The type of the <see cref="T:System.Collections.Generic.IEnumerable`1"/></typeparam>
            <param name="this">The <see cref="T:System.Collections.Generic.IEnumerable`1"/> to hook to.</param>
            <param name="sink">The <see cref="T:WhetStone.Guard.IGuard`1"/> to update.</param>
            <param name="critiria">The criteria that finds the last element</param>
            <returns>An <see cref="T:System.Collections.Generic.IEnumerable`1"/> that sets <paramref name="sink"/> to its last enumerated value that matches <paramref name="critiria"/>.</returns>
        </member>
        <member name="T:WhetStone.Looping.indices">
            <summary>
            A static container for identity method
            </summary>
        </member>
        <member name="M:WhetStone.Looping.indices.Indices``1(System.Collections.Generic.IList{``0})">
            <overloads>Get all valid indices on the list</overloads>
            <summary>
            Get all possible indices on the <see cref="T:System.Collections.Generic.IList`1"/>.
            </summary>
            <typeparam name="T">The type of the <see cref="T:System.Collections.Generic.IList`1"/></typeparam>
            <param name="this">The <see cref="T:System.Collections.Generic.IList`1"/> to get indices of.</param>
            <returns>A read-only <see cref="T:System.Collections.Generic.IList`1"/> of all valid indices of <paramref name="this"/></returns>
        </member>
        <member name="M:WhetStone.Looping.indices.Indices(System.Array)">
            <summary>
            Get all coordinates of an <see cref="T:System.Array"/>.
            </summary>
            <param name="this">The <see cref="T:System.Array"/> to get all coordinates of.</param>
            <returns>a read-only <see cref="T:System.Collections.Generic.IList`1"/> of all valid coordinates of <paramref name="this"/></returns>
        </member>
        <member name="M:WhetStone.Looping.indices.Indices``1(``0[])">
            <summary>
            Get all indices of a 1D <see cref="T:System.Array"/>.
            </summary>
            <typeparam name="T">The type of the <see cref="T:System.Array"/></typeparam>
            <param name="this">The 1D <see cref="T:System.Array"/> to get all indices of.</param>
            <returns>a read-only <see cref="T:System.Collections.Generic.IList`1"/> of all valid indices of <paramref name="this"/></returns>
        </member>
        <member name="T:WhetStone.Looping.infinite">
            <summary>
            A static container for identity method
            </summary>
        </member>
        <member name="M:WhetStone.Looping.infinite.Infinite">
            <summary>
            Get an infinite <see cref="T:System.Collections.Generic.IList`1"/>
            </summary>
            <returns>A read-only <see cref="T:System.Collections.Generic.IList`1"/> of infinite size.</returns>
        </member>
        <member name="T:WhetStone.Looping.isSorted">
            <summary>
            A static container for identity method
            </summary>
        </member>
        <member name="M:WhetStone.Looping.isSorted.IsSorted``1(System.Collections.Generic.IEnumerable{``0},System.Collections.Generic.IComparer{``0},System.Boolean)">
            <summary>
            Get whether an <see cref="T:System.Collections.Generic.IEnumerable`1"/> is sorted.
            </summary>
            <typeparam name="T">The type of the <see cref="T:System.Collections.Generic.IEnumerable`1"/></typeparam>
            <param name="this">The <see cref="T:System.Collections.Generic.IEnumerable`1"/> to check.</param>
            <param name="comp">The <see cref="T:System.Collections.Generic.IComparer`1"/> to check with. <see langword="null"/> will use the default <see cref="T:System.Collections.Generic.Comparer`1"/></param>
            <param name="allowEquals">Whether to allow for equalities in the <see cref="T:System.Collections.Generic.IEnumerable`1"/></param>
            <returns>Whether <paramref name="this"/> is sorted according to <paramref name="comp"/>.</returns>
        </member>
        <member name="T:WhetStone.Looping.join">
            <summary>
            A static container for identity method
            </summary>
        </member>
        <member name="T:WhetStone.Looping.join.CartesianType">
            <summary>
            A type for Cartesian self-multiplication.
            </summary>
        </member>
        <member name="F:WhetStone.Looping.join.CartesianType.AllPairs">
            <summary>
            All combinations will be included.
            </summary>
            <remarks>
            As an example:{0,1,2}x{0,1,2} = (0,0),(0,1),(0,2),(1,0),(1,1),(1,2),(2,0),(2,1),(2,2)
            </remarks>
        </member>
        <member name="F:WhetStone.Looping.join.CartesianType.NoSymmatry">
            <summary>
            All combinations will be in descending order, in relation to the source index.
            </summary>
            <remarks>
            As an example:{0,1,2}x{0,1,2} = (0,0),(1,0),(1,1),(2,0),(2,1),(2,2)
            </remarks>
        </member>
        <member name="F:WhetStone.Looping.join.CartesianType.NoReflexive">
            <summary>
            All combinations that have the same element more than once will be omitted.
            </summary>
            <remarks>
            As an example:{0,1,2}x{0,1,2} = (0,1),(0,2),(1,0),(1,2),(2,0),(2,1)
            </remarks>
        </member>
        <member name="M:WhetStone.Looping.join.Join``1(System.Collections.Generic.IEnumerable{``0},WhetStone.Looping.join.CartesianType)">
            <overloads>Performs a Cartesian multiplication on enumerables.</overloads>
            <summary>
            Get the Cartesian multiple of an <see cref="T:System.Collections.Generic.IEnumerable`1"/> by itself.
            </summary>
            <typeparam name="T">The type of the <see cref="T:System.Collections.Generic.IEnumerable`1"/>.</typeparam>
            <param name="a">The <see cref="T:System.Collections.Generic.IEnumerable`1"/> to multiply.</param>
            <param name="t">The <see cref="T:WhetStone.Looping.join.CartesianType"/> of the multiplication.</param>
            <returns>A new <see cref="T:System.Collections.Generic.IEnumerable`1"/> with the Cartesian multiple of <paramref name="a"/> by itself.</returns>
        </member>
        <member name="M:WhetStone.Looping.join.Join``2(System.Collections.Generic.IEnumerable{``0},System.Collections.Generic.IEnumerable{``1})">
            <summary>
            Get the Cartesian multiple of two <see cref="T:System.Collections.Generic.IEnumerable`1"/>s.
            </summary>
            <typeparam name="T1">The type of the first <see cref="T:System.Collections.Generic.IEnumerable`1"/>.</typeparam>
            <typeparam name="T2">The type of the second <see cref="T:System.Collections.Generic.IEnumerable`1"/>.</typeparam>
            <param name="a">The first <see cref="T:System.Collections.Generic.IEnumerable`1"/>.</param>
            <param name="b">The second <see cref="T:System.Collections.Generic.IEnumerable`1"/>.</param>
            <returns>The Cartesian multiple of <paramref name="a"/> and <paramref name="b"/>.</returns>
        </member>
        <member name="M:WhetStone.Looping.join.Join``3(System.Collections.Generic.IEnumerable{``0},System.Collections.Generic.IEnumerable{``1},System.Collections.Generic.IEnumerable{``2})">
            <summary>
            Get the Cartesian multiple of two <see cref="T:System.Collections.Generic.IEnumerable`1"/>s.
            </summary>
            <typeparam name="T1">The type of the first <see cref="T:System.Collections.Generic.IEnumerable`1"/>.</typeparam>
            <typeparam name="T2">The type of the second <see cref="T:System.Collections.Generic.IEnumerable`1"/>.</typeparam>
            <typeparam name="T3">The type of the third <see cref="T:System.Collections.Generic.IEnumerable`1"/>.</typeparam>
            <param name="a">The first <see cref="T:System.Collections.Generic.IEnumerable`1"/>.</param>
            <param name="b">The second <see cref="T:System.Collections.Generic.IEnumerable`1"/>.</param>
            <param name="c">The third <see cref="T:System.Collections.Generic.IEnumerable`1"/></param>
            <returns>The Cartesian multiple of <paramref name="a"/>, <paramref name="b"/> and <paramref name="c"/>.</returns>
        </member>
        <member name="M:WhetStone.Looping.join.Join``1(System.Collections.Generic.IEnumerable{``0},System.Int32,WhetStone.Looping.join.CartesianType)">
            <summary>
            Get an <see cref="T:System.Collections.Generic.IEnumerable`1"/> multiplied by itself multiple times.
            </summary>
            <typeparam name="T">The type of the <see cref="T:System.Collections.Generic.IEnumerable`1"/>.</typeparam>
            <param name="this">The <see cref="T:System.Collections.Generic.IEnumerable`1"/> to exponentiate.</param>
            <param name="cartesLength">The exponential power.</param>
            <param name="t">The <see cref="T:WhetStone.Looping.join.CartesianType"/>.</param>
            <returns>The Cartesian exponential of <paramref name="this"/> by <paramref name="cartesLength"/>.</returns>
        </member>
        <member name="M:WhetStone.Looping.join.Join``1(System.Collections.Generic.IEnumerable{System.Collections.Generic.IEnumerable{``0}})">
            <summary>
            Get the Cartesian product of multiple <see cref="T:System.Collections.Generic.IEnumerable`1"/>s.
            </summary>
            <typeparam name="T">The type of the <see cref="T:System.Collections.Generic.IEnumerable`1"/>.</typeparam>
            <param name="this">The <see cref="T:System.Collections.Generic.IList`1"/> of <see cref="T:System.Collections.Generic.IEnumerable`1"/></param>
            <returns>The Cartesian product of <paramref name="this"/>.</returns>
        </member>
        <member name="M:WhetStone.Looping.join.Join``2(System.Collections.Generic.IList{``0},System.Collections.Generic.IList{``1})">
            <summary>
            Get the Cartesian multiple of two <see cref="T:System.Collections.Generic.IList`1"/>s.
            </summary>
            <typeparam name="T1">The type of the first <see cref="T:System.Collections.Generic.IList`1"/>.</typeparam>
            <typeparam name="T2">The type of the second <see cref="T:System.Collections.Generic.IList`1"/>.</typeparam>
            <param name="this">The first <see cref="T:System.Collections.Generic.IList`1"/>.</param>
            <param name="other">The second <see cref="T:System.Collections.Generic.IList`1"/>.</param>
            <returns>The Cartesian multiple of <paramref name="this"/> and <paramref name="other"/>.</returns>
        </member>
        <member name="M:WhetStone.Looping.join.Join``1(System.Collections.Generic.IList{System.Collections.Generic.IList{``0}})">
            <summary>
            Get the Cartesian product of multiple <see cref="T:System.Collections.Generic.IList`1"/>s.
            </summary>
            <typeparam name="T">The type of the <see cref="T:System.Collections.Generic.IList`1"/>.</typeparam>
            <param name="this">The <see cref="T:System.Collections.Generic.IList`1"/> of <see cref="T:System.Collections.Generic.IList`1"/></param>
            <returns>The Cartesian product of <paramref name="this"/>.</returns>
        </member>
        <member name="M:WhetStone.Looping.join.Join``1(System.Collections.Generic.IList{``0}[])">
            <summary>
            Get the Cartesian product of multiple <see cref="T:System.Collections.Generic.IList`1"/>s.
            </summary>
            <typeparam name="T">The type of the <see cref="T:System.Collections.Generic.IList`1"/>.</typeparam>
            <param name="this">The <see cref="T:System.Collections.Generic.IList`1"/> of <see cref="T:System.Collections.Generic.IList`1"/></param>
            <returns>The Cartesian product of <paramref name="this"/>.</returns>
        </member>
        <member name="M:WhetStone.Looping.join.Join``1(System.Collections.Generic.IList{``0},System.Int32,WhetStone.Looping.join.CartesianType)">
            <summary>
            Get an <see cref="T:System.Collections.Generic.IList`1"/> multiplied by itself multiple times.
            </summary>
            <typeparam name="T">The type of the <see cref="T:System.Collections.Generic.IList`1"/>.</typeparam>
            <param name="this">The <see cref="T:System.Collections.Generic.IList`1"/> to exponentiate.</param>
            <param name="length">The exponential power.</param>
            <param name="t">The <see cref="T:WhetStone.Looping.join.CartesianType"/>.</param>
            <returns>The Cartesian exponential of <paramref name="this"/> by <paramref name="length"/>.</returns>
        </member>
        <member name="M:WhetStone.Looping.join.Join``1(System.Collections.Generic.IList{``0},WhetStone.Looping.join.CartesianType)">
            <summary>
            Get the Cartesian multiple of an <see cref="T:System.Collections.Generic.IList`1"/> by itself.
            </summary>
            <typeparam name="T">The type of the <see cref="T:System.Collections.Generic.IList`1"/>.</typeparam>
            <param name="this">The <see cref="T:System.Collections.Generic.IList`1"/> to multiply.</param>
            <param name="t">The <see cref="T:WhetStone.Looping.join.CartesianType"/> of the multiplication.</param>
            <returns>A new <see cref="T:System.Collections.Generic.IList`1"/> with the Cartesian multiple of <paramref name="this"/> by itself.</returns>
        </member>
        <member name="T:WhetStone.Looping.longestCommonPrefix">
            <summary>
            A static container for identity method
            </summary>
        </member>
        <member name="M:WhetStone.Looping.longestCommonPrefix.LongestCommonPrefix``1(System.Collections.Generic.IEnumerable{System.Collections.Generic.IEnumerable{``0}})">
            <summary>
            Get the longest common prefix of an <see cref="T:System.Collections.Generic.IEnumerable`1"/> or <see cref="T:System.Collections.Generic.IEnumerable`1"/>.
            </summary>
            <typeparam name="T">The type of the <see cref="T:System.Collections.Generic.IEnumerable`1"/>s.</typeparam>
            <param name="this">The <see cref="T:System.Collections.Generic.IEnumerable`1"/>s to check.</param>
            <returns>The Longest common prefix shared by all of <paramref name="this"/>.</returns>
        </member>
        <member name="M:WhetStone.Looping.longestCommonPrefix.LongestCommonPrefix``1(System.Collections.Generic.IEnumerable{System.Collections.Generic.IEnumerable{``0}},System.Collections.Generic.IEqualityComparer{``0})">
            <summary>
            Get the longest common prefixes of an <see cref="T:System.Collections.Generic.IEnumerable`1"/> or <see cref="T:System.Collections.Generic.IEnumerable`1"/>.
            </summary>
            <typeparam name="T">The type of the <see cref="T:System.Collections.Generic.IEnumerable`1"/>s.</typeparam>
            <param name="this">The <see cref="T:System.Collections.Generic.IEnumerable`1"/>s to check.</param>
            <param name="comp">The <see cref="T:System.Collections.Generic.IEqualityComparer`1"/> to compare prefix elements. <see langword="null"/> for the default <see cref="T:System.Collections.Generic.IEqualityComparer`1"/>.</param>
            <returns>The Longest common prefixes shared by all of <paramref name="this"/> under <paramref name="comp"/>.</returns>
        </member>
        <member name="M:WhetStone.Looping.longestCommonPrefix.LongestCommonPrefix``1(System.Collections.Generic.IEnumerable{``0},System.Collections.Generic.IEnumerable{``0})">
            <summary>
            Get the longest common prefix of two <see cref="T:System.Collections.Generic.IEnumerable`1"/>s.
            </summary>
            <typeparam name="T">The elements of the <see cref="T:System.Collections.Generic.IEnumerable`1"/>s.</typeparam>
            <param name="this">The first <see cref="T:System.Collections.Generic.IEnumerable`1"/>.</param>
            <param name="other">The second <see cref="T:System.Collections.Generic.IEnumerable`1"/>.</param>
            <returns>The Longest common prefixes shared by <paramref name="this"/> and <paramref name="other"/>.</returns>
        </member>
        <member name="M:WhetStone.Looping.longestCommonPrefix.LongestCommonPrefix``1(System.Collections.Generic.IEnumerable{``0},System.Collections.Generic.IEnumerable{``0},System.Collections.Generic.IEqualityComparer{``0})">
            <summary>
            Get the longest common prefixes of two <see cref="T:System.Collections.Generic.IEnumerable`1"/>s.
            </summary>
            <typeparam name="T">The elements of the <see cref="T:System.Collections.Generic.IEnumerable`1"/>s.</typeparam>
            <param name="this">The first <see cref="T:System.Collections.Generic.IEnumerable`1"/>.</param>
            <param name="other">The second <see cref="T:System.Collections.Generic.IEnumerable`1"/>.</param>
            <param name="comp">The <see cref="T:System.Collections.Generic.IEqualityComparer`1"/> to compare prefix elements. <see langword="null"/> for the default <see cref="T:System.Collections.Generic.IEqualityComparer`1"/>.</param>
            <returns>The Longest common prefixes shared by <paramref name="this"/> and <paramref name="other"/> under <paramref name="comp"/>.</returns>
        </member>
        <member name="T:WhetStone.Looping.merge">
            <summary>
            A static container for identity method
            </summary>
        </member>
        <member name="M:WhetStone.Looping.merge.Merge``1(System.Collections.Generic.IEnumerable{System.Collections.Generic.IEnumerable{``0}},System.Collections.Generic.IComparer{``0})">
            <summary>
            Combines multiple sorted <see cref="T:System.Collections.Generic.IEnumerable`1"/>s to a single sorted <see cref="T:System.Collections.Generic.IEnumerable`1"/>.
            </summary>
            <typeparam name="T">The type of the <see cref="T:System.Collections.Generic.IEnumerable`1"/>s</typeparam>
            <param name="this">The <see cref="T:System.Collections.Generic.IEnumerable`1"/>s to combine.</param>
            <param name="chooser">The <see cref="T:System.Collections.Generic.IComparer`1"/> to sort the members. <see langword="null"/> means the default comparer will be used.</param>
            <returns>A new <see cref="T:System.Collections.Generic.IEnumerable`1"/> composed of <paramref name="this"/>'s members combined.</returns>
        </member>
        <member name="M:WhetStone.Looping.merge.Merge``1(System.Collections.Generic.IEnumerable{``0},System.Collections.Generic.IEnumerable{``0},System.Collections.Generic.IComparer{``0})">
            <summary>
            Combines two sorted <see cref="T:System.Collections.Generic.IEnumerable`1"/>s to a single sorted <see cref="T:System.Collections.Generic.IEnumerable`1"/>.
            </summary>
            <typeparam name="T">The type of the <see cref="T:System.Collections.Generic.IEnumerable`1"/>s</typeparam>
            <param name="this">The first <see cref="T:System.Collections.Generic.IEnumerable`1"/> to combine.</param>
            <param name="other">The second <see cref="T:System.Collections.Generic.IEnumerable`1"/> to combine.</param>
            <param name="chooser">The <see cref="T:System.Collections.Generic.IComparer`1"/> to sort the members. <see langword="null"/> means the default comparer will be used.</param>
            <returns></returns>
        </member>
        <member name="T:WhetStone.Looping.MultiCollection`1">
            <summary>
            A collection implemented by remembering the multiplicity of each element.
            </summary>
            <typeparam name="T"></typeparam>
        </member>
        <member name="M:WhetStone.Looping.MultiCollection`1.#ctor(System.Collections.Generic.IEqualityComparer{`0})">
            <summary>
            Constructor
            </summary>
            <param name="comp">An <see cref="T:System.Collections.Generic.IEqualityComparer`1"/> to group elements together.</param>
        </member>
        <member name="M:WhetStone.Looping.MultiCollection`1.GetEnumerator">
            <inheritdoc />
        </member>
        <member name="M:WhetStone.Looping.MultiCollection`1.Add(`0,System.Int32)">
            <summary>
            Add an item to the <see cref="T:System.Collections.Generic.ICollection`1"/>
            </summary>
            <param name="item">The item to add.</param>
            <param name="amount">How many of the item to add.</param>
        </member>
        <member name="M:WhetStone.Looping.MultiCollection`1.Add(`0)">
            <inheritdoc />
        </member>
        <member name="M:WhetStone.Looping.MultiCollection`1.Clear">
            <inheritdoc />
        </member>
        <member name="M:WhetStone.Looping.MultiCollection`1.Contains(`0)">
            <inheritdoc />
        </member>
        <member name="M:WhetStone.Looping.MultiCollection`1.CopyTo(`0[],System.Int32)">
            <inheritdoc />
        </member>
        <member name="M:WhetStone.Looping.MultiCollection`1.Remove(`0)">
            <inheritdoc />
        </member>
        <member name="M:WhetStone.Looping.MultiCollection`1.Remove(`0,System.Int32)">
            <summary>
            Removes a value from the collection.
            </summary>
            <param name="item">The item to remove.</param>
            <param name="amount">How many times to remove the item.</param>
            <returns>Whether the item existed in the first place.</returns>
        </member>
        <member name="P:WhetStone.Looping.MultiCollection`1.Count">
            <inheritdoc />
        </member>
        <member name="P:WhetStone.Looping.MultiCollection`1.IsReadOnly">
            <inheritdoc />
        </member>
        <member name="P:WhetStone.Looping.MultiCollection`1.Item(System.Int32)">
            <summary>
            Get an indexed element from the <see cref="T:System.Collections.Generic.ICollection`1"/>.
            </summary>
            <param name="ind">The index of the element.</param>
            <returns>The element at index <paramref name="ind"/>.</returns>
        </member>
        <member name="T:WhetStone.Looping.orderBy">
            <summary>
            A static container for identity method
            </summary>
        </member>
        <member name="M:WhetStone.Looping.orderBy.OrderBy``1(System.Collections.Generic.IEnumerable{``0},System.Collections.Generic.IComparer{``0})">
            <summary>
            Returns an <see cref="T:System.Linq.IOrderedEnumerable`1"/> from an <see cref="T:System.Collections.Generic.IEnumerable`1"/>.
            </summary>
            <typeparam name="T">The type of the <see cref="T:System.Collections.Generic.IEnumerable`1"/></typeparam>
            <param name="this">The elements to sort.</param>
            <param name="comp">The <see cref="T:System.Collections.Generic.IComparer`1"/> to sort the elements by.</param>
            <returns>A new <see cref="T:System.Collections.Generic.IEnumerable`1"/> with <paramref name="this"/>'s element's sorted.</returns>
        </member>
        <member name="M:WhetStone.Looping.orderBy.OrderByDescending``1(System.Collections.Generic.IEnumerable{``0},System.Collections.Generic.IComparer{``0})">
            <summary>
            Returns an <see cref="T:System.Linq.IOrderedEnumerable`1"/> in descending order from an <see cref="T:System.Collections.Generic.IEnumerable`1"/>.
            </summary>
            <typeparam name="T">The type of the <see cref="T:System.Collections.Generic.IEnumerable`1"/></typeparam>
            <param name="this">The elements to sort in descending order.</param>
            <param name="comp">The <see cref="T:System.Collections.Generic.IComparer`1"/> to sort the elements by.</param>
            <returns>A new <see cref="T:System.Collections.Generic.IEnumerable`1"/> with <paramref name="this"/>'s element's sorted in descending order.</returns>
        </member>
        <member name="T:WhetStone.Looping.partialProducts">
            <summary>
            A static container for identity method
            </summary>
        </member>
        <member name="M:WhetStone.Looping.partialProducts.PartialProducts``1(System.Collections.Generic.IEnumerable{``0})">
            <summary>
            Get the partial products of an <see cref="T:System.Collections.Generic.IEnumerable`1"/>.
            </summary>
            <typeparam name="T">The type of the <see cref="T:System.Collections.Generic.IEnumerable`1"/>.</typeparam>
            <param name="this">The <see cref="T:System.Collections.Generic.IEnumerable`1"/> to multiply.</param>
            <returns>All the partial products of <paramref name="this"/>.</returns>
            <remarks>
            <para>Uses fielding to multiply. Use <see cref="M:WhetStone.Looping.yieldAggregate.YieldAggregate``2(System.Collections.Generic.IEnumerable{``0},System.Func{``0,``1,``1},``1)"/> for non-fielding version.</para>
            <para>Because it starts with a 1, Has 1 more element than <paramref name="this"/>.</para>
            </remarks>
        </member>
        <member name="T:WhetStone.Looping.partialSums">
            <summary>
            A static container for identity method
            </summary>
        </member>
        <member name="M:WhetStone.Looping.partialSums.PartialSums``1(System.Collections.Generic.IEnumerable{``0})">
            <summary>
            Get the partial sum of an <see cref="T:System.Collections.Generic.IEnumerable`1"/>.
            </summary>
            <typeparam name="T">The type of the <see cref="T:System.Collections.Generic.IEnumerable`1"/>.</typeparam>
            <param name="this">The <see cref="T:System.Collections.Generic.IEnumerable`1"/> to add.</param>
            <returns>All the partial sums of <paramref name="this"/>.</returns>
            <remarks>
            <para>Uses fielding to add. Use <see cref="M:WhetStone.Looping.yieldAggregate.YieldAggregate``2(System.Collections.Generic.IEnumerable{``0},System.Func{``0,``1,``1},``1)"/> for non-fielding version.</para>
            <para>Because it starts with a 0, Has 1 more element than <paramref name="this"/>.</para>
            </remarks>
        </member>
        <member name="M:WhetStone.Looping.partialSums.PartialCompensatingSums``1(System.Collections.Generic.IEnumerable{``0})">
            <summary>
            Get the partial sums of an <see cref="T:System.Collections.Generic.IEnumerable`1"/> while compensating for floating-point errors.
            </summary>
            <typeparam name="T">The type of the <see cref="T:System.Collections.Generic.IEnumerable`1"/>.</typeparam>
            <param name="this">The <see cref="T:System.Collections.Generic.IEnumerable`1"/> to add.</param>
            <returns>All the partial compensating sums of <paramref name="this"/>.</returns>
            <remarks>
            <para>Uses fielding to add.</para>
            <para>Because it starts with a 0, Has 1 more element than <paramref name="this"/>.</para>
            </remarks>
        </member>
        <member name="M:WhetStone.Looping.partialSums.PartialCompensatingSums(System.Collections.Generic.IEnumerable{System.Double})">
            <summary>
            Get the partial sums of an <see cref="T:System.Collections.Generic.IEnumerable`1"/> of doubles while compensating for floating-point errors.
            </summary>
            <param name="this">The <see cref="T:System.Collections.Generic.IEnumerable`1"/> of doubles to add.</param>
            <returns>All the partial compensating sums of <paramref name="this"/>.</returns>
            <remarks>
            <para>Because it starts with a 0.0, Has 1 more element than <paramref name="this"/>.</para>
            </remarks>
        </member>
        <member name="T:WhetStone.Looping.positionBind">
            <summary>
            A static container for identity method
            </summary>
        </member>
        <member name="T:WhetStone.Looping.positionBind.Position">
            <summary>
            A position in an <see cref="T:System.Collections.Generic.IEnumerable`1"/>.
            </summary>
        </member>
        <member name="F:WhetStone.Looping.positionBind.Position.None">
            <summary>
            All positions have this flag
            </summary>
        </member>
        <member name="F:WhetStone.Looping.positionBind.Position.First">
            <summary>
            The first position.
            </summary>
        </member>
        <member name="F:WhetStone.Looping.positionBind.Position.Last">
            <summary>
            The first position.
            </summary>
        </member>
        <member name="F:WhetStone.Looping.positionBind.Position.Only">
            <summary>
            Position in an <see cref="T:System.Collections.Generic.IEnumerable`1"/> of size 1.
            </summary>
        </member>
        <member name="M:WhetStone.Looping.positionBind.PositionBind``1(System.Collections.Generic.IEnumerable{``0})">
            <overloads>Attaches positions to elements of enumerables.</overloads>
            <summary>
            Attaches positions to elements of an <see cref="T:System.Collections.Generic.IEnumerable`1"/>.
            </summary>
            <typeparam name="T">The type of the <see cref="T:System.Collections.Generic.IEnumerable`1"/></typeparam>
            <param name="this">The <see cref="T:System.Collections.Generic.IEnumerable`1"/> to attach to.</param>
            <returns>An <see cref="T:System.Collections.Generic.IEnumerable`1"/> of <see cref="T:System.Tuple`2"/>, the second element of which is the positions.</returns>
        </member>
        <member name="M:WhetStone.Looping.positionBind.PositionBind``1(System.Collections.Generic.IList{``0})">
            <overloads>Attaches positions to elements of enumerables.</overloads>
            <summary>
            Attaches positions to elements of an <see cref="T:System.Collections.Generic.IList`1"/>.
            </summary>
            <typeparam name="T">The type of the <see cref="T:System.Collections.Generic.IList`1"/></typeparam>
            <param name="this">The <see cref="T:System.Collections.Generic.IList`1"/> to attach to.</param>
            <returns>An <see cref="T:System.Collections.Generic.IList`1"/> of <see cref="T:System.Tuple`2"/>, the second element of which is the positions.</returns>
        </member>
        <member name="T:WhetStone.Looping.range">
            <summary>
            A static container for identity method
            </summary>
        </member>
        <member name="M:WhetStone.Looping.range.Range``1(``0,``0,``0)">
            <summary>
            Get an <see cref="T:System.Collections.Generic.IList`1"/> of an arithmetic series. 
            </summary>
            <typeparam name="T">The type of the elements.</typeparam>
            <param name="start">The first element of the returned value.</param>
            <param name="max">The maximum value of the elements. Exclusive.</param>
            <param name="step">The difference between consecutive elements.</param>
            <returns>A read-only <see cref="T:System.Collections.Generic.IList`1"/> with elements from <paramref name="start"/> to <paramref name="max"/> in steps of <paramref name="step"/>.</returns>
            <remarks>uses fielding.</remarks>
        </member>
        <member name="M:WhetStone.Looping.range.Range``1(``0,``0)">
            <summary>
            Get an <see cref="T:System.Collections.Generic.IList`1"/> of an arithmetic series. 
            </summary>
            <typeparam name="T">The type of the elements.</typeparam>
            <param name="start">The first element of the returned value.</param>
            <param name="max">The maximum value of the elements. Exclusive.</param>
            <returns>A read-only <see cref="T:System.Collections.Generic.IList`1"/> with elements from <paramref name="start"/> to <paramref name="max"/> in steps of one.</returns>
            <remarks>uses fielding.</remarks>
        </member>
        <member name="M:WhetStone.Looping.range.Range``1(``0)">
            <summary>
            Get an <see cref="T:System.Collections.Generic.IList`1"/> of an arithmetic series. 
            </summary>
            <typeparam name="T">The type of the elements.</typeparam>
            <param name="max">The maximum value of the elements. Exclusive.</param>
            <returns>A read-only <see cref="T:System.Collections.Generic.IList`1"/> with elements from zero to <paramref name="max"/> in steps of one.</returns>
            <remarks>uses fielding.</remarks>
        </member>
        <member name="M:WhetStone.Looping.range.Range(System.Int32,System.Int32)">
            <summary>
            Get an <see cref="T:System.Collections.Generic.IList`1"/> of an arithmetic series of <see cref="T:System.Int32"/>s. 
            </summary>
            <param name="start">The first element of the returned value.</param>
            <param name="max">The maximum value of the elements. Exclusive.</param>
            <returns>A read-only <see cref="T:System.Collections.Generic.IList`1"/> with elements from <paramref name="start"/> to <paramref name="max"/> in steps of 1.</returns>
        </member>
        <member name="M:WhetStone.Looping.range.Range(System.Int32,System.Int32,System.Int32)">
            <summary>
            Get an <see cref="T:System.Collections.Generic.IList`1"/> of an arithmetic series of <see cref="T:System.Int32"/>s. 
            </summary>
            <param name="start">The first element of the returned value.</param>
            <param name="max">The maximum value of the elements. Exclusive.</param>
            <param name="step">The difference between consecutive elements.</param>
            <returns>A read-only <see cref="T:System.Collections.Generic.IList`1"/> with elements from <paramref name="start"/> to <paramref name="max"/> in steps of <paramref name="step"/>.</returns>
        </member>
        <member name="M:WhetStone.Looping.range.Range(System.Int32)">
            <summary>
            Get an <see cref="T:System.Collections.Generic.IList`1"/> of an arithmetic series of <see cref="T:System.Int32"/>s. 
            </summary>
            <param name="max">The maximum value of the elements. Exclusive.</param>
            <returns>A read-only <see cref="T:System.Collections.Generic.IList`1"/> with elements from 0 to <paramref name="max"/> in steps of 1.</returns>
        </member>
        <member name="M:WhetStone.Looping.range.IRange``1(``0,``0,``0)">
            <summary>
            Get an <see cref="T:System.Collections.Generic.IList`1"/> of an arithmetic series. 
            </summary>
            <typeparam name="T">The type of the elements.</typeparam>
            <param name="start">The first element of the returned value.</param>
            <param name="max">The maximum value of the elements. Inclusive.</param>
            <param name="step">The difference between consecutive elements.</param>
            <returns>A read-only <see cref="T:System.Collections.Generic.IList`1"/> with elements from <paramref name="start"/> to <paramref name="max"/> in steps of <paramref name="step"/>.</returns>
            <remarks>uses fielding.</remarks>
        </member>
        <member name="M:WhetStone.Looping.range.IRange``1(``0,``0)">
            <summary>
            Get an <see cref="T:System.Collections.Generic.IList`1"/> of an arithmetic series. 
            </summary>
            <typeparam name="T">The type of the elements.</typeparam>
            <param name="start">The first element of the returned value.</param>
            <param name="max">The maximum value of the elements. Inclusive.</param>
            <returns>A read-only <see cref="T:System.Collections.Generic.IList`1"/> with elements from <paramref name="start"/> to <paramref name="max"/> in steps of one.</returns>
            <remarks>uses fielding.</remarks>
        </member>
        <member name="M:WhetStone.Looping.range.IRange``1(``0)">
            <summary>
            Get an <see cref="T:System.Collections.Generic.IList`1"/> of an arithmetic series. 
            </summary>
            <typeparam name="T">The type of the elements.</typeparam>
            <param name="max">The maximum value of the elements. Inclusive.</param>
            <returns>A read-only <see cref="T:System.Collections.Generic.IList`1"/> with elements from zero to <paramref name="max"/> in steps of one.</returns>
            <remarks>uses fielding.</remarks>
        </member>
        <member name="M:WhetStone.Looping.range.IRange(System.Int32,System.Int32)">
            <summary>
            Get an <see cref="T:System.Collections.Generic.IList`1"/> of an arithmetic series of <see cref="T:System.Int32"/>s. 
            </summary>
            <param name="start">The first element of the returned value.</param>
            <param name="max">The maximum value of the elements. Inclusive.</param>
            <returns>A read-only <see cref="T:System.Collections.Generic.IList`1"/> with elements from <paramref name="start"/> to <paramref name="max"/> in steps of 1.</returns>
        </member>
        <member name="M:WhetStone.Looping.range.IRange(System.Int32,System.Int32,System.Int32)">
            <summary>
            Get an <see cref="T:System.Collections.Generic.IList`1"/> of an arithmetic series of <see cref="T:System.Int32"/>s. 
            </summary>
            <param name="start">The first element of the returned value.</param>
            <param name="max">The maximum value of the elements. Inclusive.</param>
            <param name="step">The difference between consecutive elements.</param>
            <returns>A read-only <see cref="T:System.Collections.Generic.IList`1"/> with elements from <paramref name="start"/> to <paramref name="max"/> in steps of <paramref name="step"/>.</returns>
        </member>
        <member name="M:WhetStone.Looping.range.IRange(System.Int32)">
            <summary>
            Get an <see cref="T:System.Collections.Generic.IList`1"/> of an arithmetic series of <see cref="T:System.Int32"/>s. 
            </summary>
            <param name="max">The maximum value of the elements. Inclusive.</param>
            <returns>A read-only <see cref="T:System.Collections.Generic.IList`1"/> with elements from 0 to <paramref name="max"/> in steps of 1.</returns>
        </member>
        <member name="M:WhetStone.Looping.range.RRange``1(``0,``0,``0)">
            <summary>
            Get an <see cref="T:System.Collections.Generic.IList`1"/> of a descending arithmetic series. 
            </summary>
            <typeparam name="T">The type of the elements.</typeparam>
            <param name="start">The first element of the returned value.</param>
            <param name="max">The maximum value of the elements. Exclusive.</param>
            <param name="step">The difference between consecutive elements.</param>
            <returns>A read-only <see cref="T:System.Collections.Generic.IList`1"/> with elements from <paramref name="start"/> to <paramref name="max"/> in steps of <paramref name="step"/>.</returns>
            <remarks>uses fielding.</remarks>
        </member>
        <member name="M:WhetStone.Looping.range.RRange``1(``0,``0)">
            <summary>
            Get an <see cref="T:System.Collections.Generic.IList`1"/> of a descending arithmetic series. 
            </summary>
            <typeparam name="T">The type of the elements.</typeparam>
            <param name="start">The first element of the returned value.</param>
            <param name="max">The maximum value of the elements. Exclusive.</param>
            <returns>A read-only <see cref="T:System.Collections.Generic.IList`1"/> with elements from <paramref name="start"/> to <paramref name="max"/> in steps of one.</returns>
            <remarks>uses fielding.</remarks>
        </member>
        <member name="M:WhetStone.Looping.range.RRange(System.Int32,System.Int32)">
            <summary>
            Get an <see cref="T:System.Collections.Generic.IList`1"/> of a descending arithmetic series of <see cref="T:System.Int32"/>s. 
            </summary>
            <param name="start">The first element of the returned value.</param>
            <param name="max">The maximum value of the elements. Exclusive.</param>
            <returns>A read-only <see cref="T:System.Collections.Generic.IList`1"/> with elements from <paramref name="start"/> to <paramref name="max"/> in steps of 1.</returns>
        </member>
        <member name="M:WhetStone.Looping.range.RRange(System.Int32,System.Int32,System.Int32)">
            <summary>
            Get an <see cref="T:System.Collections.Generic.IList`1"/> of a descending arithmetic series of <see cref="T:System.Int32"/>s. 
            </summary>
            <param name="start">The first element of the returned value.</param>
            <param name="max">The maximum value of the elements. Exclusive.</param>
            <param name="step">The difference between consecutive elements.</param>
            <returns>A read-only <see cref="T:System.Collections.Generic.IList`1"/> with elements from <paramref name="start"/> to <paramref name="max"/> in steps of <paramref name="step"/>.</returns>
        </member>
        <member name="M:WhetStone.Looping.range.RIRange``1(``0,``0,``0)">
            <summary>
            Get an <see cref="T:System.Collections.Generic.IList`1"/> of a descending arithmetic series. 
            </summary>
            <typeparam name="T">The type of the elements.</typeparam>
            <param name="start">The first element of the returned value.</param>
            <param name="max">The maximum value of the elements. Inclusive.</param>
            <param name="step">The difference between consecutive elements.</param>
            <returns>A read-only <see cref="T:System.Collections.Generic.IList`1"/> with elements from <paramref name="start"/> to <paramref name="max"/> in steps of <paramref name="step"/>.</returns>
            <remarks>uses fielding.</remarks>
        </member>
        <member name="M:WhetStone.Looping.range.RIRange``1(``0,``0)">
            <summary>
            Get an <see cref="T:System.Collections.Generic.IList`1"/> of a descending arithmetic series. 
            </summary>
            <typeparam name="T">The type of the elements.</typeparam>
            <param name="start">The first element of the returned value.</param>
            <param name="max">The maximum value of the elements. Inclusive.</param>
            <returns>A read-only <see cref="T:System.Collections.Generic.IList`1"/> with elements from <paramref name="start"/> to <paramref name="max"/> in steps of one.</returns>
            <remarks>uses fielding.</remarks>
        </member>
        <member name="M:WhetStone.Looping.range.RIRange(System.Int32,System.Int32)">
            <summary>
            Get an <see cref="T:System.Collections.Generic.IList`1"/> of a descending arithmetic series of <see cref="T:System.Int32"/>s. 
            </summary>
            <param name="start">The first element of the returned value.</param>
            <param name="max">The maximum value of the elements. Inclusive.</param>
            <returns>A read-only <see cref="T:System.Collections.Generic.IList`1"/> with elements from <paramref name="start"/> to <paramref name="max"/> in steps of 1.</returns>
        </member>
        <member name="M:WhetStone.Looping.range.RIRange(System.Int32,System.Int32,System.Int32)">
            <summary>
            Get an <see cref="T:System.Collections.Generic.IList`1"/> of a descending arithmetic series of <see cref="T:System.Int32"/>s. 
            </summary>
            <param name="start">The first element of the returned value.</param>
            <param name="max">The maximum value of the elements. Inclusive.</param>
            <param name="step">The difference between consecutive elements.</param>
            <returns>A read-only <see cref="T:System.Collections.Generic.IList`1"/> with elements from <paramref name="start"/> to <paramref name="max"/> in steps of <paramref name="step"/>.</returns>
        </member>
        <member name="T:WhetStone.Looping.reverse">
            <summary>
            A static container for identity method
            </summary>
        </member>
        <member name="M:WhetStone.Looping.reverse.Reverse``1(System.Collections.Generic.IList{``0})">
            <summary>
            Get a reversed version of an <see cref="T:System.Collections.Generic.IList`1"/>.
            </summary>
            <typeparam name="T">The type of the <see cref="T:System.Collections.Generic.IList`1"/>.</typeparam>
            <param name="this">The <see cref="T:System.Collections.Generic.IList`1"/> to reverse.</param>
            <returns>A mutability-passing <see cref="T:System.Collections.Generic.IList`1"/> that includes <paramref name="this"/>'s elements in reverse order.</returns>
        </member>
        <member name="T:WhetStone.Looping.searchForSub">
            <summary>
            A static container for identity method
            </summary>
        </member>
        <member name="M:WhetStone.Looping.searchForSub.SearchForSub``1(System.Collections.Generic.IEnumerable{``0},System.Collections.Generic.IEnumerable{``0},System.Collections.Generic.IEqualityComparer{System.Collections.Generic.IEnumerable{``0}},System.Collections.Generic.IEqualityComparer{``0})">
            <summary>
            search for sub-enumerables in <paramref name="this"/> that are equal to <paramref name="target"/>.
            </summary>
            <typeparam name="T">The type of <paramref name="this"/>.</typeparam>
            <param name="this">The <see cref="T:System.Collections.Generic.IEnumerable`1"/> to count from.</param>
            <param name="target">The sub-enumerables, whose appearances in <paramref name="this"/> are to be counted.</param>
            <param name="comp">The <see cref="T:System.Collections.Generic.IEqualityComparer`1"/> to use to equate <paramref name="this"/>'s sub-enumerables to <paramref name="target"/>.</param>
            <param name="innerComp">If <paramref name="comp"/> is null, a new <see cref="T:System.Collections.Generic.IEqualityComparer`1"/> for sub-enumerables is created with this <see cref="T:System.Collections.Generic.IEqualityComparer`1"/> as its inner. <see langword="null"/> for default.</param>
            <returns>The indices and values of sub-enumerables in <paramref name="this"/> that are equal to <paramref name="target"/> by <paramref name="comp"/>.</returns>
        </member>
        <member name="M:WhetStone.Looping.searchForSub.SearchForSub``1(System.Collections.Generic.IList{``0},System.Collections.Generic.IList{``0},System.Collections.Generic.IEqualityComparer{System.Collections.Generic.IList{``0}},System.Collections.Generic.IEqualityComparer{``0})">
            <summary>
            search for sub-lists in <paramref name="this"/> that are equal to <paramref name="target"/>.
            </summary>
            <typeparam name="T">The type of <paramref name="this"/>.</typeparam>
            <param name="this">The <see cref="T:System.Collections.Generic.IEnumerable`1"/> to count from.</param>
            <param name="target">The sub-enumerables, whose appearances in <paramref name="this"/> are to be counted.</param>
            <param name="comp">The <see cref="T:System.Collections.Generic.IEqualityComparer`1"/> to use to equate <paramref name="this"/>'s sub-lists to <paramref name="target"/>.</param>
            <param name="innerComp">If <paramref name="comp"/> is null, a new <see cref="T:System.Collections.Generic.IEqualityComparer`1"/> for sub-enumerables is created with this <see cref="T:System.Collections.Generic.IEqualityComparer`1"/> as its inner. <see langword="null"/> for default.</param>
            <returns>The indices and values of sub-lists in <paramref name="this"/> that are equal to <paramref name="target"/> by <paramref name="comp"/>.</returns>
        </member>
        <member name="T:WhetStone.Looping.select">
            <summary>
            A static container for identity method
            </summary>
        </member>
        <member name="M:WhetStone.Looping.select.Select``2(System.Collections.Generic.IList{``0},System.Func{``0,``1})">
            <overloads>Get a 1-1 mapping of enumerables.</overloads>
            <summary>
            Get a 1-1 mapping of an <see cref="T:System.Collections.Generic.IList`1"/>.
            </summary>
            <typeparam name="T">The type of the original <see cref="T:System.Collections.Generic.IList`1"/>.</typeparam>
            <typeparam name="R">The type of the returned <see cref="T:System.Collections.Generic.IList`1"/>.</typeparam>
            <param name="this">The <see cref="T:System.Collections.Generic.IList`1"/> to map.</param>
            <param name="selector">The mapping function.</param>
            <returns>A read-only <see cref="T:System.Collections.Generic.IList`1"/> with <paramref name="selector"/> applied on <paramref name="this"/>'s elements.</returns>
        </member>
        <member name="M:WhetStone.Looping.select.Select``2(System.Collections.Generic.IList{``0},System.Func{``0,``1},System.Func{``1,``0})">
            <summary>
            Get a 1-1 invertible mapping of an <see cref="T:System.Collections.Generic.IList`1"/>.
            </summary>
            <typeparam name="T">The type of the original <see cref="T:System.Collections.Generic.IList`1"/>.</typeparam>
            <typeparam name="R">The type of the returned <see cref="T:System.Collections.Generic.IList`1"/>.</typeparam>
            <param name="this">The <see cref="T:System.Collections.Generic.IList`1"/> to map.</param>
            <param name="selector">The mapping function.</param>
            <param name="inverse">The inverse of <paramref name="selector"/>.</param>
            <returns>A mutability passing <see cref="T:System.Collections.Generic.IList`1"/> with <paramref name="selector"/> applied on <paramref name="this"/>'s elements.</returns>
            <remarks>Alongside allowing mutating <paramref name="this"/>, the return value can optimize some methods:
            <example>
            <code>
            var arr = range.IRange(-850,5000,9) //immutable, but searching is an O(1) operation.
            var range+1 = arr.Select(a=>a+1,b=>b-1)
            negPrimes.Contains(-53) //will perform O(1) operation, searching for -54 in an IRange.
            </code>
            </example>
            </remarks>
        </member>
        <member name="M:WhetStone.Looping.select.Select``2(System.Collections.Generic.ICollection{``0},System.Func{``0,``1})">
            <overloads>Get a 1-1 mapping of enumerables.</overloads>
            <summary>
            Get a 1-1 mapping of an <see cref="T:System.Collections.Generic.ICollection`1"/>.
            </summary>
            <typeparam name="T">The type of the original <see cref="T:System.Collections.Generic.ICollection`1"/>.</typeparam>
            <typeparam name="R">The type of the returned <see cref="T:System.Collections.Generic.ICollection`1"/>.</typeparam>
            <param name="this">The <see cref="T:System.Collections.Generic.ICollection`1"/> to map.</param>
            <param name="selector">The mapping function.</param>
            <returns>A read-only <see cref="T:System.Collections.Generic.ICollection`1"/> with <paramref name="selector"/> applied on <paramref name="this"/>'s elements.</returns>
        </member>
        <member name="M:WhetStone.Looping.select.Select``2(System.Collections.Generic.ICollection{``0},System.Func{``0,``1},System.Func{``1,``0})">
            <summary>
            Get a 1-1 invertible mapping of an <see cref="T:System.Collections.Generic.ICollection`1"/>.
            </summary>
            <typeparam name="T">The type of the original <see cref="T:System.Collections.Generic.ICollection`1"/>.</typeparam>
            <typeparam name="R">The type of the returned <see cref="T:System.Collections.Generic.ICollection`1"/>.</typeparam>
            <param name="this">The <see cref="T:System.Collections.Generic.ICollection`1"/> to map.</param>
            <param name="selector">The mapping function.</param>
            <param name="inverse">The inverse of <paramref name="selector"/>.</param>
            <returns>A mutability passing <see cref="T:System.Collections.Generic.ICollection`1"/> with <paramref name="selector"/> applied on <paramref name="this"/>'s elements.</returns>
            <remarks>Alongside allowing mutating <paramref name="this"/>, the return value can optimize some methods:
            <example>
            <code>
            var arr = range.IRange(-850,5000,9) //immutable, but searching is an O(1) operation.
            var range+1 = arr.Select(a=>a+1,b=>b-1)
            negPrimes.Contains(-53) //will perform O(1) operation, searching for -54 in an IRange.
            </code>
            </example>
            </remarks>
        </member>
        <member name="M:WhetStone.Looping.select.Select``3(System.Collections.Generic.IDictionary{``0,``1},System.Func{``1,``2})">
            <summary>
            Get a 1-1 mapping of an <see cref="T:System.Collections.Generic.IDictionary`2"/>, mapping only the values of the <see cref="T:System.Collections.Generic.KeyValuePair`2"/>.'s
            </summary>
            <typeparam name="T">The key type.</typeparam>
            <typeparam name="R0">The original value type.</typeparam>
            <typeparam name="R1">The new value type.</typeparam>
            <param name="this">The <see cref="T:System.Collections.Generic.IDictionary`2"/> to map.</param>
            <param name="selector">The value selector.</param>
            <returns>A read-only <see cref="T:System.Collections.Generic.IDictionary`2"/> with <paramref name="selector"/> applied on <paramref name="this"/>'s values.</returns>
        </member>
        <member name="M:WhetStone.Looping.select.Select``4(System.Collections.Generic.IDictionary{``0,``2},System.Func{``0,``1},System.Func{``1,``0},System.Func{``2,``3},System.Func{``3,``2})">
            <summary>
            Get a 1-1 invertible mapping of an <see cref="T:System.Collections.Generic.IDictionary`2"/>, mapping the keys and values of the <see cref="T:System.Collections.Generic.KeyValuePair`2"/>.'s
            </summary>
            <typeparam name="K0">The original key type.</typeparam>
            <typeparam name="K1">The new key type.</typeparam>
            <typeparam name="R0">The original value type.</typeparam>
            <typeparam name="R1">The new value type.</typeparam>
            <param name="this">The <see cref="T:System.Collections.Generic.IDictionary`2"/> to map.</param>
            <param name="keyMapper">The original->new key mapper.</param>
            <param name="keyInverse">The new->original key mapper.</param>
            <param name="valueMapper">The original->new value mapper.</param>
            <param name="valueInverse">The new->original value mapper. If <see langword="null"/>, the resultant <see cref="T:System.Collections.Generic.IDictionary`2"/> cannot be assigned new values.</param>
            <returns>A mutability-passing <see cref="T:System.Collections.Generic.IDictionary`2"/> with <paramref name="keyMapper"/> and <paramref name="valueMapper"/> applied to <paramref name="this"/>'s elements.</returns>
        </member>
        <member name="T:WhetStone.Looping.selectMany">
            <summary>
            A static container for identity method
            </summary>
        </member>
        <member name="M:WhetStone.Looping.selectMany.SelectMany``2(System.Collections.Generic.IList{``0},System.Func{``0,System.Collections.Generic.IList{``1}},System.Nullable{System.Boolean})">
            <summary>
            get a 1-many mapping of an <see cref="T:System.Collections.Generic.IList`1"/>.
            </summary>
            <typeparam name="T">Type of the original <see cref="T:System.Collections.Generic.IList`1"/>.</typeparam>
            <typeparam name="R">The type of the resultant <see cref="T:System.Collections.Generic.IList`1"/>.</typeparam>
            <param name="this">The <see cref="T:System.Collections.Generic.IList`1"/> to map.</param>
            <param name="selector">The selector function from <paramref name="this"/>'s element to multiple elements.</param>
            <param name="samecount">Whether it can be assured all the elements in <paramref name="this"/> map to the same amount of elements for optimization. If <see langword="null"/>, the resultant values will be checked.</param>
            <returns>A read-only <see cref="T:System.Collections.Generic.IList`1"/> that concatenates the result of <paramref name="this"/> through <paramref name="selector"/>.</returns>
        </member>
        <member name="T:WhetStone.Looping.single">
            <summary>
            A static container for identity method
            </summary>
        </member>
        <member name="M:WhetStone.Looping.single.SingleOrDefault``1(System.Collections.Generic.IEnumerable{``0},``0)">
            <summary>
            Get the element of an <see cref="T:System.Collections.Generic.IEnumerable`1"/> if it is alone, a default element if it empty, or throw exception otherwise.
            </summary>
            <typeparam name="T">The type of the <see cref="T:System.Collections.Generic.IEnumerable`1"/></typeparam>
            <param name="this">The <see cref="T:System.Collections.Generic.IEnumerable`1"/> to use.</param>
            <param name="default">The value to return if <paramref name="this"/> is empty.</param>
            <returns>The single element of <paramref name="this"/>, or <paramref name="default"/> if none exist.</returns>
            <exception cref="T:System.InvalidOperationException">If the argument contains more than one element.</exception>
        </member>
        <member name="T:WhetStone.Looping.skip">
            <summary>
            A static container for identity method
            </summary>
        </member>
        <member name="M:WhetStone.Looping.skip.Skip``1(System.Collections.Generic.IList{``0},System.Int32)">
            <summary>
            Get an <see cref="T:System.Collections.Generic.IList`1"/> that is the same as the original <see cref="T:System.Collections.Generic.IList`1"/> with the first elements skipped.
            </summary>
            <typeparam name="T">The type of the <see cref="T:System.Collections.Generic.IList`1"/>.</typeparam>
            <param name="this">The <see cref="T:System.Collections.Generic.IList`1"/> to use.</param>
            <param name="skipCount">The number of elements to skip.</param>
            <returns>A mutability-passing <see cref="T:System.Collections.Generic.IList`1"/> that skips the first <paramref name="skipCount"/> elements in <paramref name="this"/>.</returns>
        </member>
        <member name="T:WhetStone.Looping.skipSlice">
            <summary>
            A static container for identity method
            </summary>
        </member>
        <member name="M:WhetStone.Looping.skipSlice.SkipSlice``1(System.Collections.Generic.IEnumerable{``0},System.Int32,System.Int32)">
            <overloads>Get an enumerable with elements in the middle removed.</overloads>
            <summary>
            Get an <see cref="T:System.Collections.Generic.IEnumerable`1"/> with elements in the middle removed.
            </summary>
            <typeparam name="T">The type of the <see cref="T:System.Collections.Generic.IEnumerable`1"/></typeparam>
            <param name="this">The <see cref="T:System.Collections.Generic.IEnumerable`1"/> to use.</param>
            <param name="start">The start of the removed section.</param>
            <param name="length">The length of the removed section.</param>
            <returns>A new <see cref="T:System.Collections.Generic.IEnumerable`1"/>, with <paramref name="this"/>'s elements except the section starting at <paramref name="start"/> and <paramref name="length"/> long removed.</returns>
            <remarks>If the section is outside the bounds of <paramref name="this"/>, the subsections that don't overlap <paramref name="this"/> are ignored.</remarks>
        </member>
        <member name="M:WhetStone.Looping.skipSlice.SkipSlice``1(System.Collections.Generic.IList{``0},System.Int32,System.Int32)">
            <summary>
            Get an <see cref="T:System.Collections.Generic.IList`1"/> with elements in the middle removed.
            </summary>
            <typeparam name="T">The type of the <see cref="T:System.Collections.Generic.IList`1"/></typeparam>
            <param name="this">The <see cref="T:System.Collections.Generic.IList`1"/> to use.</param>
            <param name="start">The start of the removed section.</param>
            <param name="length">The length of the removed section.</param>
            <returns>A new <see cref="T:System.Collections.Generic.IList`1"/>, with <paramref name="this"/>'s elements except the section starting at <paramref name="start"/> and <paramref name="length"/> long removed.</returns>
            <remarks>
            <para>
            If the section is outside the bounds of <paramref name="this"/>, the subsections that don't overlap <paramref name="this"/> are ignored.
            </para>
            <para>
            The returned value is mutability-passing.
            </para>
            </remarks>
        </member>
        <member name="T:WhetStone.Looping.splice">
            <summary>
            A static container for identity method
            </summary>
        </member>
        <member name="M:WhetStone.Looping.splice.Splice``1(System.Collections.Generic.IEnumerable{``0},``0,System.Int32)">
            <overloads>Insert an enumerable into another.</overloads>
            <summary>
            Create an <see cref="T:System.Collections.Generic.IEnumerable`1"/> with an element inserted into it.
            </summary>
            <typeparam name="T">The type of the <see cref="T:System.Collections.Generic.IEnumerable`1"/>s.</typeparam>
            <param name="this">The <see cref="T:System.Collections.Generic.IEnumerable`1"/> to insert to.</param>
            <param name="slice">The element to insert.</param>
            <param name="spliceStart">The index of the inserted element.</param>
            <returns>A new <see cref="T:System.Collections.Generic.IEnumerable`1"/>, like <paramref name="this"/> but with <paramref name="slice"/> inserted at index <paramref name="spliceStart"/>.</returns>
        </member>
        <member name="M:WhetStone.Looping.splice.Splice``1(System.Collections.Generic.IEnumerable{``0},System.Collections.Generic.IEnumerable{``0},System.Int32)">
            <summary>
            Create an <see cref="T:System.Collections.Generic.IEnumerable`1"/> with another <see cref="T:System.Collections.Generic.IEnumerable`1"/> inserted into it.
            </summary>
            <typeparam name="T">The type of the <see cref="T:System.Collections.Generic.IEnumerable`1"/>s.</typeparam>
            <param name="this">The <see cref="T:System.Collections.Generic.IEnumerable`1"/> to insert to.</param>
            <param name="slice">The <see cref="T:System.Collections.Generic.IEnumerable`1"/> to insert.</param>
            <param name="spliceStart">The first index of the inserted <see cref="T:System.Collections.Generic.IEnumerable`1"/>.</param>
            <returns>A new <see cref="T:System.Collections.Generic.IEnumerable`1"/>, like <paramref name="this"/> but with <paramref name="slice"/> inserted at index <paramref name="spliceStart"/>.</returns>
        </member>
        <member name="M:WhetStone.Looping.splice.Splice``1(System.Collections.Generic.IList{``0},System.Collections.Generic.IList{``0},System.Int32)">
            <summary>
            Create an <see cref="T:System.Collections.Generic.IList`1"/> with another <see cref="T:System.Collections.Generic.IList`1"/> inserted into it.
            </summary>
            <typeparam name="T">The type of the <see cref="T:System.Collections.Generic.IList`1"/>s.</typeparam>
            <param name="this">The <see cref="T:System.Collections.Generic.IList`1"/> to insert to.</param>
            <param name="slice">The <see cref="T:System.Collections.Generic.IList`1"/> to insert.</param>
            <param name="spliceStart">The first index of the inserted <see cref="T:System.Collections.Generic.IList`1"/>.</param>
            <returns>A mutability-passing <see cref="T:System.Collections.Generic.IList`1"/>, like <paramref name="this"/> but with <paramref name="slice"/> inserted at index <paramref name="spliceStart"/>.</returns>
        </member>
        <member name="M:WhetStone.Looping.splice.Splice``1(System.Collections.Generic.IList{``0},``0,System.Int32)">
            <summary>
            Create an <see cref="T:System.Collections.Generic.IList`1"/> with an element inserted into it.
            </summary>
            <typeparam name="T">The type of the <see cref="T:System.Collections.Generic.IList`1"/>s.</typeparam>
            <param name="this">The <see cref="T:System.Collections.Generic.IList`1"/> to insert to.</param>
            <param name="slice">The element to insert.</param>
            <param name="spliceStart">The index of the inserted element.</param>
            <returns>A mutability-passing <see cref="T:System.Collections.Generic.IList`1"/>, like <paramref name="this"/> but with <paramref name="slice"/> inserted at index <paramref name="spliceStart"/>.</returns>
        </member>
        <member name="T:WhetStone.Looping.take">
            <summary>
            A static container for identity method
            </summary>
        </member>
        <member name="M:WhetStone.Looping.take.Take``1(System.Collections.Generic.IList{``0},System.Int32)">
            <summary>
            Get an <see cref="T:System.Collections.Generic.IList`1"/> that is the same as the original <see cref="T:System.Collections.Generic.IList`1"/> with the last elements skipped.
            </summary>
            <typeparam name="T">The type of the <see cref="T:System.Collections.Generic.IList`1"/>.</typeparam>
            <param name="this">The <see cref="T:System.Collections.Generic.IList`1"/> to use.</param>
            <param name="length">The number of elements take.</param>
            <returns>A mutability-passing <see cref="T:System.Collections.Generic.IList`1"/> that takes the first <paramref name="length"/> elements in <paramref name="this"/>.</returns>
        </member>
        <member name="T:WhetStone.Looping.ITallier`1">
            <summary>
            A Tallier, that can tally for a specific purpose.
            </summary>
            <typeparam name="T">The type of the <see cref="T:System.Collections.Generic.IEnumerable`1"/> to tally.</typeparam>
        </member>
        <member name="M:WhetStone.Looping.ITallier`1.GetTalliaror">
            <summary>
            Get an instance of a tallier for a tallying run.
            </summary>
            <returns>A new <see cref="T:WhetStone.Looping.ITalliator`1"/>.</returns>
        </member>
        <member name="T:WhetStone.Looping.ITalliator`1">
            <summary>
            A specific instance of a specific tallying job.
            </summary>
            <typeparam name="T">The type of the <see cref="T:System.Collections.Generic.IEnumerable`1"/> to tally.</typeparam>
        </member>
        <member name="M:WhetStone.Looping.ITalliator`1.next(`0)">
            <summary>
            Introduces a new value into the tally.
            </summary>
            <param name="val">The value to tally.</param>
            <returns>Whether or not to end all tallies.</returns>
        </member>
        <member name="M:WhetStone.Looping.ITalliator`1.end">
            <summary>
            End the tally, and return the result.
            </summary>
            <returns>The result of the tally.</returns>
        </member>
        <member name="T:WhetStone.Looping.GenericTally`1">
            <summary>
            A container of talliers.
            </summary>
            <typeparam name="T">The type of <see cref="T:System.Collections.Generic.IEnumerable`1"/> to tally.</typeparam>
        </member>
        <member name="M:WhetStone.Looping.GenericTally`1.#ctor(System.Collections.Generic.IEnumerable{`0})">
            <summary>
            Constructor.
            </summary>
            <param name="src">The default <see cref="T:System.Collections.Generic.IEnumerable`1"/> to tally in case none are provided. <see langword="null"/> for no default.</param>
        </member>
        <member name="M:WhetStone.Looping.GenericTally`1.Add(WhetStone.Looping.ITallier{`0},System.Boolean)">
            <summary>
            Add an <see cref="T:WhetStone.Looping.ITallier`1"/> to the tally.
            </summary>
            <param name="tallier">The <see cref="T:WhetStone.Looping.ITallier`1"/> to add.</param>
            <param name="append">Whether to add the aggregate result to the tally result.</param>
            <returns>The <see cref="T:WhetStone.Looping.GenericTally`1"/>, to allow easy piping.</returns>
        </member>
        <member name="M:WhetStone.Looping.GenericTally`1.Do(System.Collections.Generic.IEnumerable{`0})">
            <summary>
            Perform the tally, tallying all the <see cref="T:WhetStone.Looping.ITallier`1"/>s added until the <see cref="T:System.Collections.Generic.IEnumerable`1"/> is done or any of the <see cref="T:WhetStone.Looping.ITallier`1"/>s have broken.
            </summary>
            <param name="source">The <see cref="T:System.Collections.Generic.IEnumerable`1"/> to tally, or <see langword="null"/> for default.</param>
            <returns>An array with all the results of the tallies.</returns>
        </member>
        <member name="T:WhetStone.Looping.TallierExtensions">
            <summary>
            static container for extension methods.
            </summary>
        </member>
        <member name="M:WhetStone.Looping.TallierExtensions.TallyAggregate``2(WhetStone.Looping.GenericTally{``0},System.Func{``0,``1,``1},``1,System.Func{``1,System.Boolean},System.Boolean)">
            <summary>
            Add an aggregate to a <see cref="T:WhetStone.Looping.GenericTally`1"/>.
            </summary>
            <typeparam name="T">The type of the <see cref="T:WhetStone.Looping.GenericTally`1"/>.</typeparam>
            <typeparam name="R">The type of the aggregated value.</typeparam>
            <param name="this">The <see cref="T:WhetStone.Looping.GenericTally`1"/> to add to.</param>
            <param name="func">The aggregate function.</param>
            <param name="seed">The seed of the aggregate function.</param>
            <param name="break">The condition for the aggregated value on which to break, or <see langword="null"/> to never break.</param>
            <param name="append">Whether to add the aggregate result to the tally result.</param>
            <returns><paramref name="this"/>, to allow piping.</returns>
        </member>
        <member name="M:WhetStone.Looping.TallierExtensions.TallyAggregateSelect``3(WhetStone.Looping.GenericTally{``0},System.Func{``0,``1,``1},``1,System.Func{``1,``2},System.Func{``1,System.Boolean})">
            <summary>
            Add an aggregate to a <see cref="T:WhetStone.Looping.GenericTally`1"/>.
            </summary>
            <typeparam name="T">The type of the <see cref="T:WhetStone.Looping.GenericTally`1"/>.</typeparam>
            <typeparam name="A">The type of the aggregated value.</typeparam>
            <typeparam name="R">The type of the value added to the tally result.</typeparam>
            <param name="this">The <see cref="T:WhetStone.Looping.GenericTally`1"/> to add to.</param>
            <param name="func">The aggregate function.</param>
            <param name="seed">The seed of the aggregate function.</param>
            <param name="select">The selector function to apply to the aggregate result and add to the tally result.</param>
            <param name="break">The condition for the aggregated value on which to break, or <see langword="null"/> to never break.</param>
            <returns><paramref name="this"/>, to allow piping.</returns>
        </member>
        <member name="M:WhetStone.Looping.TallierExtensions.TallyCount``1(WhetStone.Looping.GenericTally{``0})">
            <summary>
            Add a count to a <see cref="T:WhetStone.Looping.GenericTally`1"/>.
            </summary>
            <typeparam name="T">The type of the <see cref="T:WhetStone.Looping.GenericTally`1"/>.</typeparam>
            <param name="this">The <see cref="T:WhetStone.Looping.GenericTally`1"/> to add to.</param>
            <returns><paramref name="this"/>, to allow piping.</returns>
        </member>
        <member name="M:WhetStone.Looping.TallierExtensions.TallyCount``1(WhetStone.Looping.GenericTally{``0},System.Func{``0,System.Boolean})">
            <summary>
            Add a count to a <see cref="T:WhetStone.Looping.GenericTally`1"/>.
            </summary>
            <typeparam name="T">The type of the <see cref="T:WhetStone.Looping.GenericTally`1"/>.</typeparam>
            <param name="this">The <see cref="T:WhetStone.Looping.GenericTally`1"/> to add to.</param>
            <param name="cond">The condition for which to count an element.</param>
            <returns><paramref name="this"/>, to allow piping.</returns>
        </member>
        <member name="M:WhetStone.Looping.TallierExtensions.TallyAny``1(WhetStone.Looping.GenericTally{``0},System.Func{``0,System.Boolean},System.Boolean)">
            <summary>
            Add an any to a <see cref="T:WhetStone.Looping.GenericTally`1"/>.
            </summary>
            <typeparam name="T">The type of the <see cref="T:WhetStone.Looping.GenericTally`1"/>.</typeparam>
            <param name="this">The <see cref="T:WhetStone.Looping.GenericTally`1"/> to add to.</param>
            <param name="cond">The condition for which to count an element.</param>
            <param name="break">Whether to break when an element is found.</param>
            <returns><paramref name="this"/>, to allow piping.</returns>
        </member>
        <member name="M:WhetStone.Looping.TallierExtensions.TallyAny``1(WhetStone.Looping.GenericTally{``0},System.Boolean)">
            <summary>
            Add an any to a <see cref="T:WhetStone.Looping.GenericTally`1"/>.
            </summary>
            <typeparam name="T">The type of the <see cref="T:WhetStone.Looping.GenericTally`1"/>.</typeparam>
            <param name="this">The <see cref="T:WhetStone.Looping.GenericTally`1"/> to add to.</param>
            <param name="break">Whether to break when an element is found.</param>
            <returns><paramref name="this"/>, to allow piping.</returns>
        </member>
        <member name="M:WhetStone.Looping.TallierExtensions.TallyAll``1(WhetStone.Looping.GenericTally{``0},System.Func{``0,System.Boolean},System.Boolean)">
            <summary>
            Add an all to a <see cref="T:WhetStone.Looping.GenericTally`1"/>.
            </summary>
            <typeparam name="T">The type of the <see cref="T:WhetStone.Looping.GenericTally`1"/>.</typeparam>
            <param name="this">The <see cref="T:WhetStone.Looping.GenericTally`1"/> to add to.</param>
            <param name="cond">The condition for which to count an element.</param>
            <param name="break">Whether to break when an element is found to return false.</param>
            <returns><paramref name="this"/>, to allow piping.</returns>
        </member>
        <member name="M:WhetStone.Looping.TallierExtensions.TallyAction``1(WhetStone.Looping.GenericTally{``0},System.Action{``0})">
            <summary>
            Add an ignored tally action to a <see cref="T:WhetStone.Looping.GenericTally`1"/>.
            </summary>
            <typeparam name="T">The type of the <see cref="T:WhetStone.Looping.GenericTally`1"/>.</typeparam>
            <param name="this">The <see cref="T:WhetStone.Looping.GenericTally`1"/> to add to.</param>
            <param name="action">The <see cref="T:System.Action`1"/> to invoke on every element tallied.</param>
            <returns><paramref name="this"/>, to allow piping.</returns>
        </member>
        <member name="M:WhetStone.Looping.TallierExtensions.TallyAction``1(WhetStone.Looping.GenericTally{``0},System.Func{``0,System.Boolean})">
            <summary>
            Add an ignored tally action to a <see cref="T:WhetStone.Looping.GenericTally`1"/>.
            </summary>
            <typeparam name="T">The type of the <see cref="T:WhetStone.Looping.GenericTally`1"/>.</typeparam>
            <param name="this">The <see cref="T:WhetStone.Looping.GenericTally`1"/> to add to.</param>
            <param name="action">The <see cref="T:System.Action`1"/> to invoke on every element tallied. The action returns whether or not to continue the tallying.</param>
            <returns><paramref name="this"/>, to allow piping.</returns>
        </member>
        <member name="M:WhetStone.Looping.TallierExtensions.TallyFirst``1(WhetStone.Looping.GenericTally{``0},System.Func{``0,System.Boolean},``0,System.Boolean)">
            <summary>
            Add a first to a <see cref="T:WhetStone.Looping.GenericTally`1"/>.
            </summary>
            <typeparam name="T">The type of the <see cref="T:WhetStone.Looping.GenericTally`1"/>.</typeparam>
            <param name="this">The <see cref="T:WhetStone.Looping.GenericTally`1"/> to add to.</param>
            <param name="cond">The condition for which to count an element.</param>
            <param name="initial">The initial result for when an element has not been found.</param>
            <param name="break">Whether to break when an element has been found.</param>
            <returns><paramref name="this"/>, to allow piping.</returns>
        </member>
        <member name="M:WhetStone.Looping.TallierExtensions.TallyLast``1(WhetStone.Looping.GenericTally{``0},System.Func{``0,System.Boolean},``0)">
            <summary>
            Add a last to a <see cref="T:WhetStone.Looping.GenericTally`1"/>.
            </summary>
            <typeparam name="T">The type of the <see cref="T:WhetStone.Looping.GenericTally`1"/>.</typeparam>
            <param name="this">The <see cref="T:WhetStone.Looping.GenericTally`1"/> to add to.</param>
            <param name="cond">The condition for which to count an element.</param>
            <param name="initial">The initial result for when an element has not been found.</param>
            <returns><paramref name="this"/>, to allow piping.</returns>
        </member>
        <member name="M:WhetStone.Looping.TallierExtensions.TallyAggregate``2(WhetStone.Looping.TypeTally{``0},System.Func{``0,``1,``1},``1,System.Func{``1,System.Boolean})">
            <summary>
            Add an aggregate to a tally.
            </summary>
            <typeparam name="T">The type of the tally.</typeparam>
            <typeparam name="R">The type of the value added to the tally result.</typeparam>
            <param name="this">The tally to add to.</param>
            <param name="func">The aggregate function.</param>
            <param name="seed">The seed of the aggregate function.</param>
            <param name="break">The condition for the aggregated value on which to break, or <see langword="null"/> to never break.</param>
            <returns><paramref name="this"/>, to allow piping.</returns>
        </member>
        <member name="M:WhetStone.Looping.TallierExtensions.TallyAggregate``3(WhetStone.Looping.TypeTally{``0,``1},System.Func{``0,``2,``2},``2,System.Func{``2,System.Boolean})">
            <summary>
            Add an aggregate to a tally.
            </summary>
            <typeparam name="T">The type of the tally.</typeparam>
            <typeparam name="R">The type of the value added to the tally result.</typeparam>
            <typeparam name="T0">The first return type of the tally.</typeparam>
            <param name="this">The tally to add to.</param>
            <param name="func">The aggregate function.</param>
            <param name="seed">The seed of the aggregate function.</param>
            <param name="break">The condition for the aggregated value on which to break, or <see langword="null"/> to never break.</param>
            <returns><paramref name="this"/>, to allow piping.</returns>
        </member>
        <member name="M:WhetStone.Looping.TallierExtensions.TallyAggregate``4(WhetStone.Looping.TypeTally{``0,``1,``2},System.Func{``0,``3,``3},``3,System.Func{``3,System.Boolean})">
            <summary>
            Add an aggregate to a tally.
            </summary>
            <typeparam name="T">The type of the tally.</typeparam>
            <typeparam name="R">The type of the value added to the tally result.</typeparam>
            <typeparam name="T0">The first return type of the tally.</typeparam>
            <typeparam name="T1">The second return type of the tally.</typeparam>
            <param name="this">The tally to add to.</param>
            <param name="func">The aggregate function.</param>
            <param name="seed">The seed of the aggregate function.</param>
            <param name="break">The condition for the aggregated value on which to break, or <see langword="null"/> to never break.</param>
            <returns><paramref name="this"/>, to allow piping.</returns>
        </member>
        <member name="M:WhetStone.Looping.TallierExtensions.TallyAggregate``5(WhetStone.Looping.TypeTally{``0,``1,``2,``3},System.Func{``0,``4,``4},``4,System.Func{``4,System.Boolean})">
            <summary>
            Add an aggregate to a tally.
            </summary>
            <typeparam name="T">The type of the tally.</typeparam>
            <typeparam name="R">The type of the value added to the tally result.</typeparam>
            <typeparam name="T0">The first return type of the tally.</typeparam>
            <typeparam name="T1">The second return type of the tally.</typeparam>
            <typeparam name="T2">The third return type of the tally.</typeparam>
            <param name="this">The tally to add to.</param>
            <param name="func">The aggregate function.</param>
            <param name="seed">The seed of the aggregate function.</param>
            <param name="break">The condition for the aggregated value on which to break, or <see langword="null"/> to never break.</param>
            <returns><paramref name="this"/>, to allow piping.</returns>
        </member>
        <member name="M:WhetStone.Looping.TallierExtensions.TallyAggregate``6(WhetStone.Looping.TypeTally{``0,``1,``2,``3,``4},System.Func{``0,``5,``5},``5,System.Func{``5,System.Boolean})">
            <summary>
            Add an aggregate to a tally.
            </summary>
            <typeparam name="T">The type of the tally.</typeparam>
            <typeparam name="R">The type of the value added to the tally result.</typeparam>
            <typeparam name="T0">The first return type of the tally.</typeparam>
            <typeparam name="T1">The second return type of the tally.</typeparam>
            <typeparam name="T2">The third return type of the tally.</typeparam>
            <typeparam name="T3">The fourth return type of the tally.</typeparam>
            <param name="this">The tally to add to.</param>
            <param name="func">The aggregate function.</param>
            <param name="seed">The seed of the aggregate function.</param>
            <param name="break">The condition for the aggregated value on which to break, or <see langword="null"/> to never break.</param>
            <returns><paramref name="this"/>, to allow piping.</returns>
        </member>
        <member name="M:WhetStone.Looping.TallierExtensions.TallyAggregate``7(WhetStone.Looping.TypeTally{``0,``1,``2,``3,``4,``5},System.Func{``0,``6,``6},``6,System.Func{``6,System.Boolean})">
            <summary>
            Add an aggregate to a tally.
            </summary>
            <typeparam name="T">The type of the tally.</typeparam>
            <typeparam name="R">The type of the value added to the tally result.</typeparam>
            <typeparam name="T0">The first return type of the tally.</typeparam>
            <typeparam name="T1">The second return type of the tally.</typeparam>
            <typeparam name="T2">The third return type of the tally.</typeparam>
            <typeparam name="T3">The fourth return type of the tally.</typeparam>
            <typeparam name="T4">The fifth return type of the tally.</typeparam>
            <param name="this">The tally to add to.</param>
            <param name="func">The aggregate function.</param>
            <param name="seed">The seed of the aggregate function.</param>
            <param name="break">The condition for the aggregated value on which to break, or <see langword="null"/> to never break.</param>
            <returns><paramref name="this"/>, to allow piping.</returns>
        </member>
        <member name="M:WhetStone.Looping.TallierExtensions.TallyAggregatehidden``2(WhetStone.Looping.TypeTally{``0},System.Func{``0,``1,``1},``1,System.Func{``1,System.Boolean})">
            <summary>
            Add an aggregate to a tally.
            </summary>
            <typeparam name="T">The type of the tally.</typeparam>
            <typeparam name="R">The type of the value added to the tally result.</typeparam>
            <param name="this">The tally to add to.</param>
            <param name="func">The aggregate function.</param>
            <param name="seed">The seed of the aggregate function.</param>
            <param name="break">The condition for the aggregated value on which to break, or <see langword="null"/> to never break.</param>
            <returns><paramref name="this"/>, to allow piping.</returns>
        </member>
        <member name="M:WhetStone.Looping.TallierExtensions.TallyAggregatehidden``3(WhetStone.Looping.TypeTally{``0,``1},System.Func{``0,``2,``2},``2,System.Func{``2,System.Boolean})">
            <summary>
            Add an aggregate to a tally.
            </summary>
            <typeparam name="T">The type of the tally.</typeparam>
            <typeparam name="R">The type of the value added to the tally result.</typeparam>
            <typeparam name="T0">The first return type of the tally.</typeparam>
            <param name="this">The tally to add to.</param>
            <param name="func">The aggregate function.</param>
            <param name="seed">The seed of the aggregate function.</param>
            <param name="break">The condition for the aggregated value on which to break, or <see langword="null"/> to never break.</param>
            <returns><paramref name="this"/>, to allow piping.</returns>
        </member>
        <member name="M:WhetStone.Looping.TallierExtensions.TallyAggregatehidden``4(WhetStone.Looping.TypeTally{``0,``1,``2},System.Func{``0,``3,``3},``3,System.Func{``3,System.Boolean})">
            <summary>
            Add an aggregate to a tally.
            </summary>
            <typeparam name="T">The type of the tally.</typeparam>
            <typeparam name="R">The type of the value added to the tally result.</typeparam>
            <typeparam name="T0">The first return type of the tally.</typeparam>
            <typeparam name="T1">The second return type of the tally.</typeparam>
            <param name="this">The tally to add to.</param>
            <param name="func">The aggregate function.</param>
            <param name="seed">The seed of the aggregate function.</param>
            <param name="break">The condition for the aggregated value on which to break, or <see langword="null"/> to never break.</param>
            <returns><paramref name="this"/>, to allow piping.</returns>
        </member>
        <member name="M:WhetStone.Looping.TallierExtensions.TallyAggregatehidden``5(WhetStone.Looping.TypeTally{``0,``1,``2,``3},System.Func{``0,``4,``4},``4,System.Func{``4,System.Boolean})">
            <summary>
            Add an aggregate to a tally.
            </summary>
            <typeparam name="T">The type of the tally.</typeparam>
            <typeparam name="R">The type of the value added to the tally result.</typeparam>
            <typeparam name="T0">The first return type of the tally.</typeparam>
            <typeparam name="T1">The second return type of the tally.</typeparam>
            <typeparam name="T2">The third return type of the tally.</typeparam>
            <param name="this">The tally to add to.</param>
            <param name="func">The aggregate function.</param>
            <param name="seed">The seed of the aggregate function.</param>
            <param name="break">The condition for the aggregated value on which to break, or <see langword="null"/> to never break.</param>
            <returns><paramref name="this"/>, to allow piping.</returns>
        </member>
        <member name="M:WhetStone.Looping.TallierExtensions.TallyAggregatehidden``6(WhetStone.Looping.TypeTally{``0,``1,``2,``3,``4},System.Func{``0,``5,``5},``5,System.Func{``5,System.Boolean})">
            <summary>
            Add an aggregate to a tally.
            </summary>
            <typeparam name="T">The type of the tally.</typeparam>
            <typeparam name="R">The type of the value added to the tally result.</typeparam>
            <typeparam name="T0">The first return type of the tally.</typeparam>
            <typeparam name="T1">The second return type of the tally.</typeparam>
            <typeparam name="T2">The third return type of the tally.</typeparam>
            <typeparam name="T3">The fourth return type of the tally.</typeparam>
            <param name="this">The tally to add to.</param>
            <param name="func">The aggregate function.</param>
            <param name="seed">The seed of the aggregate function.</param>
            <param name="break">The condition for the aggregated value on which to break, or <see langword="null"/> to never break.</param>
            <returns><paramref name="this"/>, to allow piping.</returns>
        </member>
        <member name="M:WhetStone.Looping.TallierExtensions.TallyAggregatehidden``7(WhetStone.Looping.TypeTally{``0,``1,``2,``3,``4,``5},System.Func{``0,``6,``6},``6,System.Func{``6,System.Boolean})">
            <summary>
            Add an aggregate to a tally.
            </summary>
            <typeparam name="T">The type of the tally.</typeparam>
            <typeparam name="R">The type of the value added to the tally result.</typeparam>
            <typeparam name="T0">The first return type of the tally.</typeparam>
            <typeparam name="T1">The second return type of the tally.</typeparam>
            <typeparam name="T2">The third return type of the tally.</typeparam>
            <typeparam name="T3">The fourth return type of the tally.</typeparam>
            <typeparam name="T4">The fifth return type of the tally.</typeparam>
            <param name="this">The tally to add to.</param>
            <param name="func">The aggregate function.</param>
            <param name="seed">The seed of the aggregate function.</param>
            <param name="break">The condition for the aggregated value on which to break, or <see langword="null"/> to never break.</param>
            <returns><paramref name="this"/>, to allow piping.</returns>
        </member>
        <member name="M:WhetStone.Looping.TallierExtensions.TallyAggregateSelect``3(WhetStone.Looping.TypeTally{``0},System.Func{``0,``1,``1},``1,System.Func{``1,``2},System.Func{``1,System.Boolean})">
            <summary>
            Add an aggregate to a tally.
            </summary>
            <typeparam name="T">The type of the tally.</typeparam>
            <typeparam name="A">The type of the aggregated value.</typeparam>
            <typeparam name="R">The type of the value added to the tally result.</typeparam>
            <param name="this">The tally to add to.</param>
            <param name="func">The aggregate function.</param>
            <param name="seed">The seed of the aggregate function.</param>
            <param name="select">The selector function to apply to the aggregate result and add to the tally result.</param>
            <param name="break">The condition for the aggregated value on which to break, or <see langword="null"/> to never break.</param>
            <returns><paramref name="this"/>, to allow piping.</returns>
        </member>
        <member name="M:WhetStone.Looping.TallierExtensions.TallyAggregateSelect``4(WhetStone.Looping.TypeTally{``0,``1},System.Func{``0,``2,``2},``2,System.Func{``2,``3},System.Func{``2,System.Boolean})">
            <summary>
            Add an aggregate to a tally.
            </summary>
            <typeparam name="T">The type of the tally.</typeparam>
            <typeparam name="A">The type of the aggregated value.</typeparam>
            <typeparam name="R">The type of the value added to the tally result.</typeparam>
            <typeparam name="T0">The first return type of the tally.</typeparam>
            <param name="this">The tally to add to.</param>
            <param name="func">The aggregate function.</param>
            <param name="seed">The seed of the aggregate function.</param>
            <param name="select">The selector function to apply to the aggregate result and add to the tally result.</param>
            <param name="break">The condition for the aggregated value on which to break, or <see langword="null"/> to never break.</param>
            <returns><paramref name="this"/>, to allow piping.</returns>
        </member>
        <member name="M:WhetStone.Looping.TallierExtensions.TallyAggregateSelect``5(WhetStone.Looping.TypeTally{``0,``1,``2},System.Func{``0,``3,``3},``3,System.Func{``3,``4},System.Func{``3,System.Boolean})">
            <summary>
            Add an aggregate to a tally.
            </summary>
            <typeparam name="T">The type of the tally.</typeparam>
            <typeparam name="A">The type of the aggregated value.</typeparam>
            <typeparam name="R">The type of the value added to the tally result.</typeparam>
            <typeparam name="T0">The first return type of the tally.</typeparam>
            <typeparam name="T1">The second return type of the tally.</typeparam>
            <param name="this">The tally to add to.</param>
            <param name="func">The aggregate function.</param>
            <param name="seed">The seed of the aggregate function.</param>
            <param name="select">The selector function to apply to the aggregate result and add to the tally result.</param>
            <param name="break">The condition for the aggregated value on which to break, or <see langword="null"/> to never break.</param>
            <returns><paramref name="this"/>, to allow piping.</returns>
        </member>
        <member name="M:WhetStone.Looping.TallierExtensions.TallyAggregateSelect``6(WhetStone.Looping.TypeTally{``0,``1,``2,``3},System.Func{``0,``4,``4},``4,System.Func{``4,``5},System.Func{``4,System.Boolean})">
            <summary>
            Add an aggregate to a tally.
            </summary>
            <typeparam name="T">The type of the tally.</typeparam>
            <typeparam name="A">The type of the aggregated value.</typeparam>
            <typeparam name="R">The type of the value added to the tally result.</typeparam>
            <typeparam name="T0">The first return type of the tally.</typeparam>
            <typeparam name="T1">The second return type of the tally.</typeparam>
            <typeparam name="T2">The third return type of the tally.</typeparam>
            <param name="this">The tally to add to.</param>
            <param name="func">The aggregate function.</param>
            <param name="seed">The seed of the aggregate function.</param>
            <param name="select">The selector function to apply to the aggregate result and add to the tally result.</param>
            <param name="break">The condition for the aggregated value on which to break, or <see langword="null"/> to never break.</param>
            <returns><paramref name="this"/>, to allow piping.</returns>
        </member>
        <member name="M:WhetStone.Looping.TallierExtensions.TallyAggregateSelect``7(WhetStone.Looping.TypeTally{``0,``1,``2,``3,``4},System.Func{``0,``5,``5},``5,System.Func{``5,``6},System.Func{``5,System.Boolean})">
            <summary>
            Add an aggregate to a tally.
            </summary>
            <typeparam name="T">The type of the tally.</typeparam>
            <typeparam name="A">The type of the aggregated value.</typeparam>
            <typeparam name="R">The type of the value added to the tally result.</typeparam>
            <typeparam name="T0">The first return type of the tally.</typeparam>
            <typeparam name="T1">The second return type of the tally.</typeparam>
            <typeparam name="T2">The third return type of the tally.</typeparam>
            <typeparam name="T3">The fourth return type of the tally.</typeparam>
            <param name="this">The tally to add to.</param>
            <param name="func">The aggregate function.</param>
            <param name="seed">The seed of the aggregate function.</param>
            <param name="select">The selector function to apply to the aggregate result and add to the tally result.</param>
            <param name="break">The condition for the aggregated value on which to break, or <see langword="null"/> to never break.</param>
            <returns><paramref name="this"/>, to allow piping.</returns>
        </member>
        <member name="M:WhetStone.Looping.TallierExtensions.TallyAggregateSelect``8(WhetStone.Looping.TypeTally{``0,``1,``2,``3,``4,``5},System.Func{``0,``6,``6},``6,System.Func{``6,``7},System.Func{``6,System.Boolean})">
            <summary>
            Add an aggregate to a tally.
            </summary>
            <typeparam name="T">The type of the tally.</typeparam>
            <typeparam name="A">The type of the aggregated value.</typeparam>
            <typeparam name="R">The type of the value added to the tally result.</typeparam>
            <typeparam name="T0">The first return type of the tally.</typeparam>
            <typeparam name="T1">The second return type of the tally.</typeparam>
            <typeparam name="T2">The third return type of the tally.</typeparam>
            <typeparam name="T3">The fourth return type of the tally.</typeparam>
            <typeparam name="T4">The fifth return type of the tally.</typeparam>
            <param name="this">The tally to add to.</param>
            <param name="func">The aggregate function.</param>
            <param name="seed">The seed of the aggregate function.</param>
            <param name="select">The selector function to apply to the aggregate result and add to the tally result.</param>
            <param name="break">The condition for the aggregated value on which to break, or <see langword="null"/> to never break.</param>
            <returns><paramref name="this"/>, to allow piping.</returns>
        </member>
        <member name="M:WhetStone.Looping.TallierExtensions.TallyCount``1(WhetStone.Looping.TypeTally{``0})">
            <summary>
            Add a count to a tally.
            </summary>
            <typeparam name="T">The type of the tally.</typeparam>
            <param name="this">The tally to add to.</param>
            <returns><paramref name="this"/>, to allow piping.</returns>
        </member>
        <member name="M:WhetStone.Looping.TallierExtensions.TallyCount``2(WhetStone.Looping.TypeTally{``0,``1})">
            <summary>
            Add a count to a tally.
            </summary>
            <typeparam name="T">The type of the tally.</typeparam>
            <typeparam name="T0">The first output type of the tally.</typeparam>
            <param name="this">The tally to add to.</param>
            <returns><paramref name="this"/>, to allow piping.</returns>
        </member>
        <member name="M:WhetStone.Looping.TallierExtensions.TallyCount``3(WhetStone.Looping.TypeTally{``0,``1,``2})">
            <summary>
            Add a count to a tally.
            </summary>
            <typeparam name="T">The type of the tally.</typeparam>
            <typeparam name="T0">The first output type of the tally.</typeparam>
            <typeparam name="T1">The second output type of the tally.</typeparam>
            <param name="this">The tally to add to.</param>
            <returns><paramref name="this"/>, to allow piping.</returns>
        </member>
        <member name="M:WhetStone.Looping.TallierExtensions.TallyCount``4(WhetStone.Looping.TypeTally{``0,``1,``2,``3})">
            <summary>
            Add a count to a tally.
            </summary>
            <typeparam name="T">The type of the tally.</typeparam>
            <typeparam name="T0">The first output type of the tally.</typeparam>
            <typeparam name="T1">The second output type of the tally.</typeparam>
            <typeparam name="T2">The third output type of the tally.</typeparam>
            <param name="this">The tally to add to.</param>
            <returns><paramref name="this"/>, to allow piping.</returns>
        </member>
        <member name="M:WhetStone.Looping.TallierExtensions.TallyCount``5(WhetStone.Looping.TypeTally{``0,``1,``2,``3,``4})">
            <summary>
            Add a count to a tally.
            </summary>
            <typeparam name="T">The type of the tally.</typeparam>
            <typeparam name="T0">The first output type of the tally.</typeparam>
            <typeparam name="T1">The second output type of the tally.</typeparam>
            <typeparam name="T2">The third output type of the tally.</typeparam>
            <typeparam name="T3">The fourth output type of the tally.</typeparam>
            <param name="this">The tally to add to.</param>
            <returns><paramref name="this"/>, to allow piping.</returns>
        </member>
        <member name="M:WhetStone.Looping.TallierExtensions.TallyCount``6(WhetStone.Looping.TypeTally{``0,``1,``2,``3,``4,``5})">
            <summary>
            Add a count to a tally.
            </summary>
            <typeparam name="T">The type of the tally.</typeparam>
            <typeparam name="T0">The first output type of the tally.</typeparam>
            <typeparam name="T1">The second output type of the tally.</typeparam>
            <typeparam name="T2">The third output type of the tally.</typeparam>
            <typeparam name="T3">The fourth output type of the tally.</typeparam>
            <typeparam name="T4">The fifth output type of the tally.</typeparam>
            <param name="this">The tally to add to.</param>
            <returns><paramref name="this"/>, to allow piping.</returns>
        </member>
        <member name="M:WhetStone.Looping.TallierExtensions.TallyCount``1(WhetStone.Looping.TypeTally{``0},System.Func{``0,System.Boolean})">
            <summary>
            Add a count to a tally.
            </summary>
            <typeparam name="T">The type of the tally.</typeparam>
            <param name="this">The tally to add to.</param>
            <param name="cond">The condition for which to count an element.</param>
            <returns><paramref name="this"/>, to allow piping.</returns>
        </member>
        <member name="M:WhetStone.Looping.TallierExtensions.TallyCount``2(WhetStone.Looping.TypeTally{``0,``1},System.Func{``0,System.Boolean})">
            <summary>
            Add a count to a tally.
            </summary>
            <typeparam name="T">The type of the tally.</typeparam>
            <typeparam name="T0">The first output type of the tally.</typeparam>
            <param name="this">The tally to add to.</param>
            <param name="cond">The condition for which to count an element.</param>
            <returns><paramref name="this"/>, to allow piping.</returns>
        </member>
        <member name="M:WhetStone.Looping.TallierExtensions.TallyCount``3(WhetStone.Looping.TypeTally{``0,``1,``2},System.Func{``0,System.Boolean})">
            <summary>
            Add a count to a tally.
            </summary>
            <typeparam name="T">The type of the tally.</typeparam>
            <typeparam name="T0">The first output type of the tally.</typeparam>
            <typeparam name="T1">The second output type of the tally.</typeparam>
            <param name="this">The tally to add to.</param>
            <param name="cond">The condition for which to count an element.</param>
            <returns><paramref name="this"/>, to allow piping.</returns>
        </member>
        <member name="M:WhetStone.Looping.TallierExtensions.TallyCount``4(WhetStone.Looping.TypeTally{``0,``1,``2,``3},System.Func{``0,System.Boolean})">
            <summary>
            Add a count to a tally.
            </summary>
            <typeparam name="T">The type of the tally.</typeparam>
            <typeparam name="T0">The first output type of the tally.</typeparam>
            <typeparam name="T1">The second output type of the tally.</typeparam>
            <typeparam name="T2">The third output type of the tally.</typeparam>
            <param name="this">The tally to add to.</param>
            <param name="cond">The condition for which to count an element.</param>
            <returns><paramref name="this"/>, to allow piping.</returns>
        </member>
        <member name="M:WhetStone.Looping.TallierExtensions.TallyCount``5(WhetStone.Looping.TypeTally{``0,``1,``2,``3,``4},System.Func{``0,System.Boolean})">
            <summary>
            Add a count to a tally.
            </summary>
            <typeparam name="T">The type of the tally.</typeparam>
            <typeparam name="T0">The first output type of the tally.</typeparam>
            <typeparam name="T1">The second output type of the tally.</typeparam>
            <typeparam name="T2">The third output type of the tally.</typeparam>
            <typeparam name="T3">The fourth output type of the tally.</typeparam>
            <param name="this">The tally to add to.</param>
            <param name="cond">The condition for which to count an element.</param>
            <returns><paramref name="this"/>, to allow piping.</returns>
        </member>
        <member name="M:WhetStone.Looping.TallierExtensions.TallyCount``6(WhetStone.Looping.TypeTally{``0,``1,``2,``3,``4,``5},System.Func{``0,System.Boolean})">
            <summary>
            Add a count to a tally.
            </summary>
            <typeparam name="T">The type of the tally.</typeparam>
            <typeparam name="T0">The first output type of the tally.</typeparam>
            <typeparam name="T1">The second output type of the tally.</typeparam>
            <typeparam name="T2">The third output type of the tally.</typeparam>
            <typeparam name="T3">The fourth output type of the tally.</typeparam>
            <typeparam name="T4">The fifth output type of the tally.</typeparam>
            <param name="this">The tally to add to.</param>
            <param name="cond">The condition for which to count an element.</param>
            <returns><paramref name="this"/>, to allow piping.</returns>
        </member>
        <member name="M:WhetStone.Looping.TallierExtensions.TallyAny``1(WhetStone.Looping.TypeTally{``0},System.Boolean)">
            <summary>
            Add an any to a tally.
            </summary>
            <typeparam name="T">The type of the tally.</typeparam>
            <param name="this">The tally to add to.</param>
            <param name="break">Whether to break when an element is found.</param>
            <returns><paramref name="this"/>, to allow piping.</returns>
        </member>
        <member name="M:WhetStone.Looping.TallierExtensions.TallyAny``2(WhetStone.Looping.TypeTally{``0,``1},System.Boolean)">
            <summary>
            Add an any to a tally.
            </summary>
            <typeparam name="T">The type of the tally.</typeparam>
            <typeparam name="T0">The first return type of the tally.</typeparam>
            <param name="this">The tally to add to.</param>
            <param name="break">Whether to break when an element is found.</param>
            <returns><paramref name="this"/>, to allow piping.</returns>
        </member>
        <member name="M:WhetStone.Looping.TallierExtensions.TallyAny``3(WhetStone.Looping.TypeTally{``0,``1,``2},System.Boolean)">
            <summary>
            Add an any to a tally.
            </summary>
            <typeparam name="T">The type of the tally.</typeparam>
            <typeparam name="T0">The first return type of the tally.</typeparam>
            <typeparam name="T1">The second return type of the tally.</typeparam>
            <param name="this">The tally to add to.</param>
            <param name="break">Whether to break when an element is found.</param>
            <returns><paramref name="this"/>, to allow piping.</returns>
        </member>
        <member name="M:WhetStone.Looping.TallierExtensions.TallyAny``4(WhetStone.Looping.TypeTally{``0,``1,``2,``3},System.Boolean)">
            <summary>
            Add an any to a tally.
            </summary>
            <typeparam name="T">The type of the tally.</typeparam>
            <typeparam name="T0">The first return type of the tally.</typeparam>
            <typeparam name="T1">The second return type of the tally.</typeparam>
            <typeparam name="T2">The third return type of the tally.</typeparam>
            <param name="this">The tally to add to.</param>
            <param name="break">Whether to break when an element is found.</param>
            <returns><paramref name="this"/>, to allow piping.</returns>
        </member>
        <member name="M:WhetStone.Looping.TallierExtensions.TallyAny``5(WhetStone.Looping.TypeTally{``0,``1,``2,``3,``4},System.Boolean)">
            <summary>
            Add an any to a tally.
            </summary>
            <typeparam name="T">The type of the tally.</typeparam>
            <typeparam name="T0">The first return type of the tally.</typeparam>
            <typeparam name="T1">The second return type of the tally.</typeparam>
            <typeparam name="T2">The third return type of the tally.</typeparam>
            <typeparam name="T3">The fourth return type of the tally.</typeparam>
            <param name="this">The tally to add to.</param>
            <param name="break">Whether to break when an element is found.</param>
            <returns><paramref name="this"/>, to allow piping.</returns>
        </member>
        <member name="M:WhetStone.Looping.TallierExtensions.TallyAny``6(WhetStone.Looping.TypeTally{``0,``1,``2,``3,``4,``5},System.Boolean)">
            <summary>
            Add an any to a tally.
            </summary>
            <typeparam name="T">The type of the tally.</typeparam>
            <typeparam name="T0">The first return type of the tally.</typeparam>
            <typeparam name="T1">The second return type of the tally.</typeparam>
            <typeparam name="T2">The third return type of the tally.</typeparam>
            <typeparam name="T3">The fourth return type of the tally.</typeparam>
            <typeparam name="T4">The fifth return type of the tally.</typeparam>
            <param name="this">The tally to add to.</param>
            <param name="break">Whether to break when an element is found.</param>
            <returns><paramref name="this"/>, to allow piping.</returns>
        </member>
        <member name="M:WhetStone.Looping.TallierExtensions.TallyAny``1(WhetStone.Looping.TypeTally{``0},System.Func{``0,System.Boolean},System.Boolean)">
            <summary>
            Add an any to a tally.
            </summary>
            <typeparam name="T">The type of the tally.</typeparam>
            <param name="this">The tally to add to.</param>
            <param name="cond">The condition for which to count an element.</param>
            <param name="break">Whether to break when an element is found.</param>
            <returns><paramref name="this"/>, to allow piping.</returns>
        </member>
        <member name="M:WhetStone.Looping.TallierExtensions.TallyAny``2(WhetStone.Looping.TypeTally{``0,``1},System.Func{``0,System.Boolean},System.Boolean)">
            <summary>
            Add an any to a tally.
            </summary>
            <typeparam name="T">The type of the tally.</typeparam>
            <typeparam name="T0">The first return type of the tally.</typeparam>
            <param name="this">The tally to add to.</param>
            <param name="cond">The condition for which to count an element.</param>
            <param name="break">Whether to break when an element is found.</param>
            <returns><paramref name="this"/>, to allow piping.</returns>
        </member>
        <member name="M:WhetStone.Looping.TallierExtensions.TallyAny``3(WhetStone.Looping.TypeTally{``0,``1,``2},System.Func{``0,System.Boolean},System.Boolean)">
            <summary>
            Add an any to a tally.
            </summary>
            <typeparam name="T">The type of the tally.</typeparam>
            <typeparam name="T0">The first return type of the tally.</typeparam>
            <typeparam name="T1">The second return type of the tally.</typeparam>
            <param name="this">The tally to add to.</param>
            <param name="cond">The condition for which to count an element.</param>
            <param name="break">Whether to break when an element is found.</param>
            <returns><paramref name="this"/>, to allow piping.</returns>
        </member>
        <member name="M:WhetStone.Looping.TallierExtensions.TallyAny``4(WhetStone.Looping.TypeTally{``0,``1,``2,``3},System.Func{``0,System.Boolean},System.Boolean)">
            <summary>
            Add an any to a tally.
            </summary>
            <typeparam name="T">The type of the tally.</typeparam>
            <typeparam name="T0">The first return type of the tally.</typeparam>
            <typeparam name="T1">The second return type of the tally.</typeparam>
            <typeparam name="T2">The third return type of the tally.</typeparam>
            <param name="this">The tally to add to.</param>
            <param name="cond">The condition for which to count an element.</param>
            <param name="break">Whether to break when an element is found.</param>
            <returns><paramref name="this"/>, to allow piping.</returns>
        </member>
        <member name="M:WhetStone.Looping.TallierExtensions.TallyAny``5(WhetStone.Looping.TypeTally{``0,``1,``2,``3,``4},System.Func{``0,System.Boolean},System.Boolean)">
            <summary>
            Add an any to a tally.
            </summary>
            <typeparam name="T">The type of the tally.</typeparam>
            <typeparam name="T0">The first return type of the tally.</typeparam>
            <typeparam name="T1">The second return type of the tally.</typeparam>
            <typeparam name="T2">The third return type of the tally.</typeparam>
            <typeparam name="T3">The fourth return type of the tally.</typeparam>
            <param name="this">The tally to add to.</param>
            <param name="cond">The condition for which to count an element.</param>
            <param name="break">Whether to break when an element is found.</param>
            <returns><paramref name="this"/>, to allow piping.</returns>
        </member>
        <member name="M:WhetStone.Looping.TallierExtensions.TallyAny``6(WhetStone.Looping.TypeTally{``0,``1,``2,``3,``4,``5},System.Func{``0,System.Boolean},System.Boolean)">
            <summary>
            Add an any to a tally.
            </summary>
            <typeparam name="T">The type of the tally.</typeparam>
            <typeparam name="T0">The first return type of the tally.</typeparam>
            <typeparam name="T1">The second return type of the tally.</typeparam>
            <typeparam name="T2">The third return type of the tally.</typeparam>
            <typeparam name="T3">The fourth return type of the tally.</typeparam>
            <typeparam name="T4">The fifth return type of the tally.</typeparam>
            <param name="this">The tally to add to.</param>
            <param name="cond">The condition for which to count an element.</param>
            <param name="break">Whether to break when an element is found.</param>
            <returns><paramref name="this"/>, to allow piping.</returns>
        </member>
        <member name="M:WhetStone.Looping.TallierExtensions.TallyAll``1(WhetStone.Looping.TypeTally{``0},System.Func{``0,System.Boolean},System.Boolean)">
            <summary>
            Add an all to a tally.
            </summary>
            <typeparam name="T">The type of the tally.</typeparam>
            <param name="this">The tally to add to.</param>
            <param name="cond">The condition for which to count an element.</param>
            <param name="break">Whether to break when an element is found to return false.</param>
            <returns><paramref name="this"/>, to allow piping.</returns>
        </member>
        <member name="M:WhetStone.Looping.TallierExtensions.TallyAll``2(WhetStone.Looping.TypeTally{``0,``1},System.Func{``0,System.Boolean},System.Boolean)">
            <summary>
            Add an all to a tally.
            </summary>
            <typeparam name="T">The type of the tally.</typeparam>
            <typeparam name="T0">The first return type of the tally.</typeparam>
            <param name="this">The tally to add to.</param>
            <param name="cond">The condition for which to count an element.</param>
            <param name="break">Whether to break when an element is found to return false.</param>
            <returns><paramref name="this"/>, to allow piping.</returns>
        </member>
        <member name="M:WhetStone.Looping.TallierExtensions.TallyAll``3(WhetStone.Looping.TypeTally{``0,``1,``2},System.Func{``0,System.Boolean},System.Boolean)">
            <summary>
            Add an all to a tally.
            </summary>
            <typeparam name="T">The type of the tally.</typeparam>
            <typeparam name="T0">The first return type of the tally.</typeparam>
            <typeparam name="T1">The second return type of the tally.</typeparam>
            <param name="this">The tally to add to.</param>
            <param name="cond">The condition for which to count an element.</param>
            <param name="break">Whether to break when an element is found to return false.</param>
            <returns><paramref name="this"/>, to allow piping.</returns>
        </member>
        <member name="M:WhetStone.Looping.TallierExtensions.TallyAll``4(WhetStone.Looping.TypeTally{``0,``1,``2,``3},System.Func{``0,System.Boolean},System.Boolean)">
            <summary>
            Add an all to a tally.
            </summary>
            <typeparam name="T">The type of the tally.</typeparam>
            <typeparam name="T0">The first return type of the tally.</typeparam>
            <typeparam name="T1">The second return type of the tally.</typeparam>
            <typeparam name="T2">The third return type of the tally.</typeparam>
            <param name="this">The tally to add to.</param>
            <param name="cond">The condition for which to count an element.</param>
            <param name="break">Whether to break when an element is found to return false.</param>
            <returns><paramref name="this"/>, to allow piping.</returns>
        </member>
        <member name="M:WhetStone.Looping.TallierExtensions.TallyAll``5(WhetStone.Looping.TypeTally{``0,``1,``2,``3,``4},System.Func{``0,System.Boolean},System.Boolean)">
            <summary>
            Add an all to a tally.
            </summary>
            <typeparam name="T">The type of the tally.</typeparam>
            <typeparam name="T0">The first return type of the tally.</typeparam>
            <typeparam name="T1">The second return type of the tally.</typeparam>
            <typeparam name="T2">The third return type of the tally.</typeparam>
            <typeparam name="T3">The fourth return type of the tally.</typeparam>
            <param name="this">The tally to add to.</param>
            <param name="cond">The condition for which to count an element.</param>
            <param name="break">Whether to break when an element is found to return false.</param>
            <returns><paramref name="this"/>, to allow piping.</returns>
        </member>
        <member name="M:WhetStone.Looping.TallierExtensions.TallyAll``6(WhetStone.Looping.TypeTally{``0,``1,``2,``3,``4,``5},System.Func{``0,System.Boolean},System.Boolean)">
            <summary>
            Add an all to a tally.
            </summary>
            <typeparam name="T">The type of the tally.</typeparam>
            <typeparam name="T0">The first return type of the tally.</typeparam>
            <typeparam name="T1">The second return type of the tally.</typeparam>
            <typeparam name="T2">The third return type of the tally.</typeparam>
            <typeparam name="T3">The fourth return type of the tally.</typeparam>
            <typeparam name="T4">The fifth return type of the tally.</typeparam>
            <param name="this">The tally to add to.</param>
            <param name="cond">The condition for which to count an element.</param>
            <param name="break">Whether to break when an element is found to return false.</param>
            <returns><paramref name="this"/>, to allow piping.</returns>
        </member>
        <member name="M:WhetStone.Looping.TallierExtensions.TallyAction``1(WhetStone.Looping.TypeTally{``0},System.Action{``0})">
            <summary>
            Add an ignored tally action to a tally.
            </summary>
            <typeparam name="T">The type of the tally.</typeparam>
            <param name="this">The tally to add to.</param>
            <param name="action">The <see cref="T:System.Action`1"/> to invoke on every element tallied.</param>
            <returns><paramref name="this"/>, to allow piping.</returns>
        </member>
        <member name="M:WhetStone.Looping.TallierExtensions.TallyAction``2(WhetStone.Looping.TypeTally{``0,``1},System.Action{``0})">
            <summary>
            Add an ignored tally action to a tally.
            </summary>
            <typeparam name="T">The type of the tally.</typeparam>
            <typeparam name="T0">The first return type of the tally.</typeparam>
            <param name="this">The tally to add to.</param>
            <param name="action">The <see cref="T:System.Action`1"/> to invoke on every element tallied.</param>
            <returns><paramref name="this"/>, to allow piping.</returns>
        </member>
        <member name="M:WhetStone.Looping.TallierExtensions.TallyAction``3(WhetStone.Looping.TypeTally{``0,``1,``2},System.Action{``0})">
            <summary>
            Add an ignored tally action to a tally.
            </summary>
            <typeparam name="T">The type of the tally.</typeparam>
            <typeparam name="T0">The first return type of the tally.</typeparam>
            <typeparam name="T1">The second return type of the tally.</typeparam>
            <param name="this">The tally to add to.</param>
            <param name="action">The <see cref="T:System.Action`1"/> to invoke on every element tallied.</param>
            <returns><paramref name="this"/>, to allow piping.</returns>
        </member>
        <member name="M:WhetStone.Looping.TallierExtensions.TallyAction``4(WhetStone.Looping.TypeTally{``0,``1,``2,``3},System.Action{``0})">
            <summary>
            Add an ignored tally action to a tally.
            </summary>
            <typeparam name="T">The type of the tally.</typeparam>
            <typeparam name="T0">The first return type of the tally.</typeparam>
            <typeparam name="T1">The second return type of the tally.</typeparam>
            <typeparam name="T2">The third return type of the tally.</typeparam>
            <param name="this">The tally to add to.</param>
            <param name="action">The <see cref="T:System.Action`1"/> to invoke on every element tallied.</param>
            <returns><paramref name="this"/>, to allow piping.</returns>
        </member>
        <member name="M:WhetStone.Looping.TallierExtensions.TallyAction``5(WhetStone.Looping.TypeTally{``0,``1,``2,``3,``4},System.Action{``0})">
            <summary>
            Add an ignored tally action to a tally.
            </summary>
            <typeparam name="T">The type of the tally.</typeparam>
            <typeparam name="T0">The first return type of the tally.</typeparam>
            <typeparam name="T1">The second return type of the tally.</typeparam>
            <typeparam name="T2">The third return type of the tally.</typeparam>
            <typeparam name="T3">The fourth return type of the tally.</typeparam>
            <param name="this">The tally to add to.</param>
            <param name="action">The <see cref="T:System.Action`1"/> to invoke on every element tallied.</param>
            <returns><paramref name="this"/>, to allow piping.</returns>
        </member>
        <member name="M:WhetStone.Looping.TallierExtensions.TallyAction``6(WhetStone.Looping.TypeTally{``0,``1,``2,``3,``4,``5},System.Action{``0})">
            <summary>
            Add an ignored tally action to a tally.
            </summary>
            <typeparam name="T">The type of the tally.</typeparam>
            <typeparam name="T0">The first return type of the tally.</typeparam>
            <typeparam name="T1">The second return type of the tally.</typeparam>
            <typeparam name="T2">The third return type of the tally.</typeparam>
            <typeparam name="T3">The fourth return type of the tally.</typeparam>
            <typeparam name="T4">The fifth return type of the tally.</typeparam>
            <param name="this">The tally to add to.</param>
            <param name="action">The <see cref="T:System.Action`1"/> to invoke on every element tallied.</param>
            <returns><paramref name="this"/>, to allow piping.</returns>
        </member>
        <member name="M:WhetStone.Looping.TallierExtensions.TallyAction``1(WhetStone.Looping.TypeTally{``0},System.Func{``0,System.Boolean})">
            <summary>
            Add an ignored tally action to a tally.
            </summary>
            <typeparam name="T">The type of the tally.</typeparam>
            <param name="this">The tally to add to.</param>
            <param name="action">The <see cref="T:System.Action`1"/> to invoke on every element tallied. The action returns whether or not to continue the tallying.</param>
            <returns><paramref name="this"/>, to allow piping.</returns>
        </member>
        <member name="M:WhetStone.Looping.TallierExtensions.TallyAction``2(WhetStone.Looping.TypeTally{``0,``1},System.Func{``0,System.Boolean})">
            <summary>
            Add an ignored tally action to a tally.
            </summary>
            <typeparam name="T">The type of the tally.</typeparam>
            <typeparam name="T0">The first return type of the tally.</typeparam>
            <param name="this">The tally to add to.</param>
            <param name="action">The <see cref="T:System.Action`1"/> to invoke on every element tallied. The action returns whether or not to continue the tallying.</param>
            <returns><paramref name="this"/>, to allow piping.</returns>
        </member>
        <member name="M:WhetStone.Looping.TallierExtensions.TallyAction``3(WhetStone.Looping.TypeTally{``0,``1,``2},System.Func{``0,System.Boolean})">
            <summary>
            Add an ignored tally action to a tally.
            </summary>
            <typeparam name="T">The type of the tally.</typeparam>
            <typeparam name="T0">The first return type of the tally.</typeparam>
            <typeparam name="T1">The second return type of the tally.</typeparam>
            <param name="this">The tally to add to.</param>
            <param name="action">The <see cref="T:System.Action`1"/> to invoke on every element tallied. The action returns whether or not to continue the tallying.</param>
            <returns><paramref name="this"/>, to allow piping.</returns>
        </member>
        <member name="M:WhetStone.Looping.TallierExtensions.TallyAction``4(WhetStone.Looping.TypeTally{``0,``1,``2,``3},System.Func{``0,System.Boolean})">
            <summary>
            Add an ignored tally action to a tally.
            </summary>
            <typeparam name="T">The type of the tally.</typeparam>
            <typeparam name="T0">The first return type of the tally.</typeparam>
            <typeparam name="T1">The second return type of the tally.</typeparam>
            <typeparam name="T2">The third return type of the tally.</typeparam>
            <param name="this">The tally to add to.</param>
            <param name="action">The <see cref="T:System.Action`1"/> to invoke on every element tallied. The action returns whether or not to continue the tallying.</param>
            <returns><paramref name="this"/>, to allow piping.</returns>
        </member>
        <member name="M:WhetStone.Looping.TallierExtensions.TallyAction``5(WhetStone.Looping.TypeTally{``0,``1,``2,``3,``4},System.Func{``0,System.Boolean})">
            <summary>
            Add an ignored tally action to a tally.
            </summary>
            <typeparam name="T">The type of the tally.</typeparam>
            <typeparam name="T0">The first return type of the tally.</typeparam>
            <typeparam name="T1">The second return type of the tally.</typeparam>
            <typeparam name="T2">The third return type of the tally.</typeparam>
            <typeparam name="T3">The fourth return type of the tally.</typeparam>
            <param name="this">The tally to add to.</param>
            <param name="action">The <see cref="T:System.Action`1"/> to invoke on every element tallied. The action returns whether or not to continue the tallying.</param>
            <returns><paramref name="this"/>, to allow piping.</returns>
        </member>
        <member name="M:WhetStone.Looping.TallierExtensions.TallyAction``6(WhetStone.Looping.TypeTally{``0,``1,``2,``3,``4,``5},System.Func{``0,System.Boolean})">
            <summary>
            Add an ignored tally action to a tally.
            </summary>
            <typeparam name="T">The type of the tally.</typeparam>
            <typeparam name="T0">The first return type of the tally.</typeparam>
            <typeparam name="T1">The second return type of the tally.</typeparam>
            <typeparam name="T2">The third return type of the tally.</typeparam>
            <typeparam name="T3">The fourth return type of the tally.</typeparam>
            <typeparam name="T4">The fifth return type of the tally.</typeparam>
            <param name="this">The tally to add to.</param>
            <param name="action">The <see cref="T:System.Action`1"/> to invoke on every element tallied. The action returns whether or not to continue the tallying.</param>
            <returns><paramref name="this"/>, to allow piping.</returns>
        </member>
        <member name="M:WhetStone.Looping.TallierExtensions.TallyFirst``1(WhetStone.Looping.TypeTally{``0},System.Func{``0,System.Boolean},``0,System.Boolean)">
            <summary>
            Add a first to a tally.
            </summary>
            <typeparam name="T">The type of the tally.</typeparam>
            <param name="this">The tally to add to.</param>
            <param name="cond">The condition for which to count an element.</param>
            <param name="initial">The initial result for when an element has not been found.</param>
            <param name="break">Whether to break when an element has been found.</param>
            <returns><paramref name="this"/>, to allow piping.</returns>
        </member>
        <member name="M:WhetStone.Looping.TallierExtensions.TallyFirst``2(WhetStone.Looping.TypeTally{``0,``1},System.Func{``0,System.Boolean},``0,System.Boolean)">
            <summary>
            Add a first to a tally.
            </summary>
            <typeparam name="T">The type of the tally.</typeparam>
            <typeparam name="T0">The first return type of the tally.</typeparam>
            <param name="this">The tally to add to.</param>
            <param name="cond">The condition for which to count an element.</param>
            <param name="initial">The initial result for when an element has not been found.</param>
            <param name="break">Whether to break when an element has been found.</param>
            <returns><paramref name="this"/>, to allow piping.</returns>
        </member>
        <member name="M:WhetStone.Looping.TallierExtensions.TallyFirst``3(WhetStone.Looping.TypeTally{``0,``1,``2},System.Func{``0,System.Boolean},``0,System.Boolean)">
            <summary>
            Add a first to a tally.
            </summary>
            <typeparam name="T">The type of the tally.</typeparam>
            <typeparam name="T0">The first return type of the tally.</typeparam>
            <typeparam name="T1">The second return type of the tally.</typeparam>
            <param name="this">The tally to add to.</param>
            <param name="cond">The condition for which to count an element.</param>
            <param name="initial">The initial result for when an element has not been found.</param>
            <param name="break">Whether to break when an element has been found.</param>
            <returns><paramref name="this"/>, to allow piping.</returns>
        </member>
        <member name="M:WhetStone.Looping.TallierExtensions.TallyFirst``4(WhetStone.Looping.TypeTally{``0,``1,``2,``3},System.Func{``0,System.Boolean},``0,System.Boolean)">
            <summary>
            Add a first to a tally.
            </summary>
            <typeparam name="T">The type of the tally.</typeparam>
            <typeparam name="T0">The first return type of the tally.</typeparam>
            <typeparam name="T1">The second return type of the tally.</typeparam>
            <typeparam name="T2">The third return type of the tally.</typeparam>
            <param name="this">The tally to add to.</param>
            <param name="cond">The condition for which to count an element.</param>
            <param name="initial">The initial result for when an element has not been found.</param>
            <param name="break">Whether to break when an element has been found.</param>
            <returns><paramref name="this"/>, to allow piping.</returns>
        </member>
        <member name="M:WhetStone.Looping.TallierExtensions.TallyFirst``5(WhetStone.Looping.TypeTally{``0,``1,``2,``3,``4},System.Func{``0,System.Boolean},``0,System.Boolean)">
            <summary>
            Add a first to a tally.
            </summary>
            <typeparam name="T">The type of the tally.</typeparam>
            <typeparam name="T0">The first return type of the tally.</typeparam>
            <typeparam name="T1">The second return type of the tally.</typeparam>
            <typeparam name="T2">The third return type of the tally.</typeparam>
            <typeparam name="T3">The fourth return type of the tally.</typeparam>
            <param name="this">The tally to add to.</param>
            <param name="cond">The condition for which to count an element.</param>
            <param name="initial">The initial result for when an element has not been found.</param>
            <param name="break">Whether to break when an element has been found.</param>
            <returns><paramref name="this"/>, to allow piping.</returns>
        </member>
        <member name="M:WhetStone.Looping.TallierExtensions.TallyFirst``6(WhetStone.Looping.TypeTally{``0,``1,``2,``3,``4,``5},System.Func{``0,System.Boolean},``0,System.Boolean)">
            <summary>
            Add a first to a tally.
            </summary>
            <typeparam name="T">The type of the tally.</typeparam>
            <typeparam name="T0">The first return type of the tally.</typeparam>
            <typeparam name="T1">The second return type of the tally.</typeparam>
            <typeparam name="T2">The third return type of the tally.</typeparam>
            <typeparam name="T3">The fourth return type of the tally.</typeparam>
            <typeparam name="T4">The fifth return type of the tally.</typeparam>
            <param name="this">The tally to add to.</param>
            <param name="cond">The condition for which to count an element.</param>
            <param name="initial">The initial result for when an element has not been found.</param>
            <param name="break">Whether to break when an element has been found.</param>
            <returns><paramref name="this"/>, to allow piping.</returns>
        </member>
        <member name="M:WhetStone.Looping.TallierExtensions.TallyLast``1(WhetStone.Looping.TypeTally{``0},System.Func{``0,System.Boolean},``0)">
            <summary>
            Add a last to a tally.
            </summary>
            <typeparam name="T">The type of the tally.</typeparam>
            <param name="this">The tally to add to.</param>
            <param name="cond">The condition for which to count an element.</param>
            <param name="initial">The initial result for when an element has not been found.</param>
            <returns><paramref name="this"/>, to allow piping.</returns>
        </member>
        <member name="M:WhetStone.Looping.TallierExtensions.TallyLast``2(WhetStone.Looping.TypeTally{``0,``1},System.Func{``0,System.Boolean},``0)">
            <summary>
            Add a last to a tally.
            </summary>
            <typeparam name="T">The type of the tally.</typeparam>
            <typeparam name="T0">The first return type of the tally.</typeparam>
            <param name="this">The tally to add to.</param>
            <param name="cond">The condition for which to count an element.</param>
            <param name="initial">The initial result for when an element has not been found.</param>
            <returns><paramref name="this"/>, to allow piping.</returns>
        </member>
        <member name="M:WhetStone.Looping.TallierExtensions.TallyLast``3(WhetStone.Looping.TypeTally{``0,``1,``2},System.Func{``0,System.Boolean},``0)">
            <summary>
            Add a last to a tally.
            </summary>
            <typeparam name="T">The type of the tally.</typeparam>
            <typeparam name="T0">The first return type of the tally.</typeparam>
            <typeparam name="T1">The second return type of the tally.</typeparam>
            <param name="this">The tally to add to.</param>
            <param name="cond">The condition for which to count an element.</param>
            <param name="initial">The initial result for when an element has not been found.</param>
            <returns><paramref name="this"/>, to allow piping.</returns>
        </member>
        <member name="M:WhetStone.Looping.TallierExtensions.TallyLast``4(WhetStone.Looping.TypeTally{``0,``1,``2,``3},System.Func{``0,System.Boolean},``0)">
            <summary>
            Add a last to a tally.
            </summary>
            <typeparam name="T">The type of the tally.</typeparam>
            <typeparam name="T0">The first return type of the tally.</typeparam>
            <typeparam name="T1">The second return type of the tally.</typeparam>
            <typeparam name="T2">The third return type of the tally.</typeparam>
            <param name="this">The tally to add to.</param>
            <param name="cond">The condition for which to count an element.</param>
            <param name="initial">The initial result for when an element has not been found.</param>
            <returns><paramref name="this"/>, to allow piping.</returns>
        </member>
        <member name="M:WhetStone.Looping.TallierExtensions.TallyLast``5(WhetStone.Looping.TypeTally{``0,``1,``2,``3,``4},System.Func{``0,System.Boolean},``0)">
            <summary>
            Add a last to a tally.
            </summary>
            <typeparam name="T">The type of the tally.</typeparam>
            <typeparam name="T0">The first return type of the tally.</typeparam>
            <typeparam name="T1">The second return type of the tally.</typeparam>
            <typeparam name="T2">The third return type of the tally.</typeparam>
            <typeparam name="T3">The fourth return type of the tally.</typeparam>
            <param name="this">The tally to add to.</param>
            <param name="cond">The condition for which to count an element.</param>
            <param name="initial">The initial result for when an element has not been found.</param>
            <returns><paramref name="this"/>, to allow piping.</returns>
        </member>
        <member name="M:WhetStone.Looping.TallierExtensions.TallyLast``6(WhetStone.Looping.TypeTally{``0,``1,``2,``3,``4,``5},System.Func{``0,System.Boolean},``0)">
            <summary>
            Add a last to a tally.
            </summary>
            <typeparam name="T">The type of the tally.</typeparam>
            <typeparam name="T0">The first return type of the tally.</typeparam>
            <typeparam name="T1">The second return type of the tally.</typeparam>
            <typeparam name="T2">The third return type of the tally.</typeparam>
            <typeparam name="T3">The fourth return type of the tally.</typeparam>
            <typeparam name="T4">The fifth return type of the tally.</typeparam>
            <param name="this">The tally to add to.</param>
            <param name="cond">The condition for which to count an element.</param>
            <param name="initial">The initial result for when an element has not been found.</param>
            <returns><paramref name="this"/>, to allow piping.</returns>
        </member>
        <member name="M:WhetStone.Looping.TallierExtensions.Tally``1(System.Collections.Generic.IEnumerable{``0})">
            <summary>
            Create a tally using an <see cref="T:System.Collections.Generic.IEnumerable`1"/> as a default source.
            </summary>
            <typeparam name="T">The type of the <see cref="T:System.Collections.Generic.IEnumerable`1"/>.</typeparam>
            <param name="this">The default source.</param>
            <returns>A new tally with <paramref name="this"/> as the default source.</returns>
        </member>
        <member name="T:WhetStone.Looping.takeWhile">
            <summary>
            A static container for identity method
            </summary>
        </member>
        <member name="M:WhetStone.Looping.takeWhile.TakeWhileInclusive``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Boolean})">
            <summary>
            Take from an <see cref="T:System.Collections.Generic.IEnumerable`1"/> until an element does not uphold a predicate. Then take that element as well.
            </summary>
            <typeparam name="T">The type of the <see cref="T:System.Collections.Generic.IEnumerable`1"/></typeparam>
            <param name="this">The <see cref="T:System.Collections.Generic.IEnumerable`1"/> to take from.</param>
            <param name="pred">The predicate all but the last element must uphold.</param>
            <returns>All the first-most elements that uphold <paramref name="pred"/>, and the first that does not.</returns>
        </member>
        <member name="T:WhetStone.Looping.topologicalSort">
            <summary>
            A static container for identity method
            </summary>
        </member>
        <member name="M:WhetStone.Looping.topologicalSort.TopologicalSort``2(System.Collections.Generic.IEnumerable{System.ValueTuple{``0,``1}},System.Boolean)">
            <summary>
            Orders elements in an <see cref="T:System.Collections.Generic.IEnumerable`1"/> so that each element appears after its dependents.
            </summary>
            <typeparam name="T">The type of the elements.</typeparam>
            <typeparam name="TDependencies">The type of the dependency collection.</typeparam>
            <param name="elements">An <see cref="T:System.Collections.Generic.IEnumerable`1"/> of tuples. The first element of the tuple is the element itself, the second is an <see cref="T:System.Collections.Generic.ICollection`1"/> of its dependents.</param>
            <param name="allowMissingDependancy">Whether to ignore dependencies that are not in <paramref name="elements"/>.</param>
            <returns>All the elements in <paramref name="elements"/> ordered topologically.</returns>
            <exception cref="T:System.ArgumentException">If <paramref name="elements"/> contains cyclical dependencies or a dependency that does not exist in <paramref name="elements"/>.</exception>
            <remarks>A dependency collection can be empty or <see langword="null"/> to indicate no dependency.</remarks>
        </member>
        <member name="T:WhetStone.Looping.TypeTally`1">
            <summary>
            A tally for no output types.
            </summary>
            <typeparam name="T">The type of the <see cref="T:System.Collections.Generic.IEnumerable`1"/> to tally.</typeparam>
        </member>
        <member name="M:WhetStone.Looping.TypeTally`1.#ctor(System.Collections.Generic.IEnumerable{`0})">
            <summary>
            Constructor
            </summary>
            <param name="src">The default <see cref="T:System.Collections.Generic.IEnumerable`1"/> to tally in case none are provided. <see langword="null"/> for no default.</param>
        </member>
        <member name="M:WhetStone.Looping.TypeTally`1.Do(System.Collections.Generic.IEnumerable{`0})">
            <summary>
            Perform the tally, tallying all the <see cref="T:WhetStone.Looping.ITallier`1"/>s added until the <see cref="T:System.Collections.Generic.IEnumerable`1"/> is done or any of the <see cref="T:WhetStone.Looping.ITallier`1"/>s have broken.
            </summary>
            <param name="source">The <see cref="T:System.Collections.Generic.IEnumerable`1"/> to tally, or <see langword="null"/> for default.</param>
        </member>
        <member name="M:WhetStone.Looping.TypeTally`1.Add``1(WhetStone.Looping.ITallier{`0})">
            <summary>
            Add an <see cref="T:WhetStone.Looping.ITallier`1"/> to the Tally.
            </summary>
            <typeparam name="T0">The <see cref="T:WhetStone.Looping.ITallier`1"/>'s output type.</typeparam>
            <param name="tal">The <see cref="T:WhetStone.Looping.ITallier`1"/> to add.</param>
            <returns>The tally, with a new type wrapper.</returns>
        </member>
        <member name="M:WhetStone.Looping.TypeTally`1.AddHidden(WhetStone.Looping.ITallier{`0})">
            <summary>
            Add an <see cref="T:WhetStone.Looping.ITallier`1"/> to the Tally, but without changing the output type.
            </summary>
            <param name="tal">The <see cref="T:WhetStone.Looping.ITallier`1"/> to add.</param>
            <returns>The tally, to allow piping.</returns>
        </member>
        <member name="T:WhetStone.Looping.TypeTally`2">
            <summary>
            A tally for a single output type.
            </summary>
            <typeparam name="T">The type of the <see cref="T:System.Collections.Generic.IEnumerable`1"/> to tally.</typeparam>
            <typeparam name="T0">The first output type.</typeparam>
        </member>
        <member name="M:WhetStone.Looping.TypeTally`2.Do(System.Collections.Generic.IEnumerable{`0})">
            <summary>
            Perform the tally, tallying all the <see cref="T:WhetStone.Looping.ITallier`1"/>s added until the <see cref="T:System.Collections.Generic.IEnumerable`1"/> is done or any of the <see cref="T:WhetStone.Looping.ITallier`1"/>s have broken.
            </summary>
            <param name="source">The <see cref="T:System.Collections.Generic.IEnumerable`1"/> to tally, or <see langword="null"/> for default.</param>
            <returns>The Tallier's return value.</returns>
        </member>
        <member name="M:WhetStone.Looping.TypeTally`2.Add``1(WhetStone.Looping.ITallier{`0})">
            <summary>
            Add an <see cref="T:WhetStone.Looping.ITallier`1"/> to the Tally.
            </summary>
            <typeparam name="T1">The <see cref="T:WhetStone.Looping.ITallier`1"/>'s output type.</typeparam>
            <param name="tal">The <see cref="T:WhetStone.Looping.ITallier`1"/> to add.</param>
            <returns>The tally, with a new type wrapper.</returns>
        </member>
        <member name="M:WhetStone.Looping.TypeTally`2.AddHidden(WhetStone.Looping.ITallier{`0})">
            <summary>
            Add an <see cref="T:WhetStone.Looping.ITallier`1"/> to the Tally, but without changing the output type.
            </summary>
            <param name="tal">The <see cref="T:WhetStone.Looping.ITallier`1"/> to add.</param>
            <returns>The tally, to allow piping.</returns>
        </member>
        <member name="T:WhetStone.Looping.TypeTally`3">
            <summary>
            A tally for two output types.
            </summary>
            <typeparam name="T">The type of the <see cref="T:System.Collections.Generic.IEnumerable`1"/> to tally.</typeparam>
            <typeparam name="T0">The first output type.</typeparam>
            <typeparam name="T1">The second output type.</typeparam>
        </member>
        <member name="M:WhetStone.Looping.TypeTally`3.Do(System.Collections.Generic.IEnumerable{`0})">
            <summary>
            Perform the tally, tallying all the <see cref="T:WhetStone.Looping.ITallier`1"/>s added until the <see cref="T:System.Collections.Generic.IEnumerable`1"/> is done or any of the <see cref="T:WhetStone.Looping.ITallier`1"/>s have broken.
            </summary>
            <param name="source">The <see cref="T:System.Collections.Generic.IEnumerable`1"/> to tally, or <see langword="null"/> for default.</param>
            <returns>The Tallier's return values in a tuple.</returns>
        </member>
        <member name="M:WhetStone.Looping.TypeTally`3.Add``1(WhetStone.Looping.ITallier{`0})">
            <summary>
            Add an <see cref="T:WhetStone.Looping.ITallier`1"/> to the Tally.
            </summary>
            <typeparam name="T2">The <see cref="T:WhetStone.Looping.ITallier`1"/>'s output type.</typeparam>
            <param name="tal">The <see cref="T:WhetStone.Looping.ITallier`1"/> to add.</param>
            <returns>The tally, with a new type wrapper.</returns>
        </member>
        <member name="M:WhetStone.Looping.TypeTally`3.AddHidden(WhetStone.Looping.ITallier{`0})">
            <summary>
            Add an <see cref="T:WhetStone.Looping.ITallier`1"/> to the Tally, but without changing the output type.
            </summary>
            <param name="tal">The <see cref="T:WhetStone.Looping.ITallier`1"/> to add.</param>
            <returns>The tally, to allow piping.</returns>
        </member>
        <member name="T:WhetStone.Looping.TypeTally`4">
            <summary>
            A tally for three output types.
            </summary>
            <typeparam name="T">The type of the <see cref="T:System.Collections.Generic.IEnumerable`1"/> to tally.</typeparam>
            <typeparam name="T0">The first output type.</typeparam>
            <typeparam name="T1">The second output type.</typeparam>
            <typeparam name="T2">The third output type.</typeparam>
        </member>
        <member name="M:WhetStone.Looping.TypeTally`4.Do(System.Collections.Generic.IEnumerable{`0})">
            <summary>
            Perform the tally, tallying all the <see cref="T:WhetStone.Looping.ITallier`1"/>s added until the <see cref="T:System.Collections.Generic.IEnumerable`1"/> is done or any of the <see cref="T:WhetStone.Looping.ITallier`1"/>s have broken.
            </summary>
            <param name="source">The <see cref="T:System.Collections.Generic.IEnumerable`1"/> to tally, or <see langword="null"/> for default.</param>
            <returns>The Tallier's return values in a tuple.</returns>
        </member>
        <member name="M:WhetStone.Looping.TypeTally`4.Add``1(WhetStone.Looping.ITallier{`0})">
            <summary>
            Add an <see cref="T:WhetStone.Looping.ITallier`1"/> to the Tally.
            </summary>
            <typeparam name="T3">The <see cref="T:WhetStone.Looping.ITallier`1"/>'s output type.</typeparam>
            <param name="tal">The <see cref="T:WhetStone.Looping.ITallier`1"/> to add.</param>
            <returns>The tally, with a new type wrapper.</returns>
        </member>
        <member name="M:WhetStone.Looping.TypeTally`4.AddHidden(WhetStone.Looping.ITallier{`0})">
            <summary>
            Add an <see cref="T:WhetStone.Looping.ITallier`1"/> to the Tally, but without changing the output type.
            </summary>
            <param name="tal">The <see cref="T:WhetStone.Looping.ITallier`1"/> to add.</param>
            <returns>The tally, to allow piping.</returns>
        </member>
        <member name="T:WhetStone.Looping.TypeTally`5">
            <summary>
            A tally for three output types.
            </summary>
            <typeparam name="T">The type of the <see cref="T:System.Collections.Generic.IEnumerable`1"/> to tally.</typeparam>
            <typeparam name="T0">The first output type.</typeparam>
            <typeparam name="T1">The second output type.</typeparam>
            <typeparam name="T2">The third output type.</typeparam>
            <typeparam name="T3">The fourth output type.</typeparam>
        </member>
        <member name="M:WhetStone.Looping.TypeTally`5.Do(System.Collections.Generic.IEnumerable{`0})">
            <summary>
            Perform the tally, tallying all the <see cref="T:WhetStone.Looping.ITallier`1"/>s added until the <see cref="T:System.Collections.Generic.IEnumerable`1"/> is done or any of the <see cref="T:WhetStone.Looping.ITallier`1"/>s have broken.
            </summary>
            <param name="source">The <see cref="T:System.Collections.Generic.IEnumerable`1"/> to tally, or <see langword="null"/> for default.</param>
            <returns>The Tallier's return values in a tuple.</returns>
        </member>
        <member name="M:WhetStone.Looping.TypeTally`5.Add``1(WhetStone.Looping.ITallier{`0})">
            <summary>
            Add an <see cref="T:WhetStone.Looping.ITallier`1"/> to the Tally.
            </summary>
            <typeparam name="T4">The <see cref="T:WhetStone.Looping.ITallier`1"/>'s output type.</typeparam>
            <param name="tal">The <see cref="T:WhetStone.Looping.ITallier`1"/> to add.</param>
            <returns>The tally, with a new type wrapper.</returns>
        </member>
        <member name="M:WhetStone.Looping.TypeTally`5.AddHidden(WhetStone.Looping.ITallier{`0})">
            <summary>
            Add an <see cref="T:WhetStone.Looping.ITallier`1"/> to the Tally, but without changing the output type.
            </summary>
            <param name="tal">The <see cref="T:WhetStone.Looping.ITallier`1"/> to add.</param>
            <returns>The tally, to allow piping.</returns>
        </member>
        <member name="T:WhetStone.Looping.TypeTally`6">
            <summary>
            A tally for five output types.
            </summary>
            <typeparam name="T">The type of the <see cref="T:System.Collections.Generic.IEnumerable`1"/> to tally.</typeparam>
            <typeparam name="T0">The first output type.</typeparam>
            <typeparam name="T1">The second output type.</typeparam>
            <typeparam name="T2">The third output type.</typeparam>
            <typeparam name="T3">The fourth output type.</typeparam>
            <typeparam name="T4">The fifth output type.</typeparam>
        </member>
        <member name="M:WhetStone.Looping.TypeTally`6.Do(System.Collections.Generic.IEnumerable{`0})">
            <summary>
            Perform the tally, tallying all the <see cref="T:WhetStone.Looping.ITallier`1"/>s added until the <see cref="T:System.Collections.Generic.IEnumerable`1"/> is done or any of the <see cref="T:WhetStone.Looping.ITallier`1"/>s have broken.
            </summary>
            <param name="source">The <see cref="T:System.Collections.Generic.IEnumerable`1"/> to tally, or <see langword="null"/> for default.</param>
            <returns>The Tallier's return values in a tuple.</returns>
        </member>
        <member name="M:WhetStone.Looping.TypeTally`6.Add(WhetStone.Looping.ITallier{`0})">
            <summary>
            Add an <see cref="T:WhetStone.Looping.ITallier`1"/> to the Tally.
            </summary>
            <param name="tal">The <see cref="T:WhetStone.Looping.ITallier`1"/> to add.</param>
            <returns>The tally, without a type wrapper.</returns>
        </member>
        <member name="M:WhetStone.Looping.TypeTally`6.AddHidden(WhetStone.Looping.ITallier{`0})">
            <summary>
            Add an <see cref="T:WhetStone.Looping.ITallier`1"/> to the Tally, but without changing the output type.
            </summary>
            <param name="tal">The <see cref="T:WhetStone.Looping.ITallier`1"/> to add.</param>
            <returns>The tally, to allow piping.</returns>
        </member>
        <member name="T:WhetStone.Looping.unZip">
            <summary>
            A static container for identity method
            </summary>
        </member>
        <member name="M:WhetStone.Looping.unZip.UnZip``2(System.Collections.Generic.IEnumerable{System.Tuple{``0,``1}})">
            <summary>
            Splits an <see cref="T:System.Collections.Generic.IEnumerable`1"/> of <see cref="T:System.Tuple"/>s to separate <see cref="T:System.Collections.Generic.IEnumerable`1"/>s.
            </summary>
            <typeparam name="T1">The first type of the <see cref="T:System.Tuple"/>.</typeparam>
            <typeparam name="T2">The second type of the <see cref="T:System.Tuple"/>.</typeparam>
            <param name="this">The <see cref="T:System.Collections.Generic.IEnumerable`1"/> to split.</param>
            <returns>The individual <see cref="T:System.Collections.Generic.IEnumerable`1"/>s.</returns>
        </member>
        <member name="M:WhetStone.Looping.unZip.UnZip``2(System.Collections.Generic.IList{System.Tuple{``0,``1}})">
            <summary>
            Splits an <see cref="T:System.Collections.Generic.IList`1"/> of <see cref="T:System.Tuple"/>s to separate <see cref="T:System.Collections.Generic.IList`1"/>s.
            </summary>
            <typeparam name="T1">The first type of the <see cref="T:System.Tuple"/>.</typeparam>
            <typeparam name="T2">The second type of the <see cref="T:System.Tuple"/>.</typeparam>
            <param name="this">The <see cref="T:System.Collections.Generic.IList`1"/> to split.</param>
            <returns>The individual <see cref="T:System.Collections.Generic.IList`1"/>s.</returns>
        </member>
        <member name="M:WhetStone.Looping.unZip.UnZip``3(System.Collections.Generic.IEnumerable{System.Tuple{``0,``1,``2}})">
            <summary>
            Splits an <see cref="T:System.Collections.Generic.IEnumerable`1"/> of <see cref="T:System.Tuple"/>s to separate <see cref="T:System.Collections.Generic.IEnumerable`1"/>s.
            </summary>
            <typeparam name="T1">The first type of the <see cref="T:System.Tuple"/>.</typeparam>
            <typeparam name="T2">The second type of the <see cref="T:System.Tuple"/>.</typeparam>
            <typeparam name="T3">The third type of the <see cref="T:System.Tuple"/>.</typeparam>
            <param name="this">The <see cref="T:System.Collections.Generic.IEnumerable`1"/> to split.</param>
            <returns>The individual <see cref="T:System.Collections.Generic.IEnumerable`1"/>s.</returns>
        </member>
        <member name="M:WhetStone.Looping.unZip.UnZip``3(System.Collections.Generic.IList{System.Tuple{``0,``1,``2}})">
            <summary>
            Splits an <see cref="T:System.Collections.Generic.IList`1"/> of <see cref="T:System.Tuple"/>s to separate <see cref="T:System.Collections.Generic.IList`1"/>s.
            </summary>
            <typeparam name="T1">The first type of the <see cref="T:System.Tuple"/>.</typeparam>
            <typeparam name="T2">The second type of the <see cref="T:System.Tuple"/>.</typeparam>
            <typeparam name="T3">The third type of the <see cref="T:System.Tuple"/>.</typeparam>
            <param name="this">The <see cref="T:System.Collections.Generic.IList`1"/> to split.</param>
            <returns>The individual <see cref="T:System.Collections.Generic.IList`1"/>s.</returns>
        </member>
        <member name="M:WhetStone.Looping.unZip.UnZip``4(System.Collections.Generic.IEnumerable{System.Tuple{``0,``1,``2,``3}})">
            <summary>
            Splits an <see cref="T:System.Collections.Generic.IEnumerable`1"/> of <see cref="T:System.Tuple"/>s to separate <see cref="T:System.Collections.Generic.IEnumerable`1"/>s.
            </summary>
            <typeparam name="T1">The first type of the <see cref="T:System.Tuple"/>.</typeparam>
            <typeparam name="T2">The second type of the <see cref="T:System.Tuple"/>.</typeparam>
            <typeparam name="T3">The third type of the <see cref="T:System.Tuple"/>.</typeparam>
            <typeparam name="T4">The fourth type of the <see cref="T:System.Tuple"/>.</typeparam>
            <param name="this">The <see cref="T:System.Collections.Generic.IEnumerable`1"/> to split.</param>
            <returns>The individual <see cref="T:System.Collections.Generic.IEnumerable`1"/>s.</returns>
        </member>
        <member name="M:WhetStone.Looping.unZip.UnZip``4(System.Collections.Generic.IList{System.Tuple{``0,``1,``2,``3}})">
            <summary>
            Splits an <see cref="T:System.Collections.Generic.IList`1"/> of <see cref="T:System.Tuple"/>s to separate <see cref="T:System.Collections.Generic.IList`1"/>s.
            </summary>
            <typeparam name="T1">The first type of the <see cref="T:System.Tuple"/>.</typeparam>
            <typeparam name="T2">The second type of the <see cref="T:System.Tuple"/>.</typeparam>
            <typeparam name="T3">The third type of the <see cref="T:System.Tuple"/>.</typeparam>
            <typeparam name="T4">The fourth type of the <see cref="T:System.Tuple"/>.</typeparam>
            <param name="this">The <see cref="T:System.Collections.Generic.IList`1"/> to split.</param>
            <returns>The individual <see cref="T:System.Collections.Generic.IList`1"/>s.</returns>
        </member>
        <member name="M:WhetStone.Looping.unZip.UnZip``5(System.Collections.Generic.IEnumerable{System.Tuple{``0,``1,``2,``3,``4}})">
            <summary>
            Splits an <see cref="T:System.Collections.Generic.IEnumerable`1"/> of <see cref="T:System.Tuple"/>s to separate <see cref="T:System.Collections.Generic.IEnumerable`1"/>s.
            </summary>
            <typeparam name="T1">The first type of the <see cref="T:System.Tuple"/>.</typeparam>
            <typeparam name="T2">The second type of the <see cref="T:System.Tuple"/>.</typeparam>
            <typeparam name="T3">The third type of the <see cref="T:System.Tuple"/>.</typeparam>
            <typeparam name="T4">The fourth type of the <see cref="T:System.Tuple"/>.</typeparam>
            <typeparam name="T5">The fifth type of the <see cref="T:System.Tuple"/>.</typeparam>
            <param name="this">The <see cref="T:System.Collections.Generic.IEnumerable`1"/> to split.</param>
            <returns>The individual <see cref="T:System.Collections.Generic.IEnumerable`1"/>s.</returns>
        </member>
        <member name="M:WhetStone.Looping.unZip.UnZip``5(System.Collections.Generic.IList{System.Tuple{``0,``1,``2,``3,``4}})">
            <summary>
            Splits an <see cref="T:System.Collections.Generic.IList`1"/> of <see cref="T:System.Tuple"/>s to separate <see cref="T:System.Collections.Generic.IList`1"/>s.
            </summary>
            <typeparam name="T1">The first type of the <see cref="T:System.Tuple"/>.</typeparam>
            <typeparam name="T2">The second type of the <see cref="T:System.Tuple"/>.</typeparam>
            <typeparam name="T3">The third type of the <see cref="T:System.Tuple"/>.</typeparam>
            <typeparam name="T4">The fourth type of the <see cref="T:System.Tuple"/>.</typeparam>
            <typeparam name="T5">The fifth type of the <see cref="T:System.Tuple"/>.</typeparam>
            <param name="this">The <see cref="T:System.Collections.Generic.IList`1"/> to split.</param>
            <returns>The individual <see cref="T:System.Collections.Generic.IList`1"/>s.</returns>
        </member>
        <member name="T:WhetStone.Looping.split">
            <summary>
            A static container for identity method
            </summary>
        </member>
        <member name="M:WhetStone.Looping.split.Split``1(System.Collections.Generic.IEnumerable{``0},System.Func{System.Collections.Generic.IList{``0},``0,System.Boolean})">
            <overloads>Split an enumerable into sub-enumerables.</overloads>
            <summary>
            Split an <see cref="T:System.Collections.Generic.IEnumerable`1"/> into sublists by capturing.
            </summary>
            <typeparam name="T">The type of the  <see cref="T:System.Collections.Generic.IEnumerable`1"/>.</typeparam>
            <param name="this">The <see cref="T:System.Collections.Generic.IEnumerable`1"/> to split.</param>
            <param name="capture">The capture function, that accepts an existing sub-list and an element, and returns whether the element is the next part of the sub-list.</param>
            <returns>A new <see cref="T:System.Collections.Generic.IList`1"/>, splitting <paramref name="this"/> by the <paramref name="capture"/> function.</returns>
        </member>
        <member name="M:WhetStone.Looping.split.Split``1(System.Collections.Generic.IList{``0},System.Func{System.Collections.Generic.IList{``0},``0,System.Boolean})">
            <overloads>Split an enumerable into sub-enumerables.</overloads>
            <summary>
            Split an <see cref="T:System.Collections.Generic.IList`1"/> into sublists by capturing.
            </summary>
            <typeparam name="T">The type of the  <see cref="T:System.Collections.Generic.IList`1"/>.</typeparam>
            <param name="this">The <see cref="T:System.Collections.Generic.IList`1"/> to split.</param>
            <param name="capture">The capture function, that accepts an existing sub-list and an element, and returns whether the element is the next part of the sub-list.</param>
            <returns>A new <see cref="T:System.Collections.Generic.IList`1"/>, splitting <paramref name="this"/> by the <paramref name="capture"/> function.</returns>
        </member>
        <member name="M:WhetStone.Looping.split.Split``1(System.Collections.Generic.IEnumerable{``0},``0,System.Collections.Generic.IEqualityComparer{``0})">
            <summary>
            Split an <see cref="T:System.Collections.Generic.IEnumerable`1"/> by a divisor element.
            </summary>
            <typeparam name="T">The element of the <see cref="T:System.Collections.Generic.IEnumerable`1"/>.</typeparam>
            <param name="this">The <see cref="T:System.Collections.Generic.IEnumerable`1"/> to split.</param>
            <param name="divisor">The divisor element.</param>
            <param name="comp">The <see cref="T:System.Collections.Generic.IEqualityComparer`1"/> to use to compare elements. <see langword="null"/> for default.</param>
            <returns><paramref name="this"/> split by <paramref name="divisor"/>.</returns>
        </member>
        <member name="M:WhetStone.Looping.split.Split``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Boolean})">
            <summary>
            Split an <see cref="T:System.Collections.Generic.IEnumerable`1"/> by a divisor element.
            </summary>
            <typeparam name="T">The element of the <see cref="T:System.Collections.Generic.IEnumerable`1"/>.</typeparam>
            <param name="this">The <see cref="T:System.Collections.Generic.IEnumerable`1"/> to split.</param>
            <param name="divisorDetector">A method to get whether an element is a divisor element.</param>
            <returns><paramref name="this"/> as split by divisors.</returns>
        </member>
        <member name="T:WhetStone.Looping.step">
            <summary>
            A static container for identity method
            </summary>
        </member>
        <member name="M:WhetStone.Looping.step.Step``1(System.Collections.Generic.IEnumerable{``0},System.Int32,System.Int32)">
            <summary>
            Strides an <see cref="T:System.Collections.Generic.IEnumerable`1"/> in steps.
            </summary>
            <typeparam name="T">The type of the <see cref="T:System.Collections.Generic.IEnumerable`1"/>.</typeparam>
            <param name="this">The <see cref="T:System.Collections.Generic.IEnumerable`1"/> to stride.</param>
            <param name="step">The distance between indices stridden.</param>
            <param name="start">The offset of the indices.</param>
            <returns>An <see cref="T:System.Collections.Generic.IEnumerable`1"/> stridden in <paramref name="step"/> steps and <paramref name="start"/> offset.</returns>
        </member>
        <member name="T:WhetStone.Looping.subsets">
            <summary>
            A static container for identity method
            </summary>
        </member>
        <member name="M:WhetStone.Looping.subsets.SubSets``1(System.Collections.Generic.IEnumerable{``0})">
            <summary>
            Get all the subsets from an <see cref="T:System.Collections.Generic.IEnumerable`1"/>'s elements.
            </summary>
            <typeparam name="T">The type of the <see cref="T:System.Collections.Generic.IEnumerable`1"/>.</typeparam>
            <param name="this">The <see cref="T:System.Collections.Generic.IEnumerable`1"/> to use.</param>
            <returns>All the (element-wise) subsets of <paramref name="this"/>.</returns>
        </member>
        <member name="M:WhetStone.Looping.subsets.SubSets``1(System.Collections.Generic.IList{``0})">
            <summary>
            Get all the subsets from an <see cref="T:System.Collections.Generic.IList`1"/>'s elements.
            </summary>
            <typeparam name="T">The type of the <see cref="T:System.Collections.Generic.IList`1"/>.</typeparam>
            <param name="this">The <see cref="T:System.Collections.Generic.IList`1"/> to use.</param>
            <returns>All the (element-wise) subsets of <paramref name="this"/>.</returns>
        </member>
        <member name="M:WhetStone.Looping.subsets.SubSets``1(System.Collections.Generic.IEnumerable{``0},System.Int32)">
            <summary>
            Get all the subsets from an <see cref="T:System.Collections.Generic.IEnumerable`1"/>'s elements of a specific size.
            </summary>
            <typeparam name="T">The type of the <see cref="T:System.Collections.Generic.IEnumerable`1"/>.</typeparam>
            <param name="this">The <see cref="T:System.Collections.Generic.IEnumerable`1"/> to use.</param>
            <param name="setSize">The size of the subsets.</param>
            <returns>All the (element-wise) subsets of <paramref name="this"/> of size <paramref name="setSize"/>.</returns>
        </member>
        <member name="M:WhetStone.Looping.subsets.SubSets``1(System.Collections.Generic.IList{``0},System.Int32)">
            <summary>
            Get all the subsets from an <see cref="T:System.Collections.Generic.IList`1"/>'s elements of a specific size.
            </summary>
            <typeparam name="T">The type of the <see cref="T:System.Collections.Generic.IList`1"/>.</typeparam>
            <param name="this">The <see cref="T:System.Collections.Generic.IList`1"/> to use.</param>
            <param name="setSize">The size of the subsets.</param>
            <returns>All the (element-wise) subsets of <paramref name="this"/> of size <paramref name="setSize"/>.</returns>
        </member>
        <member name="T:WhetStone.Looping.toDictionary">
            <summary>
            A static container for identity method
            </summary>
        </member>
        <member name="M:WhetStone.Looping.toDictionary.ToDictionary``2(System.Collections.Generic.IEnumerable{System.Collections.Generic.KeyValuePair{``0,``1}})">
            <summary>
            Convert an <see cref="T:System.Collections.Generic.IEnumerable`1"/> of <see cref="T:System.Collections.Generic.KeyValuePair`2"/> into an <see cref="T:System.Collections.Generic.IDictionary`2"/>.
            </summary>
            <typeparam name="K">The type of the key.</typeparam>
            <typeparam name="V">The type of the value.</typeparam>
            <param name="this">The <see cref="T:System.Collections.Generic.IEnumerable`1"/> to convert.</param>
            <returns><paramref name="this"/> converted to an <see cref="T:System.Collections.Generic.IDictionary`2"/>.</returns>
        </member>
        <member name="M:WhetStone.Looping.toDictionary.ToDictionary``2(System.Collections.Generic.IEnumerable{System.Tuple{``0,``1}})">
            <summary>
            Convert an <see cref="T:System.Collections.Generic.IEnumerable`1"/> of <see cref="T:System.Tuple`2"/> into an <see cref="T:System.Collections.Generic.IDictionary`2"/>.
            </summary>
            <typeparam name="K">The type of the key.</typeparam>
            <typeparam name="V">The type of the value.</typeparam>
            <param name="this">The <see cref="T:System.Collections.Generic.IEnumerable`1"/> to convert.</param>
            <returns><paramref name="this"/> converted to an <see cref="T:System.Collections.Generic.IDictionary`2"/>.</returns>
        </member>
        <member name="M:WhetStone.Looping.toDictionary.ToDictionary``2(System.Collections.Generic.IEnumerable{System.ValueTuple{``0,``1}})">
            <summary>
            Convert an <see cref="T:System.Collections.Generic.IEnumerable`1"/> of <see cref="T:System.Tuple`2"/> into an <see cref="T:System.Collections.Generic.IDictionary`2"/>.
            </summary>
            <typeparam name="K">The type of the key.</typeparam>
            <typeparam name="V">The type of the value.</typeparam>
            <param name="this">The <see cref="T:System.Collections.Generic.IEnumerable`1"/> to convert.</param>
            <returns><paramref name="this"/> converted to an <see cref="T:System.Collections.Generic.IDictionary`2"/>.</returns>
        </member>
        <member name="T:WhetStone.Looping.toLookup">
            <summary>
            A static container for identity method
            </summary>
        </member>
        <member name="M:WhetStone.Looping.toLookup.ToLookup``1(System.Collections.Generic.IEnumerable{``0},System.Collections.Generic.IEqualityComparer{``0})">
            <summary>
            Convert an <see cref="T:System.Collections.Generic.IEnumerable`1"/> to <see cref="T:System.Linq.ILookup`2"/> with identity.
            </summary>
            <typeparam name="T">The type of the <see cref="T:System.Collections.Generic.IEnumerable`1"/>.</typeparam>
            <param name="this">The <see cref="T:System.Collections.Generic.IEnumerable`1"/> to convert.</param>
            <param name="matcher">The <see cref="T:System.Collections.Generic.IEqualityComparer`1"/> to use.</param>
            <returns>The equivalence classes for <paramref name="this"/> under <paramref name="matcher"/></returns>
        </member>
        <member name="T:WhetStone.Looping.toObjArray">
            <summary>
            A static container for identity method
            </summary>
        </member>
        <member name="M:WhetStone.Looping.toObjArray.ToObjArray(System.Collections.IEnumerable)">
            <summary>
            Convert a non-generic <see cref="T:System.Collections.IEnumerator"/> to an <see cref="T:System.Array"/> of <see cref="T:System.Object"/>s.
            </summary>
            <param name="this">The non-generic <see cref="T:System.Collections.IEnumerator"/> to convert.</param>
            <returns>An <see cref="T:System.Object"/> <see cref="T:System.Array"/> with <paramref name="this"/>'s elements.</returns>
        </member>
        <member name="T:WhetStone.Looping.asCollection">
            <summary>
            A static container for identity method
            </summary>
        </member>
        <member name="M:WhetStone.Looping.asCollection.AsCollection``1(System.Collections.Generic.IEnumerable{``0},System.Boolean,System.Boolean)">
            <summary>
            Tries to cast or wrap <paramref name="this"/> in a collection adapter.
            </summary>
            <typeparam name="T">The type of the <see cref="T:System.Collections.Generic.IEnumerable`1"/>.</typeparam>
            <param name="this">The <see cref="T:System.Collections.Generic.IEnumerable`1"/> to convert to collection.</param>
            <param name="force">If this is set to <see langword="true"/>, and no suitable wrappings to <see cref="T:System.Collections.Generic.ICollection`1"/> is found, a new <see cref="T:System.Collections.Generic.ICollection`1"/> will be allocated and written to.</param>
            <param name="ensureReadOnly">Whether to force the returned value to be immutable (or null, if <paramref name="force"/> is set to <see langword="false" />)</param>
            <returns>An <see cref="T:System.Collections.Generic.ICollection`1"/> that contains <paramref name="this"/>'s elements, or <see langword="null"/> if the conversion was not successful.</returns>
            <remarks>
            <para>If <paramref name="force"/> is <see langword="true"/>, the return value will never be null.</para>
            <para>Without <paramref name="force"/> set to <see langword="true"/>, <paramref name="this"/> will only be wrapped if it is <see cref="T:System.Collections.Generic.ICollection`1"/>, <see cref="T:System.Collections.Generic.IReadOnlyCollection`1"/>, or <see cref="T:System.String"/></para>
            <para>If <paramref name="this"/> is <see cref="T:System.Collections.Generic.IReadOnlyCollection`1"/> or <see cref="T:System.String"/>, the return value will be read-only.</para>
            </remarks>
        </member>
        <member name="T:WhetStone.Looping.asList">
            <summary>
            A static container for identity method
            </summary>
        </member>
        <member name="M:WhetStone.Looping.asList.AsList``1(System.Collections.Generic.IEnumerable{``0},System.Boolean,System.Boolean)">
            <overloads>Attempt to adapt the input into an <see cref="T:System.Collections.Generic.IList`1"/> with minimal memory overhead.</overloads>
            <summary>
            Tries to cast or wrap <paramref name="this"/> in a list adapter.
            </summary>
            <typeparam name="T">The type of the <see cref="T:System.Collections.Generic.IEnumerable`1"/>.</typeparam>
            <param name="this">The <see cref="T:System.Collections.Generic.IEnumerable`1"/> to convert to list.</param>
            <param name="force">If this is set to <see langword="true"/>, and no suitable wrappings to <see cref="T:System.Collections.Generic.IList`1"/> is found, a new <see cref="T:System.Collections.Generic.IList`1"/> will be allocated and written to.</param>
            <param name="ensureReadOnly">Whether to force the returned value to be immutable (or null, if <paramref name="force"/> is set to <see langword="false" />)</param>
            <returns>An <see cref="T:System.Collections.Generic.IList`1"/> that contains <paramref name="this"/>'s elements, or <see langword="null"/> if the conversion was not successful.</returns>
            <remarks>
            <para>If <paramref name="force"/> is <see langword="true"/>, the return value will never be null.</para>
            <para>Without <paramref name="force"/> set to <see langword="true"/>, <paramref name="this"/> will only be wrapped if it is <see cref="T:System.Collections.Generic.IList`1"/>, <see cref="T:System.Collections.Generic.IReadOnlyList`1"/>, or <see cref="T:System.String"/></para>
            <para>If <paramref name="this"/> is <see cref="T:System.Collections.Generic.IReadOnlyList`1"/> or <see cref="T:System.String"/>, the return value will be read-only.</para>
            </remarks>
        </member>
        <member name="M:WhetStone.Looping.asList.AsList(System.Collections.BitArray)">
            <summary>
            Wraps the <see cref="T:System.Collections.BitArray"/> in a list wrapper.
            </summary>
            <param name="this">the <see cref="T:System.Collections.BitArray"/> to wrap.</param>
            <returns>A wrapping, partially read-only <see cref="T:System.Collections.Generic.IList`1"/> of type <see cref="T:System.Boolean"/> (like a <see cref="T:System.Array"/> of type <see cref="T:System.Boolean"/>), with ability to add and remove from the end.(</returns>
        </member>
        <member name="M:WhetStone.Looping.asList.AsList(System.Collections.Specialized.BitVector32)">
            <summary>
            Wraps the <see cref="T:System.Collections.Specialized.BitVector32"/> in a list wrapper.
            </summary>
            <param name="this">the <see cref="T:System.Collections.Specialized.BitVector32"/> to wrap.</param>
            <returns>A wrapping, partially read-only <see cref="T:System.Collections.Generic.IList`1"/> of type <see cref="T:System.Boolean"/> (like a <see cref="T:System.Array"/> of type <see cref="T:System.Boolean"/>).(</returns>
        </member>
        <member name="T:WhetStone.Looping.balanced">
            <summary>
            A static container for identity method
            </summary>
        </member>
        <member name="M:WhetStone.Looping.balanced.Balanced``1(System.Collections.Generic.IEnumerable{``0},System.Collections.Generic.IEnumerable{``0},System.Collections.Generic.IEnumerable{``0},System.Nullable{System.Int32})">
            <summary>
            Checks whether an <see cref="T:System.Collections.Generic.IEnumerable`1"/> is balanced, in terms of openers and closers.
            </summary>
            <typeparam name="T">The type of the <see cref="T:System.Collections.Generic.IEnumerable`1"/>.</typeparam>
            <param name="this">The <see cref="T:System.Collections.Generic.IEnumerable`1"/> to check for balance.</param>
            <param name="opener">The <see cref="T:System.Collections.Generic.IEnumerable`1"/> that represents a parenthesis opening.</param>
            <param name="closer">The <see cref="T:System.Collections.Generic.IEnumerable`1"/> that represents a parenthesis closing.</param>
            <param name="maxdepth">The maximum depths of parenthesis allowed, on <see langword="null"/> for no depth limit. <paramref name="maxdepth"/> is inclusive</param>
            <returns>Whether <paramref name="this"/> is balanced, and it's maximum depth is no more than <paramref name="maxdepth"/>, if one is stated.</returns>
        </member>
        <member name="M:WhetStone.Looping.balanced.Balanced``1(System.Collections.Generic.IEnumerable{``0},``0,``0,System.Nullable{System.Int32})">
            <summary>
            Checks whether an <see cref="T:System.Collections.Generic.IEnumerable`1"/> is balanced, in terms of openers and closers.
            </summary>
            <typeparam name="T">The type of the <see cref="T:System.Collections.Generic.IEnumerable`1"/>.</typeparam>
            <param name="this">The <see cref="T:System.Collections.Generic.IEnumerable`1"/> to check for balance.</param>
            <param name="opener">The element that represents a parenthesis opening.</param>
            <param name="closer">The element that represents a parenthesis closing.</param>
            <param name="maxdepth">The maximum depths of parenthesis allowed, on <see langword="null"/> for no depth limit. <paramref name="maxdepth"/> is inclusive</param>
            <returns>Whether <paramref name="this"/> is balanced, and it's maximum depth is no more than <paramref name="maxdepth"/>, if one is stated.</returns>
            <remarks>In case of an <see cref="T:System.Collections.Generic.ICollection`1"/> or <see cref="M:WhetStone.Looping.asCollection.AsCollection``1(System.Collections.Generic.IEnumerable{``0},System.Boolean,System.Boolean)"/>-compatible <paramref name="this"/> type, the algorithm might break the enumeration if it detects that balance is impossible. 
            For example: <c>"((((((the next parentheses will not be enumerated)))"</c></remarks>
        </member>
        <member name="M:WhetStone.Looping.balanced.Balanced``1(System.Collections.Generic.IEnumerable{``0},System.Collections.Generic.IEnumerable{System.ValueTuple{``0,``0}},System.Nullable{System.Int32})">
            <summary>
            Checks whether an <see cref="T:System.Collections.Generic.IEnumerable`1"/> is balanced, in terms of openers and closers.
            </summary>
            <typeparam name="T">The type of the <see cref="T:System.Collections.Generic.IEnumerable`1"/>.</typeparam>
            <param name="this">The <see cref="T:System.Collections.Generic.IEnumerable`1"/> to check for balance.</param>
            <param name="couples">An <see cref="T:System.Collections.Generic.IEnumerable`1"/> of openers and closers of many types, each one closing and opening only itself.</param>
            <param name="maxdepth">The maximum depths of parenthesis allowed, on <see langword="null"/> for no depth limit. <paramref name="maxdepth"/> is inclusive</param>
            <returns>Whether <paramref name="this"/> is balanced, and it's maximum depth is no more than <paramref name="maxdepth"/>, if one is stated.</returns>
            <remarks>In case of an <see cref="T:System.Collections.Generic.ICollection`1"/> or <see cref="M:WhetStone.Looping.asCollection.AsCollection``1(System.Collections.Generic.IEnumerable{``0},System.Boolean,System.Boolean)"/>-compatible <paramref name="this"/> type, the algorithm might break the enumeration if it detects that balance is impossible. 
            For example: <c>"((((((the next parentheses will not be enumerated)))"</c></remarks>
        </member>
        <member name="T:WhetStone.Looping.columns">
            <summary>
            A static container for identity method
            </summary>
        </member>
        <member name="M:WhetStone.Looping.columns.Columns``1(``0[0:,0:])">
            <summary>
            Returns the 2D <see cref="T:System.Array"/> arranged as an <see cref="T:System.Collections.Generic.IList`1"/> of <see cref="T:System.Collections.Generic.IList`1"/>, with the second dimension first.
            </summary>
            <typeparam name="T">The type of the <see cref="T:System.Array"/>.</typeparam>
            <param name="this">The <see cref="T:System.Array"/> to transform.</param>
            <returns>An <see cref="T:System.Collections.Generic.IList`1"/> of <see cref="T:System.Collections.Generic.IList`1"/>, each element of the super-list containing a second-dimension slice of the original <see cref="T:System.Array"/>.</returns>
            <example>
            <code>
            var arr = new int[,]{{0,1,2,3},{4,5,6,7},{8,9,10,11}};
            arr.Columns().Select(a=>a.ToArray()).ToArray(); //int[,] {{0,4,8},{1,5,9},{2,6,10},{3,7,11}}
            </code>
            </example>
        </member>
        <member name="T:WhetStone.Looping.compareCount">
            <summary>
            A static container for identity method
            </summary>
        </member>
        <member name="M:WhetStone.Looping.compareCount.CompareCount``2(System.Collections.Generic.IEnumerable{``0},System.Collections.Generic.IEnumerable{``1})">
            <summary>
            Compares the lengths of two <see cref="T:System.Collections.Generic.IEnumerable`1"/>s, avoiding enumerating more than needed.
            </summary>
            <typeparam name="T0">The type of the first <see cref="T:System.Collections.Generic.IEnumerable`1"/>.</typeparam>
            <typeparam name="T1">The type of the second <see cref="T:System.Collections.Generic.IEnumerable`1"/>.</typeparam>
            <param name="this">The first <see cref="T:System.Collections.Generic.IEnumerable`1"/> to compare.</param>
            <param name="other">The second <see cref="T:System.Collections.Generic.IEnumerable`1"/> to compare.</param>
            <returns>-1 if <paramref name="this"/> is shorter, 1 if <paramref name="other"/> is shorter, 0 if they have the same length.</returns>
            <remarks>If either <see cref="T:System.Collections.Generic.IEnumerable`1"/>s are <see cref="M:WhetStone.Looping.asCollection.AsCollection``1(System.Collections.Generic.IEnumerable{``0},System.Boolean,System.Boolean)"/> compatible, they will not be enumerated at all.</remarks>
        </member>
        <member name="T:WhetStone.Looping.count">
            <summary>
            A static container for identity method
            </summary>
        </member>
        <member name="M:WhetStone.Looping.count.Count``1(System.Collections.Generic.IEnumerable{``0},``0,System.Collections.Generic.IEqualityComparer{``0})">
            <summary>
            Counts the number of times <paramref name="target"/> appears in <paramref name="this"/>.
            </summary>
            <typeparam name="T">The type of <paramref name="this"/>.</typeparam>
            <param name="this">The <see cref="T:System.Collections.Generic.IEnumerable`1"/> to count from.</param>
            <param name="target">The element, whose appearances in <paramref name="this"/> are to be counted.</param>
            <param name="comp">The <see cref="T:System.Collections.Generic.IEqualityComparer`1"/> to use to equate <paramref name="this"/>'s elements to <paramref name="target"/>. <see langowrd="null"/> will set to default <see cref="T:System.Collections.Generic.IEqualityComparer`1"/>.</param>
            <returns>The number of elements in <paramref name="this"/> that are equal to <paramref name="target"/> by <paramref name="comp"/>.</returns>
        </member>
        <member name="M:WhetStone.Looping.count.Count``1(System.Collections.Generic.IEnumerable{``0},System.Collections.Generic.IEnumerable{``0},System.Collections.Generic.IEqualityComparer{System.Collections.Generic.IEnumerable{``0}})">
            <summary>
            Count the number of sub-enumerables in <paramref name="this"/> that are equal to <paramref name="target"/>.
            </summary>
            <typeparam name="T">The type of <paramref name="this"/>.</typeparam>
            <param name="this">The <see cref="T:System.Collections.Generic.IEnumerable`1"/> to count from.</param>
            <param name="target">The sub-enumerables, whose appearances in <paramref name="this"/> are to be counted.</param>
            <param name="comp">The <see cref="T:System.Collections.Generic.IEqualityComparer`1"/> to use to equate <paramref name="this"/>'s sub-enumerables to <paramref name="target"/>. <see langowrd="null"/> will set to default <see cref="T:System.Collections.Generic.IEqualityComparer`1"/>.</param>
            <returns>The number of sub-enumerables in <paramref name="this"/> that are equal to <paramref name="target"/> by <paramref name="comp"/>.</returns>
        </member>
        <member name="T:WhetStone.Looping.countAtleast">
            <summary>
            A static container for identity method
            </summary>
        </member>
        <member name="M:WhetStone.Looping.countAtleast.CountAtLeast``1(System.Collections.Generic.IEnumerable{``0},System.Int32,System.Func{``0,System.Boolean})">
            <summary>
            Checks whether the <see cref="T:System.Collections.Generic.IEnumerable`1"/> has at least <paramref name="minCount"/> elements that satisfy <paramref name="predicate"/>.
            </summary>
            <typeparam name="T">The type of the <see cref="T:System.Collections.Generic.IEnumerable`1"/>.</typeparam>
            <param name="this">The <see cref="T:System.Collections.Generic.IEnumerable`1"/> to count.</param>
            <param name="minCount">The number of elements in <paramref name="this"/> that have to satisfy <paramref name="predicate"/>.</param>
            <param name="predicate">The predicate elements must satisfy. If set to <see langword="null"/>, all elements satisfy.</param>
            <returns>Whether there are at least <paramref name="minCount"/> elements in <paramref name="this"/> that satisfy <paramref name="predicate"/>.</returns>
            <remarks>
            <para>After confirming <paramref name="this"/> at least <paramref name="minCount"/> members, enumeration will halt.</para>
            <para>The enumeration can halt prematurely in some cases.</para>
            </remarks>
        </member>
        <member name="T:WhetStone.Looping.ensureValue">
            <summary>
            A static container for identity method
            </summary>
        </member>
        <member name="M:WhetStone.Looping.ensureValue.EnsureValue``2(System.Collections.Generic.IDictionary{``0,``1},``0,``1)">
            <summary>
            Ensures an <see cref="T:System.Collections.Generic.IDictionary`2"/> has a value for a specific key, setting a default value is it doesn't.
            </summary>
            <typeparam name="T">The type of key of the <see cref="T:System.Collections.Generic.IDictionary`2"/>.</typeparam>
            <typeparam name="G">The type of value of the <see cref="T:System.Collections.Generic.IDictionary`2"/>.</typeparam>
            <param name="this">The <see cref="T:System.Collections.Generic.IDictionary`2"/> to ensure a value on.</param>
            <param name="key">The key to ensure value for.</param>
            <param name="defaultval">The value to set to the key if none exists?</param>
            <returns>Whether a value existed before the method was called.</returns>
        </member>
        <member name="T:WhetStone.Looping.InfiniteList`1">
            <summary>
            An infinite <see cref="T:System.Collections.Generic.IList`1"/>, with a default value occupying all non-assigned cells
            </summary>
            <typeparam name="T">The type of the elements in the list.</typeparam>
            <remarks>The list is implemented by a <see cref="T:System.Collections.Generic.List`1"/> wrapped representing the first-most elements of the list. The class's memory usage will as large as the index of the last non-default element.</remarks>
        </member>
        <member name="P:WhetStone.Looping.InfiniteList`1.defaultValue">
            <summary>
            The default value that populates the list's horizon.
            </summary>
        </member>
        <member name="M:WhetStone.Looping.InfiniteList`1.#ctor(`0,System.Int32)">
            <summary>
            Constructor
            </summary>
            <param name="defaultValue">The default value of the List's members.</param>
            <param name="capacity">The initial capacity for non-default members.</param>
        </member>
        <member name="M:WhetStone.Looping.InfiniteList`1.IndexOf(`0)">
            <inheritdoc />
        </member>
        <member name="M:WhetStone.Looping.InfiniteList`1.Insert(System.Int32,`0)">
            <inheritdoc />
        </member>
        <member name="M:WhetStone.Looping.InfiniteList`1.RemoveAt(System.Int32)">
            <inheritdoc />
        </member>
        <member name="P:WhetStone.Looping.InfiniteList`1.Item(System.Int32)">
            <inheritdoc />
        </member>
        <member name="M:WhetStone.Looping.InfiniteList`1.GetEnumerator">
            <inheritdoc />
        </member>
        <member name="M:WhetStone.Looping.InfiniteList`1.Add(`0)">
            <inheritdoc />
        </member>
        <member name="M:WhetStone.Looping.InfiniteList`1.Clear">
            <inheritdoc />
        </member>
        <member name="M:WhetStone.Looping.InfiniteList`1.Contains(`0)">
            <inheritdoc />
        </member>
        <member name="M:WhetStone.Looping.InfiniteList`1.CopyTo(`0[],System.Int32)">
            <inheritdoc />
        </member>
        <member name="M:WhetStone.Looping.InfiniteList`1.Remove(`0)">
            <inheritdoc />
        </member>
        <member name="P:WhetStone.Looping.InfiniteList`1.Count">
            <inheritdoc />
        </member>
        <member name="P:WhetStone.Looping.InfiniteList`1.IsReadOnly">
            <inheritdoc />
        </member>
        <member name="T:WhetStone.Looping.fill">
            <summary>
            A static container for identity method
            </summary>
        </member>
        <member name="M:WhetStone.Looping.fill.Fill``1(System.Collections.Generic.IList{``0},``0[])">
            <overloads>Fills an <see cref="T:System.Collections.Generic.IList`1"/> with elements.</overloads>
            <summary>
            Fills an <see cref="T:System.Collections.Generic.IList`1"/> with values.
            </summary>
            <typeparam name="T">The type of the values to fill.</typeparam>
            <param name="tofill">The <see cref="T:System.Collections.Generic.IList`1"/> to fill.</param>
            <param name="v">The values to fill <paramref name="tofill"/> with, the values will repeat over it.</param>
            <example>
            <code>
            IList&lt;bool&gt;= new int[5];
            val.Fill(0,1); //val = {0,1,0,1,0}
            </code>
            </example>
        </member>
        <member name="M:WhetStone.Looping.fill.Fill``1(System.Collections.Generic.IList{``0},``0[],System.Int32,System.Nullable{System.Int32})">
            <summary>
            Fills an <see cref="T:System.Collections.Generic.IList`1"/> with values.
            </summary>
            <typeparam name="T">The type of the values to fill.</typeparam>
            <param name="tofill">The <see cref="T:System.Collections.Generic.IList`1"/> to fill.</param>
            <param name="v">The values to fill <paramref name="tofill"/> with, the values will repeat over it.</param>
            <param name="start">The first index to be filled.</param>
            <param name="count">The number of indices to be filled, or <see langword="null" /> to continue filling to the end of the <see cref="T:System.Collections.Generic.IList`1"/>.</param>
            <exception cref="T:System.ArgumentException">If <paramref name="v"/> is empty.</exception>
        </member>
        <member name="M:WhetStone.Looping.fill.Fill``1(System.Collections.Generic.IList{``0},System.Func{System.Int32,``0},System.Int32,System.Nullable{System.Int32})">
            <summary>
            Fills an <see cref="T:System.Collections.Generic.IList`1"/> with values.
            </summary>
            <typeparam name="T">The type of the values to fill.</typeparam>
            <param name="tofill">The <see cref="T:System.Collections.Generic.IList`1"/> to fill.</param>
            <param name="filler">A function that retrieves the values to fill <paramref name="tofill"/> with.</param>
            <param name="start">The first index to be filled.</param>
            <param name="count">The number of indices to be filled, or <see langword="null" /> to continue filling to the end of the <see cref="T:System.Collections.Generic.IList`1"/>.</param>
        </member>
        <member name="M:WhetStone.Looping.fill.Fill``1(System.Collections.Generic.IList{``0},System.Func{``0},System.Int32,System.Nullable{System.Int32})">
            <summary>
            Fills an <see cref="T:System.Collections.Generic.IList`1"/> with values.
            </summary>
            <typeparam name="T">The type of the values to fill.</typeparam>
            <param name="tofill">The <see cref="T:System.Collections.Generic.IList`1"/> to fill.</param>
            <param name="filler">A function that retrieves the values to fill <paramref name="tofill"/> with.</param>
            <param name="start">The first index to be filled.</param>
            <param name="count">The number of indices to be filled, or <see langword="null" /> to continue filling to the end of the <see cref="T:System.Collections.Generic.IList`1"/>.</param>
        </member>
        <member name="M:WhetStone.Looping.fill.Fill``1(System.Int32,``0[],System.Int32,System.Nullable{System.Int32})">
            <summary>
            Creates an <see cref="T:System.Array"/> and fills it with values.
            </summary>
            <typeparam name="T">The type of the created array.</typeparam>
            <param name="length">The length of the resultant array.</param>
            <param name="filler">The values to fill the array with, they will repeat.</param>
            <param name="start">The first index to be filled.</param>
            <param name="count">The number of indices to be filled, or <see langword="null" /> to continue filling to the end of the <see cref="T:System.Collections.Generic.IList`1"/>.</param>
            <returns>A new <see cref="T:System.Array"/> of length <paramref name="length"/>, with values in the appropriated indices filled to <paramref name="filler"/></returns>
        </member>
        <member name="M:WhetStone.Looping.fill.Fill``1(System.Int32,``0[])">
            <summary>
            Creates an <see cref="T:System.Array"/> and fills it with values.
            </summary>
            <typeparam name="T">The type of the created array.</typeparam>
            <param name="length">The length of the resultant array.</param>
            <param name="filler">The values to fill the array with, they will repeat.</param>
            <returns>A new <see cref="T:System.Array"/> of length <paramref name="length"/>, with values in the filled to <paramref name="filler"/></returns>
        </member>
        <member name="M:WhetStone.Looping.fill.Fill``1(System.Int32,System.Func{System.Int32,``0},System.Int32,System.Nullable{System.Int32})">
            <summary>
            Creates an <see cref="T:System.Array"/> and fills it with values.
            </summary>
            <typeparam name="T">The type of the created array.</typeparam>
            <param name="length">The length of the resultant array.</param>
            <param name="filler">The function to generate filler elements.</param>
            <param name="start">The first index to be filled.</param>
            <param name="count">The number of indices to be filled, or <see langword="null" /> to continue filling to the end of the <see cref="T:System.Collections.Generic.IList`1"/>.</param>
            <returns>A new <see cref="T:System.Array"/> of length <paramref name="length"/>, with values in the appropriated indices filled by <paramref name="filler"/></returns>
        </member>
        <member name="M:WhetStone.Looping.fill.Fill``1(System.Int32,System.Func{``0},System.Int32,System.Nullable{System.Int32})">
            <summary>
            Creates an <see cref="T:System.Array"/> and fills it with values.
            </summary>
            <typeparam name="T">The type of the created array.</typeparam>
            <param name="length">The length of the resultant array.</param>
            <param name="filler">The function to generate filler elements.</param>
            <param name="start">The first index to be filled.</param>
            <param name="count">The number of indices to be filled, or <see langword="null" /> to continue filling to the end of the <see cref="T:System.Collections.Generic.IList`1"/>.</param>
            <returns>A new <see cref="T:System.Array"/> of length <paramref name="length"/>, with values in the appropriated indices filled by <paramref name="filler"/></returns>
        </member>
        <member name="T:WhetStone.Looping.first">
            <summary>
            A static container for identity method
            </summary>
        </member>
        <member name="M:WhetStone.Looping.first.FirstOrDefault``1(System.Collections.Generic.IEnumerable{``0},``0)">
            <summary>
            Get the <see cref="T:System.Collections.Generic.IEnumerable`1"/>'s first value or a default value.
            </summary>
            <typeparam name="T">The <see cref="T:System.Collections.Generic.IEnumerable`1"/>'s type.</typeparam>
            <param name="this">The <see cref="T:System.Collections.Generic.IEnumerable`1"/> to check.</param>
            <param name="def">The value to return if <paramref name="this"/> is empty.</param>
            <returns>The first value in <paramref name="this"/> or <paramref name="def"/> if <paramref name="this"/> is empty.</returns>
        </member>
        <member name="M:WhetStone.Looping.first.FirstOrDefault``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Boolean},``0)">
            <summary>
            Get the <see cref="T:System.Collections.Generic.IEnumerable`1"/>'s first value to fulfill a condition or a default value.
            </summary>
            <typeparam name="T">The <see cref="T:System.Collections.Generic.IEnumerable`1"/>'s type.</typeparam>
            <param name="this">The <see cref="T:System.Collections.Generic.IEnumerable`1"/> to check.</param>
            <param name="cond">The condition to qualify members for being returned.</param>
            <param name="def">The value to return if <paramref name="this"/> is empty of qualified members.</param>
            <returns>The first value in <paramref name="this"/> to pass <paramref name="cond"/> or <paramref name="def"/> if none to.</returns>
        </member>
        <member name="M:WhetStone.Looping.first.FirstOrDefault``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Boolean},System.Boolean@,``0)">
            <summary>
            Get the <see cref="T:System.Collections.Generic.IEnumerable`1"/>'s first value to fulfill a condition or a default value.
            </summary>
            <typeparam name="T">The <see cref="T:System.Collections.Generic.IEnumerable`1"/>'s type.</typeparam>
            <param name="this">The <see cref="T:System.Collections.Generic.IEnumerable`1"/> to check.</param>
            <param name="cond">The condition to qualify members for being returned.</param>
            <param name="any">Whether an element in <paramref name="this"/> was found or the default value was returned.</param>
            <param name="def">The value to return if <paramref name="this"/> is empty of qualified members.</param>
            <returns>The first value in <paramref name="this"/> to pass <paramref name="cond"/> or <paramref name="def"/> if none to.</returns>
        </member>
        <member name="T:WhetStone.Looping.getAverage">
            <summary>
            A static container for identity method
            </summary>
        </member>
        <member name="M:WhetStone.Looping.getAverage.GetAverage``1(System.Collections.Generic.IEnumerable{``0})">
            <summary>
            Get arithmetic average of an <see cref="T:System.Collections.Generic.IEnumerable`1"/> using fielding.
            </summary>
            <typeparam name="T">The type of the elements.</typeparam>
            <param name="tosearch">The <see cref="T:System.Collections.Generic.IEnumerable`1"/> to find the average of.</param>
            <returns>The arithmetic average of the elements in <paramref name="tosearch"/></returns>
            <remarks>This function uses fielding, use <see cref="M:System.Linq.Enumerable.Average(System.Collections.Generic.IEnumerable{System.Int32})"/> for non-generic types.</remarks>
        </member>
        <member name="M:WhetStone.Looping.getAverage.GetGeometricAverage``1(System.Collections.Generic.IEnumerable{``0})">
            <summary>
            Get geometric average of an <see cref="T:System.Collections.Generic.IEnumerable`1"/> using fielding.
            </summary>
            <typeparam name="T">The type of the elements.</typeparam>
            <param name="tosearch">The <see cref="T:System.Collections.Generic.IEnumerable`1"/> to find the average of.</param>
            <returns>The geometric average of the elements in <paramref name="tosearch"/></returns>
            <remarks>This function uses fielding.</remarks>
        </member>
        <member name="T:WhetStone.Looping.getMax">
            <summary>
            A static container for identity method
            </summary>
        </member>
        <member name="M:WhetStone.Looping.getMax.GetMax``1(System.Collections.Generic.IEnumerable{``0},System.Collections.Generic.IComparer{``0},System.Int32@)">
            <overloads>Get the maximum element in an enumerable.</overloads>
            <summary>
            Get the largest element in an <see cref="T:System.Collections.Generic.IEnumerable`1"/>.
            </summary>
            <typeparam name="T">The type of the elements.</typeparam>
            <param name="tosearch">The <see cref="T:System.Collections.Generic.IEnumerable`1"/> to search in.</param>
            <param name="compare">The <see cref="T:System.Collections.Generic.IComparer`1"/> to find the smallest element.</param>
            <param name="index">The index of the largest element.</param>
            <returns>The largest element in <paramref name="tosearch"/>.</returns>
            <exception cref="T:System.ArgumentException">If <paramref name="tosearch"/> is empty.</exception>
        </member>
        <member name="M:WhetStone.Looping.getMax.GetMax``1(System.Collections.Generic.IEnumerable{``0},System.Collections.Generic.IComparer{``0})">
            <overloads>Get the maximum element in an enumerable.</overloads>
            <summary>
            Get the largest element in an <see cref="T:System.Collections.Generic.IEnumerable`1"/>.
            </summary>
            <typeparam name="T">The type of the elements.</typeparam>
            <param name="tosearch">The <see cref="T:System.Collections.Generic.IEnumerable`1"/> to search in.</param>
            <param name="compare">The <see cref="T:System.Collections.Generic.IComparer`1"/> to find the smallest element. <see langword="null"/> means the default comparer will be used.</param>
            <returns>The largest element in <paramref name="tosearch"/>.</returns>
            <exception cref="T:System.ArgumentException">If <paramref name="tosearch"/> is empty.</exception>
        </member>
        <member name="M:WhetStone.Looping.getMax.GetMax``1(System.Collections.Generic.IEnumerable{``0},System.Int32@)">
            <overloads>Get the maximum element in an enumerable.</overloads>
            <summary>
            Get the largest element in an <see cref="T:System.Collections.Generic.IEnumerable`1"/>.
            </summary>
            <typeparam name="T">The type of the elements.</typeparam>
            <param name="tosearch">The <see cref="T:System.Collections.Generic.IEnumerable`1"/> to search in.</param>
            <param name="index">The index of the largest element.</param>
            <returns>The largest element in <paramref name="tosearch"/>.</returns>
            <exception cref="T:System.ArgumentException">If <paramref name="tosearch"/> is empty.</exception>
        </member>
        <member name="T:WhetStone.Looping.getMin">
            <summary>
            A static container for identity method
            </summary>
        </member>
        <member name="M:WhetStone.Looping.getMin.GetMin``1(System.Collections.Generic.IEnumerable{``0},System.Collections.Generic.IComparer{``0},System.Int32@)">
            <overloads>Get the minimum element in an enumerable.</overloads>
            <summary>
            Get the smallest element in an <see cref="T:System.Collections.Generic.IEnumerable`1"/>.
            </summary>
            <typeparam name="T">The type of the elements.</typeparam>
            <param name="tosearch">The <see cref="T:System.Collections.Generic.IEnumerable`1"/> to search in.</param>
            <param name="compare">The <see cref="T:System.Collections.Generic.IComparer`1"/> to find the smallest element.</param>
            <param name="index">The index of the largest element.</param>
            <returns>The smallest element in <paramref name="tosearch"/>.</returns>
            <exception cref="T:System.ArgumentException">If <paramref name="tosearch"/> is empty.</exception>
        </member>
        <member name="M:WhetStone.Looping.getMin.GetMin``1(System.Collections.Generic.IEnumerable{``0},System.Collections.Generic.IComparer{``0})">
            <overloads>Get the minimum element in an enumerable.</overloads>
            <summary>
            Get the smallest element in an <see cref="T:System.Collections.Generic.IEnumerable`1"/>.
            </summary>
            <typeparam name="T">The type of the elements.</typeparam>
            <param name="tosearch">The <see cref="T:System.Collections.Generic.IEnumerable`1"/> to search in.</param>
            <param name="compare">The <see cref="T:System.Collections.Generic.IComparer`1"/> to find the smallest element. <see langword="null"/> means the default comparer will be used.</param>
            <returns>The smallest element in <paramref name="tosearch"/>.</returns>
            <exception cref="T:System.ArgumentException">If <paramref name="tosearch"/> is empty.</exception>
        </member>
        <member name="M:WhetStone.Looping.getMin.GetMin``1(System.Collections.Generic.IEnumerable{``0},System.Int32@)">
            <summary>
            Get the smallest element in an <see cref="T:System.Collections.Generic.IEnumerable`1"/>.
            </summary>
            <typeparam name="T">The type of the elements.</typeparam>
            <param name="tosearch">The <see cref="T:System.Collections.Generic.IEnumerable`1"/> to search in.</param>
            <param name="index">The index of the largest element.</param>
            <returns>The smallest element in <paramref name="tosearch"/>.</returns>
            <exception cref="T:System.ArgumentException">If <paramref name="tosearch"/> is empty.</exception>
        </member>
        <member name="T:WhetStone.Looping.getProduct">
            <summary>
            A static container for identity method
            </summary>
        </member>
        <member name="M:WhetStone.Looping.getProduct.GetProduct``1(System.Collections.Generic.IEnumerable{``0})">
            <summary>
            Get the product of all elements in an <see cref="T:System.Collections.Generic.IEnumerable`1"/> using fielding.
            </summary>
            <typeparam name="T">The element to multiply</typeparam>
            <param name="toAdd">The <see cref="T:System.Collections.Generic.IEnumerable`1"/> to get the product of.</param>
            <returns>The product of all elements in <paramref name="toAdd"/></returns>
            <remarks>Uses fielding, use <see cref="M:System.Linq.Enumerable.Aggregate``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,``0,``0})"/> for non-generic equivalent.</remarks>
        </member>
        <member name="T:WhetStone.Looping.getSize">
            <summary>
            A static container for identity method
            </summary>
        </member>
        <member name="M:WhetStone.Looping.getSize.GetSize(System.Array)">
            <summary>
            Get the individual lengths of all of an <see cref="T:System.Array"/>'s dimensions.
            </summary>
            <param name="mat">The <see cref="T:System.Array"/> to measure.</param>
            <returns>A read-only list, representing <paramref name="mat"/>'s lengths on all dimensions.</returns>
        </member>
        <member name="T:WhetStone.Looping.getSum">
            <summary>
            A static container for identity method
            </summary>
        </member>
        <member name="M:WhetStone.Looping.getSum.GetSum``1(System.Collections.Generic.IEnumerable{``0})">
            <summary>
            Get the sum of all elements in an <see cref="T:System.Collections.Generic.IEnumerable`1"/> using fielding.
            </summary>
            <typeparam name="T">The element to add</typeparam>
            <param name="toAdd">The <see cref="T:System.Collections.Generic.IEnumerable`1"/> to get the sum of.</param>
            <returns>The sum of all elements in <paramref name="toAdd"/></returns>
            <remarks>Uses fielding, use <see cref="M:System.Linq.Enumerable.Aggregate``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,``0,``0})"/> for non-generic equivalent.</remarks>
        </member>
        <member name="M:WhetStone.Looping.getSum.GetCompensatingSum``1(System.Collections.Generic.IEnumerable{``0})">
            <summary>
            Get the sum of all elements in an <see cref="T:System.Collections.Generic.IEnumerable`1"/> with floating point compensation.
            </summary>
            <typeparam name="T">The type of the <see cref="T:System.Collections.Generic.IEnumerable`1"/>.</typeparam>
            <param name="toAdd">The <see cref="T:System.Collections.Generic.IEnumerable`1"/> to add.</param>
            <returns>A compensating sum of the <see cref="T:System.Collections.Generic.IEnumerable`1"/></returns>
            <remarks>Uses fielding</remarks>
        </member>
        <member name="M:WhetStone.Looping.getSum.GetCompensatingSum(System.Collections.Generic.IEnumerable{System.Double})">
            <summary>
            Get the sum of all elements in an <see cref="T:System.Collections.Generic.IEnumerable`1"/> with floating point compensation.
            </summary>
            <param name="toAdd">The <see cref="T:System.Collections.Generic.IEnumerable`1"/> to add.</param>
            <returns>A compensating sum of the <see cref="T:System.Collections.Generic.IEnumerable`1"/></returns>
        </member>
        <member name="T:WhetStone.Looping.isSymmetrical">
            <summary>
            A static container for identity method
            </summary>
        </member>
        <member name="M:WhetStone.Looping.isSymmetrical.IsSymmetrical``1(System.Collections.Generic.IList{``0},System.Collections.Generic.IEqualityComparer{``0})">
            <summary>
            Get whether an <see cref="T:System.Collections.Generic.IList`1"/> is symmetrical.
            </summary>
            <typeparam name="T">The type of the <see cref="T:System.Collections.Generic.IList`1"/>.</typeparam>
            <param name="this">The <see cref="T:System.Collections.Generic.IList`1"/> to check.</param>
            <param name="c">The <see cref="T:System.Collections.Generic.IEqualityComparer`1"/> to compare elements. <see langword="null"/> will use the default <see cref="T:System.Collections.Generic.EqualityComparer`1"/></param>
            <returns>Whether <paramref name="this"/> is symmetrical.</returns>
        </member>
        <member name="T:WhetStone.Looping.isWithinBounds">
            <summary>
            A static container for identity method
            </summary>
        </member>
        <member name="M:WhetStone.Looping.isWithinBounds.IsWithinBounds(System.Array,System.Int32[])">
            <overloads>Check whether an index is valid for a random-access container.</overloads>
            <summary>
            Get whether a multi-dimensional index is valid for an <see cref="T:System.Array"/>.
            </summary>
            <param name="arr">The <see cref="T:System.Array"/> to check.</param>
            <param name="ind">The index to check for.</param>
            <returns>Whether <paramref name="ind"/> is a valid index for <paramref name="arr"/>.</returns>
            <exception cref="T:System.ArgumentException">If <paramref name="ind"/> is the wrong size for <paramref name="arr"/></exception>
        </member>
        <member name="M:WhetStone.Looping.isWithinBounds.IsWithinBounds``1(System.Collections.Generic.IList{``0},System.Int32)">
            <summary>
            Get whether an index is valid for an <see cref="T:System.Collections.Generic.IList`1"/>.
            </summary>
            <param name="arr">The <see cref="T:System.Collections.Generic.IList`1"/> to check.</param>
            <param name="ind">The index to check for.</param>
            <returns>Whether <paramref name="ind"/> is a valid index for <paramref name="arr"/>.</returns>
        </member>
        <member name="M:WhetStone.Looping.isWithinBounds.IsWithinBounds``1(``0[],System.Int32)">
            <summary>
            Get whether an index is valid for an <see cref="T:System.Collections.Generic.IList`1"/>.
            </summary>
            <param name="arr">The <see cref="T:System.Collections.Generic.IList`1"/> to check.</param>
            <param name="ind">The index to check for.</param>
            <returns>Whether <paramref name="ind"/> is a valid index for <paramref name="arr"/>.</returns>
        </member>
        <member name="T:WhetStone.Looping.last">
            <summary>
            A static container for identity method
            </summary>
        </member>
        <member name="M:WhetStone.Looping.last.LastOrDefault``1(System.Collections.Generic.IEnumerable{``0},``0)">
            <overloads>Get the last element in an enumerable, or a default value if none found.</overloads>
            <summary>
            Get the last element in an <see cref="T:System.Collections.Generic.IEnumerable`1"/>
            </summary>
            <typeparam name="T">The type of the <see cref="T:System.Collections.Generic.IEnumerable`1"/>.</typeparam>
            <param name="this">The <see cref="T:System.Collections.Generic.IEnumerable`1"/> to search.</param>
            <param name="def">The default value to return if no elements in <paramref name="this"/> are found.</param>
            <returns>The last element in <paramref name="this"/>.</returns>
        </member>
        <member name="M:WhetStone.Looping.last.LastOrDefault``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Boolean},``0)">
            <summary>
            Get the last element in an <see cref="T:System.Collections.Generic.IEnumerable`1"/> to fulfill a condition.
            </summary>
            <typeparam name="T">The type of the <see cref="T:System.Collections.Generic.IEnumerable`1"/>.</typeparam>
            <param name="this">The <see cref="T:System.Collections.Generic.IEnumerable`1"/> to search.</param>
            <param name="cond">The condition to consider elements after.</param>
            <param name="def">The default value to return if no elements in <paramref name="this"/> are found.</param>
            <returns>The last element in <paramref name="this"/> to uphold <paramref name="cond"/>.</returns>
        </member>
        <member name="M:WhetStone.Looping.last.LastOrDefault``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Boolean},System.Boolean@,``0)">
            <summary>
            Get the last element in an <see cref="T:System.Collections.Generic.IEnumerable`1"/> to fulfill a condition.
            </summary>
            <typeparam name="T">The type of the <see cref="T:System.Collections.Generic.IEnumerable`1"/>.</typeparam>
            <param name="this">The <see cref="T:System.Collections.Generic.IEnumerable`1"/> to search.</param>
            <param name="cond">The condition to consider elements after.</param>
            <param name="any">Whether an element was found or not.</param>
            <param name="def">The default value to return if no elements in <paramref name="this"/> are found.</param>
            <returns>The last element in <paramref name="this"/> to uphold <paramref name="cond"/>.</returns>
        </member>
        <member name="T:WhetStone.Looping.LazyList`1">
            <summary>
            An infinite <see cref="T:System.Collections.Generic.IList`1"/> of lazily computed and cached values.
            </summary>
            <typeparam name="T">The values of the <see cref="T:System.Collections.Generic.IList`1"/>.</typeparam>
        </member>
        <member name="M:WhetStone.Looping.LazyList`1.#ctor(System.Func{System.Int32,`0})">
            <summary>
            constructor.
            </summary>
            <param name="generator">A function to generate the <see cref="T:WhetStone.Looping.LazyList`1"/>'s elements by index.</param>
        </member>
        <member name="M:WhetStone.Looping.LazyList`1.#ctor(System.Func{System.Int32,WhetStone.Looping.LazyList{`0},`0})">
            <summary>
            constructor.
            </summary>
            <param name="generator">A function to generate the <see cref="T:WhetStone.Looping.LazyList`1"/>'s elements by index and the <see cref="T:WhetStone.Looping.LazyList`1"/> itself.</param>
        </member>
        <member name="M:WhetStone.Looping.LazyList`1.Initialized(System.Int32)">
            <summary>
            Get whether the element at an index has been initialized.
            </summary>
            <param name="index">The index of the lazy element.</param>
            <returns>Whether the element at an index has been initialized.</returns>
        </member>
        <member name="M:WhetStone.Looping.LazyList`1.Invalidate(System.Int32)">
            <summary>
            Invalidates an element, forcing it to be computed again if evaluated.
            </summary>
            <param name="index">The index of the element.</param>
        </member>
        <member name="M:WhetStone.Looping.LazyList`1.IndexOf(`0)">
            <inheritdoc />
        </member>
        <member name="M:WhetStone.Looping.LazyList`1.Insert(System.Int32,`0)">
            <inheritdoc />
        </member>
        <member name="M:WhetStone.Looping.LazyList`1.RemoveAt(System.Int32)">
            <inheritdoc />
        </member>
        <member name="P:WhetStone.Looping.LazyList`1.Item(System.Int32)">
            <inheritdoc />
        </member>
        <member name="M:WhetStone.Looping.LazyList`1.GetEnumerator">
            <inheritdoc />
        </member>
        <member name="M:WhetStone.Looping.LazyList`1.Remove(`0)">
            <inheritdoc />
        </member>
        <member name="P:WhetStone.Looping.LazyList`1.Count">
            <inheritdoc />
        </member>
        <member name="P:WhetStone.Looping.LazyList`1.IsReadOnly">
            <inheritdoc />
        </member>
        <member name="M:WhetStone.Looping.LazyList`1.Add(`0)">
            <inheritdoc />
        </member>
        <member name="M:WhetStone.Looping.LazyList`1.Clear">
            <inheritdoc />
        </member>
        <member name="M:WhetStone.Looping.LazyList`1.Contains(`0)">
            <inheritdoc />
        </member>
        <member name="M:WhetStone.Looping.LazyList`1.CopyTo(`0[],System.Int32)">
            <inheritdoc />
        </member>
        <member name="T:WhetStone.Looping.occurances">
            <summary>
            A static container for identity method
            </summary>
        </member>
        <member name="M:WhetStone.Looping.occurances.ToOccurancesSorted``1(System.Collections.Generic.IEnumerable{``0},System.Collections.Generic.IEqualityComparer{``0})">
            <summary>
            Transforms a sorted <see cref="T:System.Collections.Generic.IEnumerable`1"/> into an <see cref="T:System.Collections.Generic.IEnumerable`1"/> of <see cref="T:System.Tuple`2"/> of members and their multiplicity.
            </summary>
            <typeparam name="T">The type of the <see cref="T:System.Collections.Generic.IEnumerable`1"/>.</typeparam>
            <param name="this">The <see cref="T:System.Collections.Generic.IEnumerable`1"/> to transform.</param>
            <param name="c">The <see cref="T:System.Collections.Generic.IEqualityComparer`1"/> to check for equality. <see langword="null"/> means default <see cref="T:System.Collections.Generic.IEqualityComparer`1"/>.</param>
            <returns>An <see cref="T:System.Collections.Generic.IEnumerable`1"/> of <see cref="T:System.Tuple`2"/> of members and their multiplicity.</returns>
            <remarks>
            <para><paramref name="this"/> doesn't have to be sorted, it just has to have all elements equal to each other adjacent.</para>
            <para>Alternately, all non-adjacent equal elements will be treated as non-equal.</para>
            </remarks>
        </member>
        <member name="M:WhetStone.Looping.occurances.ToOccurances``1(System.Collections.Generic.IEnumerable{``0},System.Collections.Generic.IEqualityComparer{``0})">
            <summary>
            Transforms an <see cref="T:System.Collections.Generic.IEnumerable`1"/> into an <see cref="T:System.Collections.Generic.IDictionary`2"/> of <see cref="T:System.Tuple`2"/> of members and their multiplicity.
            </summary>
            <typeparam name="T">The type of the <see cref="T:System.Collections.Generic.IEnumerable`1"/>.</typeparam>
            <param name="arr">The <see cref="T:System.Collections.Generic.IEnumerable`1"/> to transform.</param>
            <param name="c">The <see cref="T:System.Collections.Generic.IEqualityComparer`1"/> to check for equality. <see langword="null"/> means default <see cref="T:System.Collections.Generic.IEqualityComparer`1"/>.</param>
            <returns>An <see cref="T:System.Collections.Generic.IDictionary`2"/> of <see cref="T:System.Tuple`2"/> of members and their multiplicity.</returns>
        </member>
        <member name="T:WhetStone.Looping.binarySearch">
            <summary>
            A static container for identity method
            </summary>
        </member>
        <member name="M:WhetStone.Looping.binarySearch.BinarySearch``2(System.Func{``0,``1},``0,``0,``1,``0)">
            <overloads>Performs a binary search using Fielding.</overloads>
            <summary>
            Performs a binary search on a range from <paramref name="min"/> to <paramref name="max"/> (exclusive). Returns the number for which <paramref name="searcher"/> is below <paramref name="tolerance"/> (in absolute value).
            </summary>
            <typeparam name="T">The type of the range to search.</typeparam>
            <typeparam name="V">The type of the value to search for.</typeparam>
            <param name="searcher">The searcher function, a positive number means the input is too high, a negative number means the input is too low, below <paramref name="tolerance"/> means the input has been found.</param>
            <param name="min">The minimum of the range to search in.</param>
            <param name="max">The maximum of the range to search in.</param>
            <param name="tolerance">The maximum value that will be accepted as the correct value.</param>
            <param name="failvalue">The value to return if no correct index is found.</param>
            <returns>The index on which <paramref name="searcher"/> returned below <paramref name="tolerance"/>, or <paramref name="failvalue"/> if such is not found.</returns>
            <remarks>This function uses Fielding for both type <typeparamref name="T"/> and <typeparamref name="V"/>.</remarks>
        </member>
        <member name="M:WhetStone.Looping.binarySearch.BinarySearch(System.Func{System.Int32,System.Int32},System.Nullable{System.Int32},System.Nullable{System.Int32},System.Int32)">
            <overloads>Performs a binary search.</overloads>
            <summary>
            Performs a binary search on a discrete range from <paramref name="min"/> to <paramref name="max"/> (exclusive). Returns the number for which <paramref name="searcher"/> returns 0.
            </summary>
            <param name="searcher">The searcher function, a positive number means the input is too high, a negative number means the input is too low, zero means the input has been found.</param>
            <param name="min">The minimum of the range to search in (inclusive). Setting this to <see langword="null"/> will perform an exponential search.</param>
            <param name="max">The maximum of the range to search in (exclusive). Setting this to <see langword="null"/> will perform an exponential search.</param>
            <param name="failvalue">The value to return if no correct index is found.</param>
            <returns>The index on which <paramref name="searcher"/> returned zero, or <paramref name="failvalue"/> if such is not found.</returns>
            <remarks>In case both <paramref name="min"/> and <paramref name="max"/> are set to <see langword="null"/>, index 0 will be tested, and an exponential search will be done with zero being either an upper or lower bound.</remarks>
        </member>
        <member name="T:WhetStone.Looping.binarySearch.BooleanBinSearchStyle">
            <summary>
            A style for boolean binary search.
            </summary>
        </member>
        <member name="F:WhetStone.Looping.binarySearch.BooleanBinSearchStyle.GetLastTrue">
            <summary>
            A boolean binary search with this style will attempt to return the index of the last input to return <see langword="true"/>.
            </summary>
            <remarks>searcher(min) should return <see langword="true"/></remarks>
        </member>
        <member name="F:WhetStone.Looping.binarySearch.BooleanBinSearchStyle.GetFirstTrue">
            <summary>
            A boolean binary search with this style will attempt to return the index of the first input to return <see langword="true"/>.
            </summary>
            <remarks>searcher(max) should return <see langword="true"/></remarks>
        </member>
        <member name="M:WhetStone.Looping.binarySearch.BinarySearch(System.Func{System.Int32,System.Boolean},System.Nullable{System.Int32},System.Nullable{System.Int32},System.Int32,WhetStone.Looping.binarySearch.BooleanBinSearchStyle)">
            <summary>
            Performs a binary search on a discrete range from <paramref name="min"/> to <paramref name="max"/> (exclusive). Returns the number for which <paramref name="searcher"/> returns either the first or last <see langword="true"/> in the range, depending on the <paramref name="style"/>.
            </summary>
            <param name="searcher">A searcher function.</param>
            <param name="min">The minimum of the range to search in (inclusive). Setting this to <see langword="null"/> will perform an exponential search.</param>
            <param name="max">The maximum of the range to search in (exclusive). Setting this to <see langword="null"/> will perform an exponential search.</param>
            <param name="failvalue">The value to return if no correct index is found.</param>
            <param name="style">The boolean search style, whether to return the index of the first or last <see langword="true"/>.</param>
            <returns>The index on which <paramref name="searcher"/> returned the first or last <see langword="true"/>, or <paramref name="failvalue"/> if such is not found.</returns>
            <remarks><para>For every "normal" binary search call, the <paramref name="searcher"/> will be called twice.</para><para>Any exception thrown by the <paramref name="searcher"/> will be treated as a <see langword="false"/> output.</para></remarks>
        </member>
        <member name="M:WhetStone.Looping.binarySearch.BinarySearch``1(System.Collections.Generic.IList{``0},System.Func{``0,System.Boolean},WhetStone.Looping.binarySearch.BooleanBinSearchStyle)">
            <summary>
            Performs a boolean binary search over an <see cref="T:System.Collections.Generic.IList`1"/>.
            </summary>
            <typeparam name="T">The type of the <see cref="T:System.Collections.Generic.IList`1"/>.</typeparam>
            <param name="this">The <see cref="T:System.Collections.Generic.IList`1"/> to search.</param>
            <param name="searcher">The binary searcher function.</param>
            <param name="style">The search style of the boolean binary search.</param>
            <returns>The index that the binary search returns, or -1 if none found.</returns>
            <remarks>unlike <see cref="M:WhetStone.Looping.binarySearch.BinarySearch(System.Func{System.Int32,System.Boolean},System.Nullable{System.Int32},System.Nullable{System.Int32},System.Int32,WhetStone.Looping.binarySearch.BooleanBinSearchStyle)"/>, exception thrown by <paramref name="searcher"/> will not be caught.</remarks>
        </member>
        <member name="M:WhetStone.Looping.binarySearch.BinarySearch``1(System.Collections.Generic.IList{``0},System.Func{``0,System.Int32})">
            <summary>
            Performs a binary search over an <see cref="T:System.Collections.Generic.IList`1"/>.
            </summary>
            <typeparam name="T">The type of the <see cref="T:System.Collections.Generic.IList`1"/>.</typeparam>
            <param name="this">The <see cref="T:System.Collections.Generic.IList`1"/> to search.</param>
            <param name="searcher">The binary searcher function.</param>
            <returns>The index that the binary search returns, or -1 if none found.</returns>
        </member>
        <member name="M:WhetStone.Looping.binarySearch.BinarySearch``1(System.Collections.Generic.IList{``0},``0,System.Collections.Generic.IComparer{``0})">
            <summary>
            Performs a binary search for an element in an <see cref="T:System.Collections.Generic.IList`1"/>.
            </summary>
            <typeparam name="T">The type of the <see cref="T:System.Collections.Generic.IList`1"/>.</typeparam>
            <param name="this">The sorted <see cref="T:System.Collections.Generic.IList`1"/> to perform the search on.</param>
            <param name="tofind">The element to search for.</param>
            <param name="comp">The comparer by which <paramref name="this"/> is sorted. If set to null, the default comparer will be used.</param>
            <returns>The index of <paramref name="tofind"/> in <paramref name="this"/>, or -1 if <paramref name="tofind"/> is not in <paramref name="this"/>.</returns>
        </member>
        <member name="M:WhetStone.Looping.binarySearch.BinarySearchStartBias``1(System.Collections.Generic.IList{``0},System.Func{``0,System.Boolean},WhetStone.Looping.binarySearch.BooleanBinSearchStyle)">
            <overloads>Performs a exponential search.</overloads>
            <summary>
            Performs a exponential binary search over an <see cref="T:System.Collections.Generic.IList`1"/>.
            </summary>
            <typeparam name="T">The type of the <see cref="T:System.Collections.Generic.IList`1"/>.</typeparam>
            <param name="this">The <see cref="T:System.Collections.Generic.IList`1"/> to search.</param>
            <param name="searcher">The binary searcher function.</param>
            <param name="style">The search style of the boolean binary search.</param>
            <returns>The index that the binary search returns, or -1 if none found.</returns>
            <remarks>unlike <see cref="M:WhetStone.Looping.binarySearch.BinarySearch(System.Func{System.Int32,System.Boolean},System.Nullable{System.Int32},System.Nullable{System.Int32},System.Int32,WhetStone.Looping.binarySearch.BooleanBinSearchStyle)"/>, exception thrown by <paramref name="searcher"/> will not be caught.</remarks>
        </member>
        <member name="M:WhetStone.Looping.binarySearch.BinarySearchStartBias``1(System.Collections.Generic.IList{``0},System.Func{``0,System.Int32})">
            <summary>
            Performs a exponential search over an <see cref="T:System.Collections.Generic.IList`1"/>.
            </summary>
            <typeparam name="T">The type of the <see cref="T:System.Collections.Generic.IList`1"/>.</typeparam>
            <param name="this">The <see cref="T:System.Collections.Generic.IList`1"/> to search.</param>
            <param name="searcher">The binary searcher function.</param>
            <returns>The index that the binary search returns, or -1 if none found.</returns>
        </member>
        <member name="M:WhetStone.Looping.binarySearch.BinarySearchStartBias``1(System.Collections.Generic.IList{``0},``0,System.Collections.Generic.IComparer{``0})">
            <summary>
            Performs an exponential search for an element in an <see cref="T:System.Collections.Generic.IList`1"/>.
            </summary>
            <typeparam name="T">The type of the <see cref="T:System.Collections.Generic.IList`1"/>.</typeparam>
            <param name="this">The sorted <see cref="T:System.Collections.Generic.IList`1"/> to perform the search on.</param>
            <param name="tofind">The element to search for.</param>
            <param name="comp">The comparer by which <paramref name="this"/> is sorted. If set to null, the default comparer will be used.</param>
            <returns>The index of <paramref name="tofind"/> in <paramref name="this"/>, or -1 if <paramref name="tofind"/> is not in <paramref name="this"/>.</returns>
        </member>
        <member name="T:WhetStone.Looping.recommendSize">
            <summary>
            A static container for identity method
            </summary>
        </member>
        <member name="M:WhetStone.Looping.recommendSize.RecommendCount``1(System.Collections.Generic.IEnumerable{``0})">
            <summary>
            Attempt to extract the size of an <see cref="T:System.Collections.Generic.IEnumerable`1"/> without enumerating it.
            </summary>
            <typeparam name="T">The type of the <see cref="T:System.Collections.Generic.IEnumerable`1"/></typeparam>
            <param name="this">The <see cref="T:System.Collections.Generic.IEnumerable`1"/> to check.</param>
            <returns>The length of <paramref name="this"/> or <see langword="null"/> if unsuccessful.</returns>
        </member>
        <member name="T:WhetStone.Looping.ResizingArray`1">
            <summary>
            Represents a list array whose internal <see cref="T:System.Array" /> can be taken by reference, without need to copy it to a new <see cref="T:System.Array" />.
            </summary>
            <typeparam name="T">The type of the <see cref="T:System.Collections.Generic.IList`1" />.</typeparam>
        </member>
        <member name="M:WhetStone.Looping.ResizingArray`1.#ctor(System.Int32)">
            <summary>
            Constructor.
            </summary>
            <param name="capacity">The initial capacity of the internal list array.</param>
        </member>
        <member name="P:WhetStone.Looping.ResizingArray`1.arr">
            <summary>
            Get the internal array reference, resizing it to an appropriate size beforehand.
            </summary>
        </member>
        <member name="M:WhetStone.Looping.ResizingArray`1.Remove(`0)">
            <inheritdoc />
        </member>
        <member name="P:WhetStone.Looping.ResizingArray`1.Count">
            <inheritdoc cref="P:System.Collections.Generic.ICollection`1.Count" />
        </member>
        <member name="P:WhetStone.Looping.ResizingArray`1.IsReadOnly">
            <inheritdoc />
        </member>
        <member name="M:WhetStone.Looping.ResizingArray`1.minimize">
            <summary>
            Shrink the list array to minimal size (while) preserving all elements.
            </summary>
        </member>
        <member name="M:WhetStone.Looping.ResizingArray`1.ResizeTo(System.Int32)">
            <summary>
            Resizes the internal list array so that it could include a certain index.
            </summary>
            <param name="lastindex">The index to make valid.</param>
            <remarks>The array might become larger than necessary to accommodate the index.</remarks>
        </member>
        <member name="M:WhetStone.Looping.ResizingArray`1.Add(`0)">
            <inheritdoc />
        </member>
        <member name="M:WhetStone.Looping.ResizingArray`1.AddRange(System.Collections.Generic.IEnumerable{`0})">
            <summary>
            Adds multiple elements at once.
            </summary>
            <param name="x">The elements to add.</param>
        </member>
        <member name="M:WhetStone.Looping.ResizingArray`1.AddRange(System.Collections.Generic.ICollection{`0})">
            <summary>
            Adds multiple elements at once.
            </summary>
            <param name="x">The elements to add.</param>
        </member>
        <member name="M:WhetStone.Looping.ResizingArray`1.Clear">
            <inheritdoc />
        </member>
        <member name="M:WhetStone.Looping.ResizingArray`1.Contains(`0)">
            <inheritdoc />
        </member>
        <member name="M:WhetStone.Looping.ResizingArray`1.CopyTo(`0[],System.Int32)">
            <inheritdoc />
        </member>
        <member name="M:WhetStone.Looping.ResizingArray`1.GetEnumerator">
            <inheritdoc />
        </member>
        <member name="M:WhetStone.Looping.ResizingArray`1.IndexOf(`0)">
            <inheritdoc />
        </member>
        <member name="M:WhetStone.Looping.ResizingArray`1.Insert(System.Int32,`0)">
            <inheritdoc />
        </member>
        <member name="M:WhetStone.Looping.ResizingArray`1.RemoveAt(System.Int32)">
            <inheritdoc />
        </member>
        <member name="P:WhetStone.Looping.ResizingArray`1.Item(System.Int32)">
            <inheritdoc cref="P:System.Collections.Generic.IList`1.Item(System.Int32)" />
        </member>
        <member name="P:WhetStone.Looping.ResizingArray`1.arrView">
            <summary>
            return a view of the internal array without actually minimizing it.
            </summary>
        </member>
        <member name="P:WhetStone.Looping.ResizingArray`1.arrRaw">
            <summary>
            return the inner internal array without resizing it at all.
            </summary>
        </member>
        <member name="T:WhetStone.Looping.rows">
            <summary>
            A static container for identity method
            </summary>
        </member>
        <member name="M:WhetStone.Looping.rows.Rows``1(``0[0:,0:])">
            <summary>
            Returns the 2D <see cref="T:System.Array"/> arranged as an <see cref="T:System.Collections.Generic.IList`1"/> of <see cref="T:System.Collections.Generic.IList`1"/>, with the first dimension first.
            </summary>
            <typeparam name="T">The type of the <see cref="T:System.Array"/>.</typeparam>
            <param name="this">The <see cref="T:System.Array"/> to transform.</param>
            <returns>An <see cref="T:System.Collections.Generic.IList`1"/> of <see cref="T:System.Collections.Generic.IList`1"/>, each element of the super-list containing a first-dimension slice of the original <see cref="T:System.Array"/>.</returns>
        </member>
        <member name="T:WhetStone.Looping.shuffle">
            <summary>
            A static container for identity method
            </summary>
        </member>
        <member name="M:WhetStone.Looping.shuffle.Shuffle``1(System.Collections.Generic.IList{``0},WhetStone.Random.RandomGenerator)">
            <summary>
            Shuffles an <see cref="T:System.Collections.Generic.IList`1"/>'s elements using algorithm P.
            </summary>
            <typeparam name="T">The type of the <see cref="T:System.Collections.Generic.IList`1"/>.</typeparam>
            <param name="arr">The <see cref="T:System.Collections.Generic.IList`1"/> to shuffle.</param>
            <param name="gen">The <see cref="T:WhetStone.Random.RandomGenerator"/> to use. <see langword="null"/> for <see cref="T:WhetStone.Random.GlobalRandomGenerator"/>.</param>
            <exception cref="T:System.ArgumentException"><paramref name="arr"/> is read-only</exception>
        </member>
        <member name="T:WhetStone.Looping.slice">
            <summary>
            A static container for identity method
            </summary>
        </member>
        <member name="M:WhetStone.Looping.slice.Slice``1(System.Collections.Generic.IList{``0},System.Int32,System.Nullable{System.Int32},System.Int32,System.Nullable{System.Int32})">
            <overloads>Get a part of an enumerable.</overloads>
            <summary>
            Get a part from an <see cref="T:System.Collections.Generic.IList`1"/>.
            </summary>
            <typeparam name="T">The type of the <see cref="T:System.Collections.Generic.IList`1"/>.</typeparam>
            <param name="this">The <see cref="T:System.Collections.Generic.IList`1"/> to slice.</param>
            <param name="start">The first index of the section to return.</param>
            <param name="max">The last index of the section to return. Exclusive. If this is set, <paramref name="length"/> must not be set.</param>
            <param name="steps">The step, in indices between the indices of the section.</param>
            <param name="length">The number of items in the section. If this is set, <paramref name="max"/> must not be set.</param>
            <returns>A mutability-passing slice of <paramref name="this"/>.</returns>
        </member>
        <member name="M:WhetStone.Looping.slice.Slice``1(System.Collections.Generic.IEnumerable{``0},System.Int32,System.Nullable{System.Int32},System.Int32,System.Nullable{System.Int32})">
            <summary>
            Get a part from an <see cref="T:System.Collections.Generic.IList`1"/>.
            </summary>
            <typeparam name="T">The type of the <see cref="T:System.Collections.Generic.IList`1"/>.</typeparam>
            <param name="this">The <see cref="T:System.Collections.Generic.IList`1"/> to slice.</param>
            <param name="start">The first index of the section to return.</param>
            <param name="max">The last index of the section to return. Exclusive. If this is set, <paramref name="length"/> must not be set.</param>
            <param name="steps">The step, in indices between the indices of the section.</param>
            <param name="length">The number of items in the section. If this is set, <paramref name="max"/> must not be set.</param>
            <returns>A mutability-passing slice of <paramref name="this"/>.</returns>
        </member>
        <member name="T:WhetStone.Looping.splitAt">
            <summary>
            A static container for identity method
            </summary>
        </member>
        <member name="M:WhetStone.Looping.splitAt.SplitAt``1(System.Collections.Generic.IEnumerable{``0},System.Int32[])">
            <overloads>Split an enumerable by sub-enumerable lengths.</overloads>
            <summary>
            Split an <see cref="T:System.Collections.Generic.IEnumerable`1"/> by sub-enumerable lengths.
            </summary>
            <typeparam name="T">The type of the <see cref="T:System.Collections.Generic.IEnumerable`1"/>.</typeparam>
            <param name="this">The <see cref="T:System.Collections.Generic.IEnumerable`1"/> to split.</param>
            <param name="lengths">The lengths of the sub-enumerables.</param>
            <returns><paramref name="this"/> split to <paramref name="lengths"/>-length sub-enumerables.</returns>
        </member>
        <member name="M:WhetStone.Looping.splitAt.SplitAt``1(System.Collections.Generic.IList{``0},System.Int32[])">
            <overloads>Split an enumerable by sub-enumerable lengths.</overloads>
            <summary>
            Split an <see cref="T:System.Collections.Generic.IList`1"/> by sub-enumerable lengths.
            </summary>
            <typeparam name="T">The type of the <see cref="T:System.Collections.Generic.IList`1"/>.</typeparam>
            <param name="this">The <see cref="T:System.Collections.Generic.IList`1"/> to split.</param>
            <param name="lengths">The lengths of the sub-enumerables.</param>
            <returns><paramref name="this"/> split to <paramref name="lengths"/>-length sub-enumerables.</returns>
        </member>
        <member name="M:WhetStone.Looping.splitAt.SplitAt``1(System.Collections.Generic.IList{``0},System.Collections.Generic.IList{System.Int32})">
            <overloads>Split an enumerable by sub-enumerable lengths.</overloads>
            <summary>
            Split an <see cref="T:System.Collections.Generic.IList`1"/> by sub-enumerable lengths.
            </summary>
            <typeparam name="T">The type of the <see cref="T:System.Collections.Generic.IList`1"/>.</typeparam>
            <param name="this">The <see cref="T:System.Collections.Generic.IList`1"/> to split.</param>
            <param name="lengths">The lengths of the sub-enumerables.</param>
            <returns><paramref name="this"/> split to <paramref name="lengths"/>-length sub-enumerables.</returns>
        </member>
        <member name="T:WhetStone.Looping.startsWith">
            <summary>
            A static container for identity method
            </summary>
        </member>
        <member name="M:WhetStone.Looping.startsWith.StartsWith``1(System.Collections.Generic.IEnumerable{``0},System.Collections.Generic.IEnumerable{``0},System.Collections.Generic.IEqualityComparer{``0})">
            <summary>
            Get whether an <see cref="T:System.Collections.Generic.IEnumerable`1"/> starts with another <see cref="T:System.Collections.Generic.IEnumerable`1"/>.
            </summary>
            <typeparam name="T">The type of the <see cref="T:System.Collections.Generic.IEnumerable`1"/>s.</typeparam>
            <param name="this">The complete <see cref="T:System.Collections.Generic.IEnumerable`1"/>.</param>
            <param name="prefix">The prefix <see cref="T:System.Collections.Generic.IEnumerable`1"/>.</param>
            <param name="comp">The <see cref="T:System.Collections.Generic.IEqualityComparer`1"/> to check for element equality. <see langword="null"/> for default.</param>
            <returns>Whether <paramref name="this"/> start with <paramref name="prefix"/>.</returns>
        </member>
        <member name="T:WhetStone.Looping.toArray">
            <summary>
            A static container for identity method
            </summary>
        </member>
        <member name="M:WhetStone.Looping.toArray.ToArray``1(System.Collections.Generic.IEnumerable{``0},System.Int32,WhetStone.Looping.toArray.OverflowPolicy)">
            <summary>
            Creates an <see cref="T:System.Array"/> and fills it with an <see cref="T:System.Collections.Generic.IEnumerable`1"/>'s elements.
            </summary>
            <typeparam name="T">The type of elements in the <see cref="T:System.Collections.Generic.IEnumerable`1"/>.</typeparam>
            <param name="this">The <see cref="T:System.Collections.Generic.IEnumerable`1"/> to take elements from.</param>
            <param name="capacity">The expected size of <paramref name="this"/>.</param>
            <param name="overflowPolicy">What to do when <paramref name="this"/> is larger than <paramref name="capacity"/> will allow.</param>
            <returns>An array with <paramref name="this"/>'s elements.</returns>
        </member>
        <member name="T:WhetStone.Looping.toArray.OverflowPolicy">
            <summary>
            Policy for when an <see cref="T:System.Collections.Generic.IEnumerable`1"/> requires more space than alloted
            </summary>
        </member>
        <member name="F:WhetStone.Looping.toArray.OverflowPolicy.Error">
            <summary>
            Throw an Exception.
            </summary>
        </member>
        <member name="F:WhetStone.Looping.toArray.OverflowPolicy.Expand">
            <summary>
            Increase the alloted size.
            </summary>
        </member>
        <member name="F:WhetStone.Looping.toArray.OverflowPolicy.End">
            <summary>
            Return the <see cref="T:System.Collections.Generic.IEnumerable`1"/> processed thus far, ignoring the rest.
            </summary>
        </member>
        <member name="T:WhetStone.Looping.strConcat">
            <summary>
            A static container for identity method
            </summary>
        </member>
        <member name="M:WhetStone.Looping.strConcat.StrConcat``1(System.Collections.Generic.IEnumerable{``0},System.String)">
            <summary>
            Concatenates an <see cref="T:System.Collections.Generic.IEnumerable`1"/>'s elements in a readable manner.
            </summary>
            <typeparam name="T">The type of the elements in the <see cref="T:System.Collections.Generic.IEnumerable`1"/>.</typeparam>
            <param name="a">The <see cref="T:System.Collections.Generic.IEnumerable`1"/> to use.</param>
            <param name="seperator">The <see cref="T:System.String"/> separator to place between elements.</param>
            <returns>All the elements in <paramref name="a"/> converted to <see cref="T:System.String"/> and concatenated with <paramref name="seperator"/>.</returns>
        </member>
        <member name="M:WhetStone.Looping.strConcat.StrConcat``1(System.Collections.Generic.IEnumerable{``0},System.String,System.String,System.IFormatProvider)">
            <summary>
            Concatenates an <see cref="T:System.Collections.Generic.IEnumerable`1"/>'s elements in a readable manner.
            </summary>
            <typeparam name="T">The type of the elements in the <see cref="T:System.Collections.Generic.IEnumerable`1"/>.</typeparam>
            <param name="a">The <see cref="T:System.Collections.Generic.IEnumerable`1"/> to use.</param>
            <param name="seperator">The <see cref="T:System.String"/> separator to place between elements.</param>
            <param name="format">The format of the elements when converted to string.</param>
            <param name="prov">The <see cref="T:System.IFormatProvider"/> to use when formatting. <see langword="null"/> for <see cref="P:System.Globalization.CultureInfo.CurrentCulture"/>.</param>
            <returns>All the elements in <paramref name="a"/> converted to <see cref="T:System.String"/> and concatenated with <paramref name="seperator"/>.</returns>
        </member>
        <member name="M:WhetStone.Looping.strConcat.StrConcat``2(System.Collections.Generic.IEnumerable{System.Collections.Generic.KeyValuePair{``0,``1}},System.String,System.String)">
            <summary>
            Concatenates an <see cref="T:System.Collections.Generic.IEnumerable`1"/> of <see cref="T:System.Collections.Generic.KeyValuePair`2"/>'s elements in a readable manner.
            </summary>
            <typeparam name="K">The type of the keys.</typeparam>
            <typeparam name="V">The type of the values</typeparam>
            <param name="a">The <see cref="T:System.Collections.Generic.IEnumerable`1"/> of <see cref="T:System.Collections.Generic.KeyValuePair`2"/> to use.</param>
            <param name="definitionSeperator">The separator to place between keys and values.</param>
            <param name="seperator">The separator to place between key-value pairs.</param>
            <returns>All the key value pairs in <paramref name="a"/> converted to <see cref="T:System.String"/> and concatenated.</returns>
        </member>
        <member name="T:WhetStone.Looping.trail">
            <summary>
            A static container for identity method
            </summary>
        </member>
        <member name="M:WhetStone.Looping.trail.Trail``1(System.Collections.Generic.IList{``0},System.Int32,System.Boolean)">
            <summary>
            Get all the sub-lists of an <see cref="T:System.Collections.Generic.IList`1"/> of a specific length.
            </summary>
            <typeparam name="T">The type of the <see cref="T:System.Collections.Generic.IList`1"/>.</typeparam>
            <param name="this">The <see cref="T:System.Collections.Generic.IList`1"/>to use.</param>
            <param name="trailLength">The length of the sub-lists.</param>
            <param name="wrap">Whether to wrap the list for the sake of the last elements.</param>
            <returns>a read-only <see cref="T:System.Collections.Generic.IList`1"/> of all the sub-lists of <paramref name="this"/> of length <paramref name="trailLength"/>.</returns>
        </member>
        <member name="M:WhetStone.Looping.trail.Trail``1(System.Collections.Generic.IEnumerable{``0},System.Int32,System.Boolean)">
            <summary>
            Get all the sub-lists of an <see cref="T:System.Collections.Generic.IEnumerable`1"/> of a specific length.
            </summary>
            <typeparam name="T">The type of the <see cref="T:System.Collections.Generic.IEnumerable`1"/>.</typeparam>
            <param name="this">The <see cref="T:System.Collections.Generic.IEnumerable`1"/>to use.</param>
            <param name="trailLength">The length of the sub-lists.</param>
            <param name="wrap">Whether to wrap the list for the sake of the last elements.</param>
            <returns>All the sub-lists of <paramref name="this"/> of length <paramref name="trailLength"/>.</returns>
        </member>
        <member name="T:WhetStone.Looping.yieldAggregate">
            <summary>
            A static container for identity method
            </summary>
        </member>
        <member name="M:WhetStone.Looping.yieldAggregate.YieldAggregate``2(System.Collections.Generic.IEnumerable{``0},System.Func{``0,``1,``1},``1)">
            <summary>
            Get all the partial aggregates of an <see cref="T:System.Collections.Generic.IEnumerable`1"/>.
            </summary>
            <typeparam name="T">The type of the <see cref="T:System.Collections.Generic.IEnumerable`1"/>.</typeparam>
            <typeparam name="R">The type of the aggregate value.</typeparam>
            <param name="this">The <see cref="T:System.Collections.Generic.IEnumerable`1"/> to aggregate.</param>
            <param name="aggregator">The aggregator function.</param>
            <param name="seed">The seed for the aggregator and the first item to return.</param>
            <returns>All the partial aggregates of <paramref name="this"/>.</returns>
            <remarks><para>The first element in the output is <paramref name="seed"/>, so the output will always include one element more than the input.</para></remarks>
        </member>
        <member name="M:WhetStone.Looping.yieldAggregate.YieldAggregate``1(System.Func{``0,``0},``0)">
            <summary>
            Get an infinite <see cref="T:System.Collections.Generic.IEnumerable`1"/>, each element an aggregate of the previous element.
            </summary>
            <typeparam name="T">The type of aggregated elements.</typeparam>
            <param name="aggregator">the aggregator function.</param>
            <param name="seed">The initial element in the output.</param>
            <returns>An infinite <see cref="T:System.Collections.Generic.IEnumerable`1"/>, starting with <paramref name="seed"/>, and every element is the product of <paramref name="aggregator"/> and the previous element.</returns>
        </member>
        <member name="T:WhetStone.Looping.zip">
            <summary>
            A static container for identity method
            </summary>
        </member>
        <member name="M:WhetStone.Looping.zip.Zip``1(System.Collections.Generic.IEnumerable{System.Collections.Generic.IEnumerable{``0}})">
            <overloads>Transposes an enumerable of enumerables.</overloads>
            <summary>
            Get all the elements in <see cref="T:System.Collections.Generic.IEnumerable`1"/>s spliced together.
            </summary>
            <typeparam name="T">The types of the <see cref="T:System.Collections.Generic.IEnumerable`1"/>s</typeparam>
            <param name="this">The <see cref="T:System.Collections.Generic.IEnumerable`1"/> of <see cref="T:System.Collections.Generic.IEnumerable`1"/>s to zip.</param>
            <returns><paramref name="this"/> transposed.</returns>
            <remarks>The result is only as long as the shortest input</remarks>
        </member>
        <member name="M:WhetStone.Looping.zip.Zip``1(System.Collections.Generic.IList{System.Collections.Generic.IList{``0}})">
            <summary>
            Get all the elements in <see cref="T:System.Collections.Generic.IList`1"/>s spliced together.
            </summary>
            <typeparam name="T">The types of the <see cref="T:System.Collections.Generic.IList`1"/>s</typeparam>
            <param name="this">The <see cref="T:System.Collections.Generic.IList`1"/> of <see cref="T:System.Collections.Generic.IList`1"/>s to zip.</param>
            <returns><paramref name="this"/> transposed.</returns>
            <remarks>The result is only as long as the shortest input</remarks>
        </member>
        <member name="M:WhetStone.Looping.zip.Zip(System.Collections.Generic.IEnumerable{System.Collections.IEnumerable})">
            <summary>
            Get all the elements in <see cref="T:System.Collections.IEnumerable"/>s spliced together.
            </summary>
            <param name="this">The <see cref="T:System.Collections.IEnumerable"/> of <see cref="T:System.Collections.Generic.IEnumerable`1"/>s to zip.</param>
            <returns><paramref name="this"/> transposed.</returns>
            <remarks>The result is only as long as the shortest input</remarks>
        </member>
        <member name="M:WhetStone.Looping.zip.Zip(System.Collections.Generic.IList{System.Collections.IList})">
            <summary>
            Get all the elements in <see cref="T:System.Collections.IList"/>s spliced together.
            </summary>
            <param name="this">The <see cref="T:System.Collections.IList"/> of <see cref="T:System.Collections.IList"/>s to zip.</param>
            <returns><paramref name="this"/> transposed.</returns>
            <remarks>The result is only as long as the shortest input</remarks>
        </member>
        <member name="M:WhetStone.Looping.zip.Zip``2(System.Collections.Generic.IEnumerable{``0},System.Collections.Generic.IEnumerable{``1})">
            <summary>
            Get all the elements in two <see cref="T:System.Collections.Generic.IEnumerable`1"/>s spliced together.
            </summary>
            <typeparam name="T1">The type of the first <see cref="T:System.Collections.Generic.IEnumerable`1"/>.</typeparam>
            <typeparam name="T2">The type of the second <see cref="T:System.Collections.Generic.IEnumerable`1"/>.</typeparam>
            <param name="a">The first <see cref="T:System.Collections.Generic.IEnumerable`1"/>.</param>
            <param name="b">The second <see cref="T:System.Collections.Generic.IEnumerable`1"/>.</param>
            <returns>The <see cref="T:System.Collections.Generic.IEnumerable`1"/>s, spliced together.</returns>
            <remarks>The result is only as long as the shortest input</remarks>
        </member>
        <member name="M:WhetStone.Looping.zip.Zip``3(System.Collections.Generic.IEnumerable{``0},System.Collections.Generic.IEnumerable{``1},System.Collections.Generic.IEnumerable{``2})">
            <summary>
            Get all the elements in three <see cref="T:System.Collections.Generic.IEnumerable`1"/>s spliced together.
            </summary>
            <typeparam name="T1">The type of the first <see cref="T:System.Collections.Generic.IEnumerable`1"/>.</typeparam>
            <typeparam name="T2">The type of the second <see cref="T:System.Collections.Generic.IEnumerable`1"/>.</typeparam>
            <typeparam name="T3">The type of the third <see cref="T:System.Collections.Generic.IEnumerable`1"/>.</typeparam>
            <param name="a">The first <see cref="T:System.Collections.Generic.IEnumerable`1"/>.</param>
            <param name="b">The second <see cref="T:System.Collections.Generic.IEnumerable`1"/>.</param>
            <param name="c">The third <see cref="T:System.Collections.Generic.IEnumerable`1"/>.</param>
            <returns>The <see cref="T:System.Collections.Generic.IEnumerable`1"/>s, spliced together.</returns>
            <remarks>The result is only as long as the shortest input</remarks>
        </member>
        <member name="M:WhetStone.Looping.zip.Zip``4(System.Collections.Generic.IEnumerable{``0},System.Collections.Generic.IEnumerable{``1},System.Collections.Generic.IEnumerable{``2},System.Collections.Generic.IEnumerable{``3})">
            <summary>
            Get all the elements in four <see cref="T:System.Collections.Generic.IEnumerable`1"/>s spliced together.
            </summary>
            <typeparam name="T1">The type of the first <see cref="T:System.Collections.Generic.IEnumerable`1"/>.</typeparam>
            <typeparam name="T2">The type of the second <see cref="T:System.Collections.Generic.IEnumerable`1"/>.</typeparam>
            <typeparam name="T3">The type of the third <see cref="T:System.Collections.Generic.IEnumerable`1"/>.</typeparam>
            <typeparam name="T4">The type of the fourth <see cref="T:System.Collections.Generic.IEnumerable`1"/>.</typeparam>
            <param name="a">The first <see cref="T:System.Collections.Generic.IEnumerable`1"/>.</param>
            <param name="b">The second <see cref="T:System.Collections.Generic.IEnumerable`1"/>.</param>
            <param name="c">The third <see cref="T:System.Collections.Generic.IEnumerable`1"/>.</param>
            <param name="d">The fourth <see cref="T:System.Collections.Generic.IEnumerable`1"/>.</param>
            <returns>The <see cref="T:System.Collections.Generic.IEnumerable`1"/>s, spliced together.</returns>
            <remarks>The result is only as long as the shortest input</remarks>
        </member>
        <member name="M:WhetStone.Looping.zip.Zip``5(System.Collections.Generic.IEnumerable{``0},System.Collections.Generic.IEnumerable{``1},System.Collections.Generic.IEnumerable{``2},System.Collections.Generic.IEnumerable{``3},System.Collections.Generic.IEnumerable{``4})">
            <summary>
            Get all the elements in five <see cref="T:System.Collections.Generic.IEnumerable`1"/>s spliced together.
            </summary>
            <typeparam name="T1">The type of the first <see cref="T:System.Collections.Generic.IEnumerable`1"/>.</typeparam>
            <typeparam name="T2">The type of the second <see cref="T:System.Collections.Generic.IEnumerable`1"/>.</typeparam>
            <typeparam name="T3">The type of the third <see cref="T:System.Collections.Generic.IEnumerable`1"/>.</typeparam>
            <typeparam name="T4">The type of the fourth <see cref="T:System.Collections.Generic.IEnumerable`1"/>.</typeparam>
            <typeparam name="T5">The type of the fifth <see cref="T:System.Collections.Generic.IEnumerable`1"/>.</typeparam>
            <param name="a">The first <see cref="T:System.Collections.Generic.IEnumerable`1"/>.</param>
            <param name="b">The second <see cref="T:System.Collections.Generic.IEnumerable`1"/>.</param>
            <param name="c">The third <see cref="T:System.Collections.Generic.IEnumerable`1"/>.</param>
            <param name="d">The fourth <see cref="T:System.Collections.Generic.IEnumerable`1"/>.</param>
            <param name="e">The fifth <see cref="T:System.Collections.Generic.IEnumerable`1"/>.</param>
            <returns>The <see cref="T:System.Collections.Generic.IEnumerable`1"/>s, spliced together.</returns>
            <remarks>The result is only as long as the shortest input</remarks>
        </member>
        <member name="M:WhetStone.Looping.zip.Zip``2(System.Collections.Generic.IList{``0},System.Collections.Generic.IList{``1})">
            <summary>
            Get all the elements in two <see cref="T:System.Collections.Generic.IList`1"/>s spliced together.
            </summary>
            <typeparam name="T1">The type of the first <see cref="T:System.Collections.Generic.IList`1"/>.</typeparam>
            <typeparam name="T2">The type of the second <see cref="T:System.Collections.Generic.IList`1"/>.</typeparam>
            <param name="a">The first <see cref="T:System.Collections.Generic.IList`1"/>.</param>
            <param name="b">The second <see cref="T:System.Collections.Generic.IList`1"/>.</param>
            <returns>The <see cref="T:System.Collections.Generic.IList`1"/>s, spliced together.</returns>
            <remarks>The result is only as long as the shortest input</remarks>
        </member>
        <member name="M:WhetStone.Looping.zip.Zip``3(System.Collections.Generic.IList{``0},System.Collections.Generic.IList{``1},System.Collections.Generic.IList{``2})">
            <summary>
            Get all the elements in three <see cref="T:System.Collections.Generic.IList`1"/>s spliced together.
            </summary>
            <typeparam name="T1">The type of the first <see cref="T:System.Collections.Generic.IList`1"/>.</typeparam>
            <typeparam name="T2">The type of the second <see cref="T:System.Collections.Generic.IList`1"/>.</typeparam>
            <typeparam name="T3">The type of the third <see cref="T:System.Collections.Generic.IList`1"/>.</typeparam>
            <param name="a">The first <see cref="T:System.Collections.Generic.IList`1"/>.</param>
            <param name="b">The second <see cref="T:System.Collections.Generic.IList`1"/>.</param>
            <param name="c">The third <see cref="T:System.Collections.Generic.IList`1"/>.</param>
            <returns>The <see cref="T:System.Collections.Generic.IList`1"/>s, spliced together.</returns>
            <remarks>The result is only as long as the shortest input</remarks>
        </member>
        <member name="M:WhetStone.Looping.zip.Zip``4(System.Collections.Generic.IList{``0},System.Collections.Generic.IList{``1},System.Collections.Generic.IList{``2},System.Collections.Generic.IList{``3})">
            <summary>
            Get all the elements in four <see cref="T:System.Collections.Generic.IList`1"/>s spliced together.
            </summary>
            <typeparam name="T1">The type of the first <see cref="T:System.Collections.Generic.IList`1"/>.</typeparam>
            <typeparam name="T2">The type of the second <see cref="T:System.Collections.Generic.IList`1"/>.</typeparam>
            <typeparam name="T3">The type of the third <see cref="T:System.Collections.Generic.IList`1"/>.</typeparam>
            <typeparam name="T4">The type of the fourth <see cref="T:System.Collections.Generic.IList`1"/>.</typeparam>
            <param name="a">The first <see cref="T:System.Collections.Generic.IList`1"/>.</param>
            <param name="b">The second <see cref="T:System.Collections.Generic.IList`1"/>.</param>
            <param name="c">The third <see cref="T:System.Collections.Generic.IList`1"/>.</param>
            <param name="d">The fourth <see cref="T:System.Collections.Generic.IList`1"/>.</param>
            <returns>The <see cref="T:System.Collections.Generic.IList`1"/>s, spliced together.</returns>
            <remarks>The result is only as long as the shortest input</remarks>
        </member>
        <member name="M:WhetStone.Looping.zip.Zip``5(System.Collections.Generic.IList{``0},System.Collections.Generic.IList{``1},System.Collections.Generic.IList{``2},System.Collections.Generic.IList{``3},System.Collections.Generic.IList{``4})">
            <summary>
            Get all the elements in five <see cref="T:System.Collections.Generic.IList`1"/>s spliced together.
            </summary>
            <typeparam name="T1">The type of the first <see cref="T:System.Collections.Generic.IList`1"/>.</typeparam>
            <typeparam name="T2">The type of the second <see cref="T:System.Collections.Generic.IList`1"/>.</typeparam>
            <typeparam name="T3">The type of the third <see cref="T:System.Collections.Generic.IList`1"/>.</typeparam>
            <typeparam name="T4">The type of the fourth <see cref="T:System.Collections.Generic.IList`1"/>.</typeparam>
            <typeparam name="T5">The type of the fifth <see cref="T:System.Collections.Generic.IList`1"/>.</typeparam>
            <param name="a">The first <see cref="T:System.Collections.Generic.IList`1"/>.</param>
            <param name="b">The second <see cref="T:System.Collections.Generic.IList`1"/>.</param>
            <param name="c">The third <see cref="T:System.Collections.Generic.IList`1"/>.</param>
            <param name="d">The fourth <see cref="T:System.Collections.Generic.IList`1"/>.</param>
            <param name="e">The fifth <see cref="T:System.Collections.Generic.IList`1"/>.</param>
            <returns>The <see cref="T:System.Collections.Generic.IList`1"/>s, spliced together.</returns>
            <remarks>The result is only as long as the shortest input</remarks>
        </member>
        <member name="T:WhetStone.Looping.zipUnBound">
            <summary>
            A static container for identity method
            </summary>
        </member>
        <member name="M:WhetStone.Looping.zipUnBound.ZipUnBound``1(System.Collections.Generic.IEnumerable{System.Collections.Generic.IEnumerable{``0}},``0)">
            <overloads>Get all the elements in enumerables spliced together, continuing until they all end</overloads>
            <summary>
            Get all the elements in <see cref="T:System.Collections.Generic.IEnumerable`1"/>s spliced together, continuing until they all end.
            </summary>
            <typeparam name="T">The type of the <see cref="T:System.Collections.Generic.IEnumerable`1"/>.</typeparam>
            <param name="this">The <see cref="T:System.Collections.Generic.IEnumerable`1"/>s to zip.</param>
            <param name="nilValue">The default value to assign when an <see cref="T:System.Collections.Generic.IEnumerable`1"/> has ended.</param>
            <returns><paramref name="this"/> transposed, filling ended <see cref="T:System.Collections.Generic.IEnumerable`1"/>s with <paramref name="nilValue"/>.</returns>
        </member>
        <member name="M:WhetStone.Looping.zipUnBound.ZipUnBoundNullable``1(System.Collections.Generic.IEnumerable{System.Collections.Generic.IEnumerable{``0}})">
            <summary>
            Get all the elements in <see cref="T:System.Collections.Generic.IEnumerable`1"/>s spliced together, continuing until they all end.
            </summary>
            <typeparam name="T">The type of the <see cref="T:System.Collections.Generic.IEnumerable`1"/>.</typeparam>
            <param name="this">The <see cref="T:System.Collections.Generic.IEnumerable`1"/>s to zip.</param>
            <returns><paramref name="this"/> transposed, filling ended <see cref="T:System.Collections.Generic.IEnumerable`1"/>s with <see langword="null"/>.</returns>
        </member>
        <member name="M:WhetStone.Looping.zipUnBound.ZipUnBoundTuple``1(System.Collections.Generic.IEnumerable{System.Collections.Generic.IEnumerable{``0}})">
            <summary>
            Get all the elements in <see cref="T:System.Collections.Generic.IEnumerable`1"/>s spliced together, continuing until they all end.
            </summary>
            <typeparam name="T">The type of the <see cref="T:System.Collections.Generic.IEnumerable`1"/>.</typeparam>
            <param name="this">The <see cref="T:System.Collections.Generic.IEnumerable`1"/>s to zip.</param>
            <returns><paramref name="this"/> transposed, filling ended <see cref="T:System.Collections.Generic.IEnumerable`1"/>s with <see langword="null"/>.</returns>
        </member>
        <member name="M:WhetStone.Looping.zipUnBound.ZipUnBound(System.Collections.Generic.IEnumerable{System.Collections.Generic.IEnumerable{System.Object}})">
            <summary>
            Get all the elements in <see cref="T:System.Collections.Generic.IEnumerable`1"/>s spliced together, continuing until they all end.
            </summary>
            <param name="this">The <see cref="T:System.Collections.Generic.IEnumerable`1"/>s to zip.</param>
            <returns><paramref name="this"/> transposed, filling ended <see cref="T:System.Collections.Generic.IEnumerable`1"/>s with <see langword="null"/>.</returns>
        </member>
        <member name="M:WhetStone.Looping.zipUnBound.ZipUnBound``2(System.Collections.Generic.IEnumerable{``0},System.Collections.Generic.IEnumerable{``1},``0,``1)">
            <summary>
            Get all the elements in <see cref="T:System.Collections.Generic.IEnumerable`1"/>s spliced together, continuing until they all end.
            </summary>
            <typeparam name="T1">The type of the first <see cref="T:System.Collections.Generic.IEnumerable`1"/>.</typeparam>
            <typeparam name="T2">The type of the second <see cref="T:System.Collections.Generic.IEnumerable`1"/>.</typeparam>
            <param name="this">The first <see cref="T:System.Collections.Generic.IEnumerable`1"/>.</param>
            <param name="other">The second <see cref="T:System.Collections.Generic.IEnumerable`1"/>.</param>
            <param name="nilValue1">The default value to assign when <paramref name="this"/> has ended.</param>
            <param name="nilValue2">The default value to assign when <paramref name="other"/> has ended.</param>
            <returns><paramref name="this"/> transposed, filling ended <see cref="T:System.Collections.Generic.IEnumerable`1"/>s with <paramref name="nilValue1"/> or <paramref name="nilValue2"/>.</returns>
        </member>
        <member name="M:WhetStone.Looping.zipUnBound.ZipUnBoundNullable``2(System.Collections.Generic.IEnumerable{``0},System.Collections.Generic.IEnumerable{``1})">
            <summary>
            Get all the elements in <see cref="T:System.Collections.Generic.IEnumerable`1"/>s spliced together, continuing until they all end.
            </summary>
            <typeparam name="T1">The type of the first <see cref="T:System.Collections.Generic.IEnumerable`1"/>.</typeparam>
            <typeparam name="T2">The type of the second <see cref="T:System.Collections.Generic.IEnumerable`1"/>.</typeparam>
            <param name="this">The first <see cref="T:System.Collections.Generic.IEnumerable`1"/>.</param>
            <param name="other">The second <see cref="T:System.Collections.Generic.IEnumerable`1"/>.</param>
            <returns><paramref name="this"/> transposed, filling ended <see cref="T:System.Collections.Generic.IEnumerable`1"/>s with <see langword="null"/>.</returns>
        </member>
        <member name="M:WhetStone.Looping.zipUnBound.ZipUnBoundTuple``2(System.Collections.Generic.IEnumerable{``0},System.Collections.Generic.IEnumerable{``1})">
            <summary>
            Get all the elements in <see cref="T:System.Collections.Generic.IEnumerable`1"/>s spliced together, continuing until they all end.
            </summary>
            <typeparam name="T1">The type of the first <see cref="T:System.Collections.Generic.IEnumerable`1"/>.</typeparam>
            <typeparam name="T2">The type of the second <see cref="T:System.Collections.Generic.IEnumerable`1"/>.</typeparam>
            <param name="this">The first <see cref="T:System.Collections.Generic.IEnumerable`1"/>.</param>
            <param name="other">The second <see cref="T:System.Collections.Generic.IEnumerable`1"/>.</param>
            <returns><paramref name="this"/> transposed, filling ended <see cref="T:System.Collections.Generic.IEnumerable`1"/>s with <see langword="null"/>.</returns>
        </member>
        <member name="M:WhetStone.Looping.zipUnBound.ZipUnBound``3(System.Collections.Generic.IEnumerable{``0},System.Collections.Generic.IEnumerable{``1},System.Collections.Generic.IEnumerable{``2},``0,``1,``2)">
            <summary>
            Get all the elements in <see cref="T:System.Collections.Generic.IEnumerable`1"/>s spliced together, continuing until they all end.
            </summary>
            <typeparam name="T1">The type of the first <see cref="T:System.Collections.Generic.IEnumerable`1"/>.</typeparam>
            <typeparam name="T2">The type of the second <see cref="T:System.Collections.Generic.IEnumerable`1"/>.</typeparam>
            <typeparam name="T3">The type of the third <see cref="T:System.Collections.Generic.IEnumerable`1"/>.</typeparam>
            <param name="this">The first <see cref="T:System.Collections.Generic.IEnumerable`1"/>.</param>
            <param name="other">The second <see cref="T:System.Collections.Generic.IEnumerable`1"/>.</param>
            <param name="other2">The third <see cref="T:System.Collections.Generic.IEnumerable`1"/>.</param>
            <param name="nilValue1">The default value to assign when <paramref name="this"/> has ended.</param>
            <param name="nilValue2">The default value to assign when <paramref name="other"/> has ended.</param>
            <param name="nilValue3">The default value to assign when <paramref name="other2"/> has ended.</param>
            <returns><paramref name="this"/> transposed, filling ended <see cref="T:System.Collections.Generic.IEnumerable`1"/>s with <paramref name="nilValue1"/>, <paramref name="nilValue2"/> or <paramref name="nilValue3"/>.</returns>
        </member>
        <member name="M:WhetStone.Looping.zipUnBound.ZipUnBoundNullable``3(System.Collections.Generic.IEnumerable{``0},System.Collections.Generic.IEnumerable{``1},System.Collections.Generic.IEnumerable{``2})">
            <summary>
            Get all the elements in <see cref="T:System.Collections.Generic.IEnumerable`1"/>s spliced together, continuing until they all end.
            </summary>
            <typeparam name="T1">The type of the first <see cref="T:System.Collections.Generic.IEnumerable`1"/>.</typeparam>
            <typeparam name="T2">The type of the second <see cref="T:System.Collections.Generic.IEnumerable`1"/>.</typeparam>
            <typeparam name="T3">The type of the third <see cref="T:System.Collections.Generic.IEnumerable`1"/>.</typeparam>
            <param name="this">The first <see cref="T:System.Collections.Generic.IEnumerable`1"/>.</param>
            <param name="other">The second <see cref="T:System.Collections.Generic.IEnumerable`1"/>.</param>
            <param name="other2">The third <see cref="T:System.Collections.Generic.IEnumerable`1"/>.</param>
            <returns><paramref name="this"/> transposed, filling ended <see cref="T:System.Collections.Generic.IEnumerable`1"/>s with null.</returns>
        </member>
        <member name="M:WhetStone.Looping.zipUnBound.ZipUnBoundTuple``3(System.Collections.Generic.IEnumerable{``0},System.Collections.Generic.IEnumerable{``1},System.Collections.Generic.IEnumerable{``2})">
            <summary>
            Get all the elements in <see cref="T:System.Collections.Generic.IEnumerable`1"/>s spliced together, continuing until they all end.
            </summary>
            <typeparam name="T1">The type of the first <see cref="T:System.Collections.Generic.IEnumerable`1"/>.</typeparam>
            <typeparam name="T2">The type of the second <see cref="T:System.Collections.Generic.IEnumerable`1"/>.</typeparam>
            <typeparam name="T3">The type of the third <see cref="T:System.Collections.Generic.IEnumerable`1"/>.</typeparam>
            <param name="this">The first <see cref="T:System.Collections.Generic.IEnumerable`1"/>.</param>
            <param name="other">The second <see cref="T:System.Collections.Generic.IEnumerable`1"/>.</param>
            <param name="other2">The third <see cref="T:System.Collections.Generic.IEnumerable`1"/>.</param>
            <returns><paramref name="this"/> transposed, filling ended <see cref="T:System.Collections.Generic.IEnumerable`1"/>s with null.</returns>
        </member>
        <member name="M:WhetStone.Looping.zipUnBound.ZipUnBound``1(System.Collections.Generic.IEnumerable{System.Collections.Generic.IList{``0}},``0)">
            <overloads>Get all the elements in enumerables spliced together, continuing until they all end</overloads>
            <summary>
            Get all the elements in <see cref="T:System.Collections.Generic.IList`1"/>s spliced together, continuing until they all end.
            </summary>
            <typeparam name="T">The type of the <see cref="T:System.Collections.Generic.IList`1"/>.</typeparam>
            <param name="this">The <see cref="T:System.Collections.Generic.IList`1"/>s to zip.</param>
            <param name="nilValue">The default value to assign when an <see cref="T:System.Collections.Generic.IList`1"/> has ended.</param>
            <returns><paramref name="this"/> transposed, filling ended <see cref="T:System.Collections.Generic.IList`1"/>s with <paramref name="nilValue"/>.</returns>
        </member>
        <member name="M:WhetStone.Looping.zipUnBound.ZipUnBoundNullable``1(System.Collections.Generic.IEnumerable{System.Collections.Generic.IList{``0}})">
            <summary>
            Get all the elements in <see cref="T:System.Collections.Generic.IList`1"/>s spliced together, continuing until they all end.
            </summary>
            <typeparam name="T">The type of the <see cref="T:System.Collections.Generic.IList`1"/>.</typeparam>
            <param name="this">The <see cref="T:System.Collections.Generic.IList`1"/>s to zip.</param>
            <returns><paramref name="this"/> transposed, filling ended <see cref="T:System.Collections.Generic.IList`1"/>s with <see langword="null"/>.</returns>
        </member>
        <member name="M:WhetStone.Looping.zipUnBound.ZipUnBoundTuple``1(System.Collections.Generic.IEnumerable{System.Collections.Generic.IList{``0}})">
            <summary>
            Get all the elements in <see cref="T:System.Collections.Generic.IList`1"/>s spliced together, continuing until they all end.
            </summary>
            <typeparam name="T">The type of the <see cref="T:System.Collections.Generic.IList`1"/>.</typeparam>
            <param name="this">The <see cref="T:System.Collections.Generic.IList`1"/>s to zip.</param>
            <returns><paramref name="this"/> transposed, filling ended <see cref="T:System.Collections.Generic.IList`1"/>s with <see langword="null"/>.</returns>
        </member>
        <member name="M:WhetStone.Looping.zipUnBound.ZipUnBound(System.Collections.Generic.IEnumerable{System.Collections.Generic.IList{System.Object}})">
            <summary>
            Get all the elements in <see cref="T:System.Collections.Generic.IList`1"/>s spliced together, continuing until they all end.
            </summary>
            <param name="this">The <see cref="T:System.Collections.Generic.IList`1"/>s to zip.</param>
            <returns><paramref name="this"/> transposed, filling ended <see cref="T:System.Collections.Generic.IList`1"/>s with <see langword="null"/>.</returns>
        </member>
        <member name="M:WhetStone.Looping.zipUnBound.ZipUnBound``2(System.Collections.Generic.IList{``0},System.Collections.Generic.IList{``1},``0,``1)">
            <summary>
            Get all the elements in <see cref="T:System.Collections.Generic.IList`1"/>s spliced together, continuing until they all end.
            </summary>
            <typeparam name="T1">The type of the first <see cref="T:System.Collections.Generic.IList`1"/>.</typeparam>
            <typeparam name="T2">The type of the second <see cref="T:System.Collections.Generic.IList`1"/>.</typeparam>
            <param name="this">The first <see cref="T:System.Collections.Generic.IList`1"/>.</param>
            <param name="other">The second <see cref="T:System.Collections.Generic.IList`1"/>.</param>
            <param name="nilValue1">The default value to assign when <paramref name="this"/> has ended.</param>
            <param name="nilValue2">The default value to assign when <paramref name="other"/> has ended.</param>
            <returns><paramref name="this"/> transposed, filling ended <see cref="T:System.Collections.Generic.IList`1"/>s with <paramref name="nilValue1"/> or <paramref name="nilValue2"/>.</returns>
        </member>
        <member name="M:WhetStone.Looping.zipUnBound.ZipUnBoundNullable``2(System.Collections.Generic.IList{``0},System.Collections.Generic.IList{``1})">
            <summary>
            Get all the elements in <see cref="T:System.Collections.Generic.IList`1"/>s spliced together, continuing until they all end.
            </summary>
            <typeparam name="T1">The type of the first <see cref="T:System.Collections.Generic.IList`1"/>.</typeparam>
            <typeparam name="T2">The type of the second <see cref="T:System.Collections.Generic.IList`1"/>.</typeparam>
            <param name="this">The first <see cref="T:System.Collections.Generic.IList`1"/>.</param>
            <param name="other">The second <see cref="T:System.Collections.Generic.IList`1"/>.</param>
            <returns><paramref name="this"/> transposed, filling ended <see cref="T:System.Collections.Generic.IList`1"/>s with <see langword="null"/>.</returns>
        </member>
        <member name="M:WhetStone.Looping.zipUnBound.ZipUnBoundTuple``2(System.Collections.Generic.IList{``0},System.Collections.Generic.IList{``1})">
            <summary>
            Get all the elements in <see cref="T:System.Collections.Generic.IList`1"/>s spliced together, continuing until they all end.
            </summary>
            <typeparam name="T1">The type of the first <see cref="T:System.Collections.Generic.IList`1"/>.</typeparam>
            <typeparam name="T2">The type of the second <see cref="T:System.Collections.Generic.IList`1"/>.</typeparam>
            <param name="this">The first <see cref="T:System.Collections.Generic.IList`1"/>.</param>
            <param name="other">The second <see cref="T:System.Collections.Generic.IList`1"/>.</param>
            <returns><paramref name="this"/> transposed, filling ended <see cref="T:System.Collections.Generic.IList`1"/>s with <see langword="null"/>.</returns>
        </member>
        <member name="M:WhetStone.Looping.zipUnBound.ZipUnBound``3(System.Collections.Generic.IList{``0},System.Collections.Generic.IList{``1},System.Collections.Generic.IList{``2},``0,``1,``2)">
            <summary>
            Get all the elements in <see cref="T:System.Collections.Generic.IList`1"/>s spliced together, continuing until they all end.
            </summary>
            <typeparam name="T1">The type of the first <see cref="T:System.Collections.Generic.IList`1"/>.</typeparam>
            <typeparam name="T2">The type of the second <see cref="T:System.Collections.Generic.IList`1"/>.</typeparam>
            <typeparam name="T3">The type of the third <see cref="T:System.Collections.Generic.IList`1"/>.</typeparam>
            <param name="this">The first <see cref="T:System.Collections.Generic.IList`1"/>.</param>
            <param name="other">The second <see cref="T:System.Collections.Generic.IList`1"/>.</param>
            <param name="other2">The third <see cref="T:System.Collections.Generic.IList`1"/>.</param>
            <param name="nilValue1">The default value to assign when <paramref name="this"/> has ended.</param>
            <param name="nilValue2">The default value to assign when <paramref name="other"/> has ended.</param>
            <param name="nilValue3">The default value to assign when <paramref name="other2"/> has ended.</param>
            <returns><paramref name="this"/> transposed, filling ended <see cref="T:System.Collections.Generic.IList`1"/>s with <paramref name="nilValue1"/>, <paramref name="nilValue2"/> or <paramref name="nilValue3"/>.</returns>
        </member>
        <member name="M:WhetStone.Looping.zipUnBound.ZipUnBoundNullable``3(System.Collections.Generic.IList{``0},System.Collections.Generic.IList{``1},System.Collections.Generic.IList{``2})">
            <summary>
            Get all the elements in <see cref="T:System.Collections.Generic.IList`1"/>s spliced together, continuing until they all end.
            </summary>
            <typeparam name="T1">The type of the first <see cref="T:System.Collections.Generic.IList`1"/>.</typeparam>
            <typeparam name="T2">The type of the second <see cref="T:System.Collections.Generic.IList`1"/>.</typeparam>
            <typeparam name="T3">The type of the third <see cref="T:System.Collections.Generic.IList`1"/>.</typeparam>
            <param name="this">The first <see cref="T:System.Collections.Generic.IList`1"/>.</param>
            <param name="other">The second <see cref="T:System.Collections.Generic.IList`1"/>.</param>
            <param name="other2">The third <see cref="T:System.Collections.Generic.IList`1"/>.</param>
            <returns><paramref name="this"/> transposed, filling ended <see cref="T:System.Collections.Generic.IList`1"/>s with null.</returns>
        </member>
        <member name="M:WhetStone.Looping.zipUnBound.ZipUnBoundTuple``3(System.Collections.Generic.IList{``0},System.Collections.Generic.IList{``1},System.Collections.Generic.IList{``2})">
            <summary>
            Get all the elements in <see cref="T:System.Collections.Generic.IList`1"/>s spliced together, continuing until they all end.
            </summary>
            <typeparam name="T1">The type of the first <see cref="T:System.Collections.Generic.IList`1"/>.</typeparam>
            <typeparam name="T2">The type of the second <see cref="T:System.Collections.Generic.IList`1"/>.</typeparam>
            <typeparam name="T3">The type of the third <see cref="T:System.Collections.Generic.IList`1"/>.</typeparam>
            <param name="this">The first <see cref="T:System.Collections.Generic.IList`1"/>.</param>
            <param name="other">The second <see cref="T:System.Collections.Generic.IList`1"/>.</param>
            <param name="other2">The third <see cref="T:System.Collections.Generic.IList`1"/>.</param>
            <returns><paramref name="this"/> transposed, filling ended <see cref="T:System.Collections.Generic.IList`1"/>s with null.</returns>
        </member>
        <member name="T:WhetStone.Numerics.BigProduct">
            <summary>
            A <see cref="T:WhetStone.Numerics.BigProduct"/> can be used to store arbitrarily large rational numbers by their prime factorization.
            </summary>
            <remarks>
            <para><see cref="T:WhetStone.Numerics.BigProduct"/> stores numbers by their prime factorization, making it very speedy for multiplying, dividing, and raising to integer powers. But other than this, it cannot be otherwise changed.</para>
            <para>The <see cref="T:WhetStone.Numerics.BigProduct"/> is mutable.</para>
            </remarks>
        </member>
        <member name="P:WhetStone.Numerics.BigProduct.sign">
            <summary>
            The <see cref="T:WhetStone.Numerics.BigProduct"/>'s sign.
            </summary>
            <value>1 if the <see cref="T:WhetStone.Numerics.BigProduct"/> is positive. -1 if negative. 0 if the value is zero</value>
        </member>
        <member name="M:WhetStone.Numerics.BigProduct.#ctor(System.Int32)">
            <summary>
            Constructor for <see cref="T:WhetStone.Numerics.BigProduct"/>
            </summary>
            <param name="initialvalue">The <see cref="T:WhetStone.Numerics.BigProduct"/>'s initial value.</param>
        </member>
        <member name="M:WhetStone.Numerics.BigProduct.Multiply(System.Int32,System.Int32)">
            <summary>
            Multiplies the <see cref="T:WhetStone.Numerics.BigProduct"/>'s value by <paramref name="n"/> raised to <paramref name="pow"/>.
            </summary>
            <param name="n">The root of the multiplicand.</param>
            <param name="pow">The power of the multiplicand.</param>
            <remarks>For sufficiently small <paramref name="n"/> (under approximately 10,000, see <see cref="M:WhetStone.Numerics.smallestFactor.SmallestFactor(System.Int32,System.Nullable{System.Int32})"/>), running time is O(log(<paramref name="n"/>))</remarks>
        </member>
        <member name="M:WhetStone.Numerics.BigProduct.Divide(System.Int32,System.Int32)">
            <summary>
            Divides the <see cref="T:WhetStone.Numerics.BigProduct"/>'s value by <paramref name="n"/> raised to <paramref name="pow"/>.
            </summary>
            <param name="n">The root of the divisor.</param>
            <param name="pow">The power of the divisor.</param>
            <remarks>This is identical to <see cref="M:WhetStone.Numerics.BigProduct.Multiply(System.Int32,System.Int32)"/> with a negative pow.</remarks>
        </member>
        <member name="M:WhetStone.Numerics.BigProduct.MultiplyFactorial(System.Int32,System.Int32)">
            <summary>
            Multiplies the <see cref="T:WhetStone.Numerics.BigProduct"/>'s value by <paramref name="n"/> factorial raised to <paramref name="pow"/>.
            </summary>
            <param name="n">The inverse factorial of the root of the multiplicand.</param>
            <param name="pow">The power of the multiplicand.</param>
            <remarks>
            <para>This uses Legendre's formula for divisibility of factorials.</para>
            <para>For sufficiently small <paramref name="n"/> (under approximately 20,000, see <see cref="M:WhetStone.Numerics.primes.Primes(System.Int32)"/>), running time is O(log(<paramref name="n"/>)^2)</para>
            </remarks>
        </member>
        <member name="M:WhetStone.Numerics.BigProduct.DivideFactorial(System.Int32,System.Int32)">
            <summary>
            Divides the <see cref="T:WhetStone.Numerics.BigProduct"/>'s value by <paramref name="n"/> factorial raised to <paramref name="pow"/>.
            </summary>
            <param name="n">The inverse factorial of the root of the divisor.</param>
            <param name="pow">The power of the divisor.</param>
            <remarks>This is identical to <see cref="M:WhetStone.Numerics.BigProduct.MultiplyFactorial(System.Int32,System.Int32)"/> with a negative pow.</remarks>
        </member>
        <member name="M:WhetStone.Numerics.BigProduct.Pow(System.Int32)">
            <summary>
            Raises the <see cref="T:WhetStone.Numerics.BigProduct"/>'s value by <paramref name="p"/>.
            </summary>
            <param name="p">The power to raise the <see cref="T:WhetStone.Numerics.BigProduct"/>'s value by.</param>
            <exception cref="T:System.InvalidOperationException">In case an attempt is made to raise zero by the power of zero.</exception>
        </member>
        <member name="M:WhetStone.Numerics.BigProduct.toNum">
            <summary>
            Get the value of the <see cref="T:WhetStone.Numerics.BigProduct"/> as a <see cref="T:System.Int32"/>.
            </summary>
            <returns>The value of the <see cref="T:WhetStone.Numerics.BigProduct"/> as a <see cref="T:System.Int32"/>.</returns>
            <exception cref="T:System.InvalidOperationException">If the value cannot be represented as an <see cref="T:System.Int32"/>, use <see cref="M:WhetStone.Numerics.BigProduct.toFraction"/> in those cases.</exception>
        </member>
        <member name="M:WhetStone.Numerics.BigProduct.isInteger">
            <summary>
            Get whether the <see cref="T:WhetStone.Numerics.BigProduct"/> can be expressed as an integer.
            </summary>
            <returns>Whether the <see cref="T:WhetStone.Numerics.BigProduct"/> can be expressed as an integer.</returns>
            <remarks>Just because <see cref="M:WhetStone.Numerics.BigProduct.isInteger"/> returns true, doesn't mean that <see cref="M:WhetStone.Numerics.BigProduct.toNum"/> will not throw an exception (for example, in case where the value is higher than <see cref="T:System.Int32"/> can contain).</remarks>
        </member>
        <member name="M:WhetStone.Numerics.BigProduct.toFraction">
            <summary>
            Get the value of the <see cref="T:WhetStone.Numerics.BigProduct"/> as a <see cref="T:System.ValueTuple`2"/> of numerator and denominator.
            </summary>
            <returns>The value of the <see cref="T:WhetStone.Numerics.BigProduct"/> as a <see cref="T:System.ValueTuple`2"/> of numerator and denominator.</returns>
        </member>
        <member name="T:WhetStone.Numerics.BinomialCoefficient">
            <summary>
            Stores a binomial coefficient in a format that allows for easily incrementing and decrementing the super and sub of the coefficient.
            </summary>
            <remarks><para>For convenience, the first argument in the coefficient is called the super, and the second is called the sub.</para></remarks>
        </member>
        <member name="P:WhetStone.Numerics.BinomialCoefficient.super">
            <summary>
            Get or Set the super of the coefficient
            </summary>
            <remarks>It is recommended not to change the super by a large value. If you are considering this, instead consider using the <see cref="M:WhetStone.Numerics.choose.Choose(System.Int32,System.Int32[])"/> function.</remarks>
        </member>
        <member name="P:WhetStone.Numerics.BinomialCoefficient.sub">
            <summary>
            Get or Set the sub of the coefficient
            </summary>
            <remarks>It is recommended not to change the sub by a large value. If you are considering this, instead consider using the <see cref="M:WhetStone.Numerics.choose.Choose(System.Int32,System.Int32[])"/> function.</remarks>
            <exception cref="T:System.InvalidOperationException">If trying to bring the coefficient to a state where sub is higher than super.</exception>
        </member>
        <member name="P:WhetStone.Numerics.BinomialCoefficient.value">
            <summary>
            gets the coefficient's value.
            </summary>
        </member>
        <member name="M:WhetStone.Numerics.BinomialCoefficient.#ctor(System.Int32,System.Int32)">
            <summary>
            Constructor
            </summary>
            <param name="super">The initial super of the coefficient</param>
            <param name="sub">The initial sub of the coefficient</param>
            <exception cref="T:System.ArgumentException">If super is not as high as sub, or either being lower than zero.</exception>
        </member>
        <member name="M:WhetStone.Numerics.BinomialCoefficient.DecreaseSuper(System.Int32)">
            <summary>
            Decrements the super.
            </summary>
            <param name="div">The amount to decrease super by.</param>
            <exception cref="T:System.InvalidOperationException">If attempt to decrease super to below sub.</exception>
        </member>
        <member name="M:WhetStone.Numerics.BinomialCoefficient.IncreaseSuper(System.Int32)">
            <summary>
            Increase the super.
            </summary>
            <param name="div">The amount to increase super by.</param>
        </member>
        <member name="M:WhetStone.Numerics.BinomialCoefficient.DecreaseSub(System.Int32)">
            <summary>
            Decrements the sub.
            </summary>
            <param name="div">The amount to decrease sub by.</param>
            <exception cref="T:System.InvalidOperationException">If attempt to decrease sub to below 0.</exception>
        </member>
        <member name="M:WhetStone.Numerics.BinomialCoefficient.IncreaseSub(System.Int32)">
            <summary>
            Increments the sub.
            </summary>
            <param name="div">The amount to increase sub by.</param>
            <exception cref="T:System.InvalidOperationException">If attempt to increase sub to above super.</exception>
        </member>
        <member name="M:WhetStone.Numerics.BinomialCoefficient.DecreaseBoth(System.Int32)">
            <summary>
            Decreases both the super and the sub simultaneously.
            </summary>
            <param name="div">The amount to decrease both super and sub by.</param>
            <exception cref="T:System.InvalidOperationException">If attempt to lower sub to below zero.</exception>
        </member>
        <member name="M:WhetStone.Numerics.BinomialCoefficient.IncreaseBoth(System.Int32)">
            <summary>
            Increases both the super and the sub simultaneously.
            </summary>
            <param name="div">The amount to increase both super and sub by.</param>
        </member>
        <member name="T:WhetStone.Numerics.choose">
            <summary>
            A static container for identity method
            </summary>
        </member>
        <member name="M:WhetStone.Numerics.choose.Choose(System.Int32,System.Int32[])">
            <summary>
            Gets the multinomial coefficient of <paramref name="n"/> and one or more numbers in <paramref name="k"/>.
            </summary>
            <param name="n">The super of the multinomial coefficient</param>
            <param name="k">The subs of the multinomial coefficient</param>
            <returns>The result of the multinomial coefficient.</returns>
            <exception cref="T:System.ArgumentException">If the sum of <paramref name="k"/> is higher than <paramref name="n"/>, or if any of <paramref name="k"/> is negative.</exception>
        </member>
        <member name="T:WhetStone.Numerics.divisibility">
            <summary>
            A static container for identity method
            </summary>
        </member>
        <member name="M:WhetStone.Numerics.divisibility.Divisibility(System.Int32,System.Int32)">
            <overloads>Returns the divisibility of a number by another</overloads>
            <summary>
            Get the number of times <paramref name="n"/> can be evenly divided by <paramref name="b"/>.
            </summary>
            <param name="n">The dividend.</param>
            <param name="b">The divisor.</param>
            <returns>The maximum power by which you can raise <paramref name="b"/> and still have it divide <paramref name="n"/>.</returns>
            <remarks>Running time: O( log( log(n)/log(b) ) )</remarks>
        </member>
        <member name="M:WhetStone.Numerics.divisibility.Divisibility(System.Numerics.BigInteger,System.Numerics.BigInteger)">
            <summary>
            Get the number of times <paramref name="n"/> can be evenly divided by <paramref name="b"/>.
            </summary>
            <param name="n">The dividend.</param>
            <param name="b">The divisor.</param>
            <returns>The maximum power by which you can raise <paramref name="b"/> and still have it divide <paramref name="n"/>.</returns>
            <remarks>
            <para>Running time: O( log( log(n)/log(b) ) )</para>
            <para>If <paramref name="n"/> is larger than 64 bits, performs a binary search over the solution space (same computational complexity).</para>
            </remarks>
        </member>
        <member name="T:WhetStone.Numerics.factors">
            <summary>
            A static container for identity method
            </summary>
        </member>
        <member name="M:WhetStone.Numerics.factors.Factors(System.Int32)">
            <summary>
            Gets all the whole numbers that divide <paramref name="x"/>.
            </summary>
            <param name="x">The numbers to find factors of.</param>
            <returns>All the whole numbers that divide <paramref name="x"/></returns>
        </member>
        <member name="T:WhetStone.Numerics.greatestCommonDivisor">
            <summary>
            A static container for identity method
            </summary>
        </member>
        <member name="M:WhetStone.Numerics.greatestCommonDivisor.GreatestCommonDivisor(System.Numerics.BigInteger[])">
            <summary>
            Get the greatest common divisor of an array on <see cref="T:System.Numerics.BigInteger"/>s.
            </summary>
            <param name="val">An <see cref="T:System.Array"/> of numbers.</param>
            <returns>The greatest common divisor of <paramref name="val"/>.</returns>
        </member>
        <member name="M:WhetStone.Numerics.greatestCommonDivisor.GreatestCommonDivisor(System.Collections.Generic.IList{System.Numerics.BigInteger})">
            <summary>
            Get the greatest common divisor of an array on <see cref="T:System.Numerics.BigInteger"/>s.
            </summary>
            <param name="val">An <see cref="T:System.Collections.Generic.IList`1"/> of numbers.</param>
            <returns>The greatest common divisor of <paramref name="val"/>.</returns>
        </member>
        <member name="M:WhetStone.Numerics.greatestCommonDivisor.GreatestCommonDivisor(System.Int64[])">
            <summary>
            Get the greatest common divisor of an array on <see cref="T:System.Int64"/>s.
            </summary>
            <param name="val">An <see cref="T:System.Array"/> of numbers.</param>
            <returns>The greatest common divisor of <paramref name="val"/>.</returns>
        </member>
        <member name="M:WhetStone.Numerics.greatestCommonDivisor.GreatestCommonDivisor(System.Collections.Generic.IList{System.Int64})">
            <summary>
            Get the greatest common divisor of an array on <see cref="T:System.Int64"/>s.
            </summary>
            <param name="val">An <see cref="T:System.Collections.Generic.IList`1"/> of numbers.</param>
            <returns>The greatest common divisor of <paramref name="val"/>.</returns>
        </member>
        <member name="M:WhetStone.Numerics.greatestCommonDivisor.GreatestCommonDivisor(System.Int32[])">
            <summary>
            Get the greatest common divisor of an array on <see cref="T:System.Int32"/>s.
            </summary>
            <param name="val">An <see cref="T:System.Array"/> of numbers.</param>
            <returns>The greatest common divisor of <paramref name="val"/>.</returns>
        </member>
        <member name="T:WhetStone.Numerics.isPrime">
            <summary>
            A static class that helps check numbers for primality.
            </summary>
        </member>
        <member name="F:WhetStone.Numerics.isPrime.PrimeList">
            <summary>
            A pre-calculated, read-only <see cref="T:System.Collections.Generic.IList`1"/> of primes.
            </summary>
        </member>
        <member name="M:WhetStone.Numerics.isPrime.IsPrimeByList(System.Int32)">
            <summary>
            Get whether a number is prime by checking <see cref="F:WhetStone.Numerics.isPrime.PrimeList"/>.
            </summary>
            <param name="x">The number to check.</param>
            <returns>Whether <paramref name="x"/> is prime or <see langword="null"/> id uncertain.</returns>
        </member>
        <member name="M:WhetStone.Numerics.isPrime.IsPrime(System.Int32,System.Int32)">
            <summary>
            Performs a full check as whether a number is prime.
            </summary>
            <param name="x">The number to check.</param>
            <param name="huristicTrials">How many statistical trials to perform.</param>
            <returns>Whether <paramref name="x"/> is prime or not.</returns>
        </member>
        <member name="M:WhetStone.Numerics.isPrime.IsPrime(System.Int64,System.Int32)">
            <summary>
            Performs a full check as whether a number is prime.
            </summary>
            <param name="x">The number to check.</param>
            <param name="huristicTrials">How many statistical trials to perform.</param>
            <returns>Whether <paramref name="x"/> is prime or not.</returns>
        </member>
        <member name="M:WhetStone.Numerics.isPrime.isProbablyPrime(System.Int32,System.Int32,WhetStone.Random.RandomGenerator)">
            <overloads>Performs a statistical trial to check for primality.</overloads>
            <summary>
            Performs statistic trials to check whether the number is prime.
            </summary>
            <param name="x">The number to check.</param>
            <param name="iterations">The number of statistic trials to run.</param>
            <param name="generator">The <see cref="T:WhetStone.Random.RandomGenerator"/> to get the trial seeds from. <see langwod="null"/> will use the <see cref="T:WhetStone.Random.GlobalRandomGenerator"/>.</param>
            <returns>Whether the number is probably prime.</returns>
            <remarks><para><see langword="false"/> means that <paramref name="x"/> is definitely not prime, <see langword="true"/> means the number is prime to (1-0.5^<paramref name="iterations"/>) certainty.</para></remarks>
        </member>
        <member name="M:WhetStone.Numerics.isPrime.isProbablyPrime(System.Int32,WhetStone.Random.RandomGenerator)">
            <summary>
            Performs a statistical trial to check for primality.
            </summary>
            <param name="x">The number to check.</param>
            <param name="generator">The <see cref="T:WhetStone.Random.RandomGenerator"/> to get the trial seeds from.</param>
            <remarks><para><see langword="false"/> means that <paramref name="x"/> is definitely not prime, <see langword="true"/> means the number is prime to 0.5 certainty.</para></remarks>
        </member>
        <member name="M:WhetStone.Numerics.isPrime.isProbablyPrime(System.Int64,WhetStone.Random.RandomGenerator)">
            <summary>
            Performs a statistical trial to check for primality.
            </summary>
            <param name="x">The number to check.</param>
            <param name="generator">The <see cref="T:WhetStone.Random.RandomGenerator"/> to get the trial seeds from.</param>
            <remarks><para><see langword="false"/> means that <paramref name="x"/> is definitely not prime, <see langword="true"/> means the number is prime to 0.5 certainty.</para></remarks>
        </member>
        <member name="M:WhetStone.Numerics.isPrime.isProbablyPrime(System.Int64,System.Int32,WhetStone.Random.RandomGenerator)">
            <summary>
            Performs statistic trials to check whether the number is prime.
            </summary>
            <param name="x">The number to check.</param>
            <param name="iterations">The number of statistic trials to run.</param>
            <param name="generator">The <see cref="T:WhetStone.Random.RandomGenerator"/> to get the trial seeds from. <see langwod="null"/> will use the <see cref="T:WhetStone.Random.GlobalRandomGenerator"/>.</param>
            <returns>Whether the number is probably prime.</returns>
            <remarks><para><see langword="false"/> means that <paramref name="x"/> is definitely not prime, <see langword="true"/> means the number is prime to (1-0.5^<paramref name="iterations"/>) certainty.</para></remarks>
        </member>
        <member name="M:WhetStone.Numerics.isPrime.isProbablyPrime(System.Numerics.BigInteger,WhetStone.Random.RandomGenerator)">
            <summary>
            Performs a statistical trial to check for primality.
            </summary>
            <param name="x">The number to check.</param>
            <param name="generator">The <see cref="T:WhetStone.Random.RandomGenerator"/> to get the trial seeds from.</param>
            <remarks><para><see langword="false"/> means that <paramref name="x"/> is definitely not prime, <see langword="true"/> means the number is prime to 0.5 certainty.</para></remarks>
        </member>
        <member name="M:WhetStone.Numerics.isPrime.isProbablyPrime(System.Numerics.BigInteger,System.Int32,WhetStone.Random.RandomGenerator)">
            <summary>
            Performs statistic trials to check whether the number is prime.
            </summary>
            <param name="x">The number to check.</param>
            <param name="iterations">The number of statistic trials to run.</param>
            <param name="generator">The <see cref="T:WhetStone.Random.RandomGenerator"/> to get the trial seeds from. <see langwod="null"/> will use the <see cref="T:WhetStone.Random.GlobalRandomGenerator"/>.</param>
            <returns>Whether the number is probably prime.</returns>
            <remarks><para><see langword="false"/> means that <paramref name="x"/> is definitely not prime, <see langword="true"/> means the number is prime to (1-0.5^<paramref name="iterations"/>) certainty.</para></remarks>
        </member>
        <member name="T:WhetStone.Numerics.isWithin">
            <summary>
            A static function container for comparing an element to two boundaries.
            </summary>
        </member>
        <member name="M:WhetStone.Numerics.isWithin.iswithin(System.Int32,System.Int32,System.Int32)">
            <overloads>Get whether an element is between two boundaries or equal to either of them.</overloads>
            <summary>
            Get whether an element is between two boundaries or equal to either of them.
            </summary>
            <param name="x">The element to check</param>
            <param name="border1">The first boundary.</param>
            <param name="border2">The second boundary.</param>
            <returns>Whether <paramref name="x"/> is between <paramref name="border1"/> an <paramref name="border2"/> or equal to either of them.</returns>
        </member>
        <member name="M:WhetStone.Numerics.isWithin.iswithin``1(``0,``0,``0,System.Collections.Generic.IComparer{``0})">
            <summary>
            Get whether an element is between two boundaries or equal to either of them.
            </summary>
            <typeparam name="T">The type of elements to compare.</typeparam>
            <param name="x">The element to check</param>
            <param name="border1">The first boundary.</param>
            <param name="border2">The second boundary.</param>
            <param name="comp">The <see cref="T:System.Collections.Generic.IComparer`1"/> to check for equality and inequality</param>
            <returns>Whether <paramref name="x"/> is between <paramref name="border1"/> an <paramref name="border2"/> or equal to either of them.</returns>
        </member>
        <member name="M:WhetStone.Numerics.isWithin.iswithin(System.Double,System.Double,System.Double)">
            <summary>
            Get whether an element is between two boundaries or equal to either of them.
            </summary>
            <param name="x">The element to check</param>
            <param name="border1">The first boundary.</param>
            <param name="border2">The second boundary.</param>
            <returns>Whether <paramref name="x"/> is between <paramref name="border1"/> an <paramref name="border2"/> or equal to either of them.</returns>
        </member>
        <member name="M:WhetStone.Numerics.isWithin.iswithinPartialExclusive(System.Int32,System.Int32,System.Int32)">
            <overloads>Get whether an element is between two boundaries or equal to the first of them.</overloads>
            <summary>
            Get whether an element is between two boundaries or equal to the first.
            </summary>
            <param name="x">The element to check</param>
            <param name="border1">The first boundary. Inclusive.</param>
            <param name="border2">The second boundary. Exclusive.</param>
            <returns>Whether <paramref name="x"/> is between <paramref name="border1"/> an <paramref name="border2"/> or equal to <paramref name="border1"/>.</returns>
            <remarks>
            <para>If <paramref name="border1"/> is equal to <paramref name="border2"/>, nothing will be between them. </para>
            <para><paramref name="border1"/> need not be smaller than <paramref name="border2"/>.</para>
            </remarks>
        </member>
        <member name="M:WhetStone.Numerics.isWithin.iswithinPartialExclusive(System.Double,System.Double,System.Double)">
            <summary>
            Get whether an element is between two boundaries or equal to the first.
            </summary>
            <param name="x">The element to check</param>
            <param name="border1">The first boundary. Inclusive.</param>
            <param name="border2">The second boundary. Exclusive.</param>
            <returns>Whether <paramref name="x"/> is between <paramref name="border1"/> an <paramref name="border2"/> or equal to <paramref name="border1"/>.</returns>
            <remarks>
            <para>If <paramref name="border1"/> is equal to <paramref name="border2"/>, nothing will be between them. </para>
            <para><paramref name="border1"/> need not be smaller than <paramref name="border2"/>.</para>
            </remarks>
        </member>
        <member name="M:WhetStone.Numerics.isWithin.iswithinPartialExclusive``1(``0,``0,``0,System.Collections.Generic.IComparer{``0})">
            <summary>
            Get whether an element is between two boundaries or equal to the first.
            </summary>
            <param name="x">The element to check</param>
            <param name="border1">The first boundary. Inclusive.</param>
            <param name="border2">The second boundary. Exclusive.</param>
            <param name="comp">The <see cref="T:System.Collections.Generic.IComparer`1"/> to check for equality and inequality</param>
            <returns>Whether <paramref name="x"/> is between <paramref name="border1"/> an <paramref name="border2"/> or equal to <paramref name="border1"/>.</returns>
            <remarks>
            <para>If <paramref name="border1"/> is equal to <paramref name="border2"/>, nothing will be between them. </para>
            <para><paramref name="border1"/> need not be smaller than <paramref name="border2"/>.</para>
            </remarks>
        </member>
        <member name="M:WhetStone.Numerics.isWithin.iswithinexclusive(System.Int32,System.Int32,System.Int32)">
            <overloads>Get whether an element is between two boundaries.</overloads>
            <summary>
            Get whether an element is between two boundaries or equal to either of them.
            </summary>
            <param name="x">The element to check</param>
            <param name="border1">The first boundary.</param>
            <param name="border2">The second boundary.</param>
            <returns>Whether <paramref name="x"/> is between <paramref name="border1"/> an <paramref name="border2"/>.</returns>
        </member>
        <member name="M:WhetStone.Numerics.isWithin.iswithinexclusive(System.Double,System.Double,System.Double)">
            <summary>
            Get whether an element is between two boundaries or equal to either of them.
            </summary>
            <param name="x">The element to check</param>
            <param name="border1">The first boundary.</param>
            <param name="border2">The second boundary.</param>
            <returns>Whether <paramref name="x"/> is between <paramref name="border1"/> an <paramref name="border2"/>.</returns>
        </member>
        <member name="M:WhetStone.Numerics.isWithin.iswithinexclusive``1(``0,``0,``0,System.Collections.Generic.IComparer{``0})">
            <summary>
            Get whether an element is between two boundaries or equal to either of them.
            </summary>
            <param name="x">The element to check</param>
            <param name="border1">The first boundary.</param>
            <param name="border2">The second boundary.</param>
            <param name="comp">The <see cref="T:System.Collections.Generic.IComparer`1"/> to check for equality and inequality</param>
            <returns>Whether <paramref name="x"/> is between <paramref name="border1"/> an <paramref name="border2"/>.</returns>
        </member>
        <member name="T:WhetStone.Numerics.KahanSum">
            <summary>
            A mutable <see cref="T:System.Double"/> sum that compensates for floating-point errors.
            </summary>
            <remarks>using the Khan method.</remarks>
        </member>
        <member name="P:WhetStone.Numerics.KahanSum.Sum">
            <summary>
            Get the current sum of all added items.
            </summary>
        </member>
        <member name="M:WhetStone.Numerics.KahanSum.Add(System.Double)">
            <summary>
            Adds an item to the sum.
            </summary>
            <param name="item">The item to add.</param>
        </member>
        <member name="T:WhetStone.Numerics.KahanSum`1">
            <summary>
            A mutable generic sum that compensates for floating-point errors.
            </summary>
            <remarks>
            <para>using the Khan method.</para>
            <para>Uses fielding for addition.</para>
            </remarks>
        </member>
        <member name="P:WhetStone.Numerics.KahanSum`1.Sum">
            <summary>
            Get the current sum of all added items.
            </summary>
        </member>
        <member name="M:WhetStone.Numerics.KahanSum`1.#ctor">
            <summary>
            Constructor.
            </summary>
        </member>
        <member name="M:WhetStone.Numerics.KahanSum`1.Add(`0)">
            <summary>
            Adds an item to the sum.
            </summary>
            <param name="item">The item to add.</param>
        </member>
        <member name="T:WhetStone.Numerics.LogarithmicProgresser">
            <summary>
            Stores a (floored) logarithm that is easy to increment.
            </summary>
        </member>
        <member name="P:WhetStone.Numerics.LogarithmicProgresser.base">
            <summary>
            The base of the logarithm.
            </summary>
        </member>
        <member name="P:WhetStone.Numerics.LogarithmicProgresser.value">
            <summary>
            The antilogarithm.
            </summary>
        </member>
        <member name="P:WhetStone.Numerics.LogarithmicProgresser.log">
            <summary>
            the (floored) logarithm.
            </summary>
        </member>
        <member name="M:WhetStone.Numerics.LogarithmicProgresser.#ctor(System.Int32,System.Int64)">
            <summary>
            Constructor.
            </summary>
            <param name="base">The logarithm's base.</param>
            <param name="initialValue">The initial antilogarithm.</param>
        </member>
        <member name="M:WhetStone.Numerics.LogarithmicProgresser.Increment(System.Int32)">
            <summary>
            increases the antilogarithm.
            </summary>
            <param name="increment">The amount to increment by.</param>
            <returns>The amount by which the logarithm changed.</returns>
        </member>
        <member name="M:WhetStone.Numerics.LogarithmicProgresser.Decrement(System.Int32)">
            <summary>
            decreases the antilogarithm.
            </summary>
            <param name="decrement">The amount to decrease by.</param>
            <returns>The amount by which the logarithm changed.</returns>
        </member>
        <member name="T:WhetStone.Numerics.primeFactors">
            <summary>
            A static container for identity method
            </summary>
        </member>
        <member name="M:WhetStone.Numerics.primeFactors.Primefactors(System.Int32)">
            <overloads>Get the prime factors of a number.</overloads>
            <summary>
            Get the prime factors of a number. 
            </summary>
            <param name="x">The number to find factors of.</param>
            <returns>All the prime factors of <paramref name="x"/>.</returns>
            <remarks>
            <para>If a prime divides <paramref name="x"/> more than once, it will be returned multiple times.</para>
            <para>The returned primes will be sorted in ascending order.</para>
            </remarks>
        </member>
        <member name="M:WhetStone.Numerics.primeFactors.Primefactors(System.Int64)">
            <summary>
            Get the prime factors of a number. 
            </summary>
            <param name="x">The number to find factors of.</param>
            <returns>All the prime factors of <paramref name="x"/>.</returns>
            <remarks>
            <para>If a prime divides <paramref name="x"/> more than once, it will be returned multiple times.</para>
            <para>The returned primes will be sorted in ascending order.</para>
            </remarks>
        </member>
        <member name="T:WhetStone.Numerics.primes">
            <summary>
            A static container for identity method
            </summary>
        </member>
        <member name="M:WhetStone.Numerics.primes.Primes">
            <summary>
            Get an <see cref="T:System.Collections.Generic.IEnumerable`1"/> of all prime numbers. 
            </summary>
            <returns>An infinite <see cref="T:System.Collections.Generic.IEnumerable`1"/> of primes.</returns>
            <remarks>The first primes are pre-compiled and will be returned i constant time. After that, the <see cref="T:System.Collections.Generic.IEnumerable`1"/> will require O(n/log(n)) space.</remarks>
        </member>
        <member name="M:WhetStone.Numerics.primes.Primes(System.Int32)">
            <summary>
            Get all prime numbers under a maximum bound.
            </summary>
            <param name="max">The maximum bound of the returned primes (exclusive).</param>
            <returns>All primes under <paramref name="max"/>.</returns>
            <remarks>If <paramref name="max"/> is small enough (under <see cref="F:WhetStone.Numerics.isPrime.PrimeList"/>'s last value), the returned value will be an <see cref="T:System.Collections.Generic.IList`1"/>.</remarks>
        </member>
        <member name="T:WhetStone.Numerics.smallestFactor">
            <summary>
            A static container for identity method
            </summary>
        </member>
        <member name="M:WhetStone.Numerics.smallestFactor.SmallestFactor(System.Int32,System.Nullable{System.Int32})">
            <overloads>Get the smallest prime factor of a number.</overloads>
            <summary>
            Get the smallest prime factor of an <see cref="T:System.Int32"/>.
            </summary>
            <param name="value">The number to factorize.</param>
            <param name="start">The smallest prime to check or <see langword="null"/> to check all of them.</param>
            <returns>The smallest prime number after <paramref name="start"/> that divides <paramref name="value"/>, or <paramref name="value"/> if none found.</returns>
        </member>
        <member name="M:WhetStone.Numerics.smallestFactor.SmallestFactor(System.Int64,System.Nullable{System.Int64})">
            <summary>
            Get the smallest prime factor of an <see cref="T:System.Int64"/>.
            </summary>
            <param name="value">The number to factorize.</param>
            <param name="start">The smallest prime to check or <see langword="null"/> to check all of them.</param>
            <returns>The smallest prime number after <paramref name="start"/> that divides <paramref name="value"/>, or <paramref name="value"/> if none found.</returns>
        </member>
        <member name="T:WhetStone.Numerics.unsignedDiff">
            <summary>
            A static container for identity method
            </summary>
        </member>
        <member name="M:WhetStone.Numerics.unsignedDiff.UnsignedDiff(System.UInt32,System.UInt32)">
            <summary>
            Get the absolute difference between two numbers.
            </summary>
            <param name="this">The first number.</param>
            <param name="other">The second number.</param>
            <returns>The absolute difference between <paramref name="this"/> and <paramref name="other"/>.</returns>
        </member>
        <member name="M:WhetStone.Numerics.unsignedDiff.UnsignedDiff(System.UInt16,System.UInt16)">
            <summary>
            Get the absolute difference between two numbers.
            </summary>
            <param name="this">The first number.</param>
            <param name="other">The second number.</param>
            <returns>The absolute difference between <paramref name="this"/> and <paramref name="other"/>.</returns>
        </member>
        <member name="M:WhetStone.Numerics.unsignedDiff.UnsignedDiff(System.Byte,System.Byte)">
            <summary>
            Get the absolute difference between two numbers.
            </summary>
            <param name="this">The first number.</param>
            <param name="other">The second number.</param>
            <returns>The absolute difference between <paramref name="this"/> and <paramref name="other"/>.</returns>
        </member>
        <member name="M:WhetStone.Numerics.unsignedDiff.UnsignedDiff(System.UInt64,System.UInt64)">
            <summary>
            Get the absolute difference between two numbers.
            </summary>
            <param name="this">The first number.</param>
            <param name="other">The second number.</param>
            <returns>The absolute difference between <paramref name="this"/> and <paramref name="other"/>.</returns>
        </member>
        <member name="T:WhetStone.SystemExtensions.BitList">
            <summary>
            Manages a large amount of booleans with an underlying list of unsigned integer word types. Supports all list operations.
            </summary>
            <remarks>If the DLL is compiled with the WIN32 flag, <see cref="T:System.UInt32"/> is used as the underlying type. If compiled with the WIN64 flag, <see cref="T:System.UInt64"/> is the underlying type. If compiled with the BYTEWORD flag, <see cref="T:System.Byte"/> is the underlying type (used for debugging).</remarks>
        </member>
        <member name="F:WhetStone.SystemExtensions.BitList.BITS_IN_CELL">
            <summary>
            How many bits are in a single inner data value. Used to confirm optimality.
            </summary>
        </member>
        <member name="M:WhetStone.SystemExtensions.BitList.#ctor(System.Int32)">
            <summary>
            constructor. All elements are initialized to false.
            </summary>
            <param name="size">Initial size of the list</param>
        </member>
        <member name="M:WhetStone.SystemExtensions.BitList.GetEnumerator">
            <inheritdoc />
        </member>
        <member name="M:WhetStone.SystemExtensions.BitList.Add(System.Boolean)">
            <inheritdoc />
        </member>
        <member name="M:WhetStone.SystemExtensions.BitList.Clear">
            <inheritdoc />
        </member>
        <member name="M:WhetStone.SystemExtensions.BitList.Contains(System.Boolean)">
            <inheritdoc />
        </member>
        <member name="M:WhetStone.SystemExtensions.BitList.CopyTo(System.Boolean[],System.Int32)">
            <inheritdoc />
        </member>
        <member name="M:WhetStone.SystemExtensions.BitList.Remove(System.Boolean)">
            <inheritdoc />
        </member>
        <member name="P:WhetStone.SystemExtensions.BitList.Count">
            <inheritdoc />
        </member>
        <member name="P:WhetStone.SystemExtensions.BitList.IsReadOnly">
            <inheritdoc />
        </member>
        <member name="M:WhetStone.SystemExtensions.BitList.IndexOf(System.Boolean)">
            <inheritdoc />
        </member>
        <member name="M:WhetStone.SystemExtensions.BitList.Insert(System.Int32,System.Boolean)">
            <inheritdoc />
        </member>
        <member name="M:WhetStone.SystemExtensions.BitList.RemoveAt(System.Int32)">
            <inheritdoc />
        </member>
        <member name="P:WhetStone.SystemExtensions.BitList.Item(System.Int32)">
            <inheritdoc />
        </member>
        <member name="M:WhetStone.SystemExtensions.BitList.SetRange(System.Int32,System.Int32,System.Boolean)">
            <summary>
            Sets an entire range of the list to a particular value.
            </summary>
            <param name="start">The first index in the list set.</param>
            <param name="length">How many elements in the list to set.</param>
            <param name="value">The value to set the range to.</param>
        </member>
        <member name="T:WhetStone.SystemExtensions.copy">
            <summary>
            A static container for identity method
            </summary>
        </member>
        <member name="M:WhetStone.SystemExtensions.copy.Copy``1(``0)">
            <summary>
            Copy the <see cref="T:System.ICloneable"/> while still conserving the type.
            </summary>
            <typeparam name="T">The type of the <see cref="T:System.ICloneable"/>.</typeparam>
            <param name="this">The <see cref="T:System.ICloneable"/> to copy.</param>
            <returns><paramref name="this"/>'s clone converted to a <typeparamref name="T"/>.</returns>
        </member>
        <member name="T:WhetStone.SystemExtensions.throwIf">
            <summary>
            A static container for identity method
            </summary>
        </member>
        <member name="M:WhetStone.SystemExtensions.throwIf.ThrowIfNull``1(``0,System.String)">
            <summary>
            Throw a <see cref="T:System.ArgumentNullException"/> if an object is <see langword="null"/>.
            </summary>
            <typeparam name="T">The type of the object.</typeparam>
            <param name="this">The object to check.</param>
            <param name="paramName">The string of the exception to throw. <see langword="null"/> for generic parameter name.</param>
        </member>
        <member name="M:WhetStone.SystemExtensions.throwIf.throwIfNull``1(``0)">
            <summary>
            Resharper Template for Null checking.
            </summary>
            <param name="x">The value to check.</param>
            <typeparam name="T">The type of the value.</typeparam>
        </member>
        <member name="M:WhetStone.SystemExtensions.throwIf.throwIfAbsurd``1(``0)">
            <summary>
            Resharper Template for Absurdity checking.
            </summary>
            <param name="x">The value to check.</param>
            <typeparam name="T">The type of the value.</typeparam>
        </member>
        <member name="M:WhetStone.SystemExtensions.throwIf.ThrowIfAbsurd(System.Double,System.String,System.Boolean,System.Boolean,System.Boolean,System.Boolean,System.Boolean)">
            <summary>
            Throw a <see cref="T:System.ArgumentNullException"/> if a double is NAN or infinity.
            </summary>
            <param name="this">The double to check.</param>
            <param name="paramName">The string of the exception to throw. <see langword="null"/> for generic parameter name.</param>
            <param name="allowPosInfinity">Whether to allow positive infinity.</param>
            <param name="allowNegInfity">Whether to allow negative infinity.</param>
            <param name="allowNan">Whether to allow NAN.</param>
            <param name="allowZero">Whether to allow 0.</param>
            <param name="allowNegative">Whether to allow negative values.</param>
        </member>
        <member name="M:WhetStone.SystemExtensions.throwIf.ThrowIfAbsurd(System.Int32,System.String,System.Boolean,System.Boolean,System.Boolean)">
            <summary>
            Throw a <see cref="T:System.ArgumentNullException"/> if an int is not positive.
            </summary>
            <param name="this">The double to check.</param>
            <param name="paramName">The string of the exception to throw. <see langword="null"/> for generic parameter name.</param>
            <param name="allowZero">Whether to allow 0.</param>
            <param name="allowOne">Whether to allow 1.</param>
            <param name="allowNeg">Whether to allow negative values.</param>
        </member>
        <member name="M:WhetStone.SystemExtensions.throwIf.ThrowIfAbsurd(System.Int64,System.String,System.Boolean,System.Boolean,System.Boolean)">
            <summary>
            Throw a <see cref="T:System.ArgumentNullException"/> if a long is not positive.
            </summary>
            <param name="this">The double to check.</param>
            <param name="paramName">The string of the exception to throw. <see langword="null"/> for generic parameter name.</param>
            <param name="allowZero">Whether to allow 0.</param>
            <param name="allowOne">Whether to allow 1.</param>
            <param name="allowNeg">Whether to allow negative values.</param>
        </member>
        <member name="M:WhetStone.SystemExtensions.throwIf.ThrowIfAbsurd(System.Nullable{System.Int32},System.String,System.Boolean,System.Boolean,System.Boolean,System.Boolean)">
            <summary>
            Throw a <see cref="T:System.ArgumentNullException"/> if an int? is not positive or null.
            </summary>
            <param name="this">The double to check.</param>
            <param name="paramName">The string of the exception to throw. <see langword="null"/> for generic parameter name.</param>
            <param name="allowZero">Whether to allow 0.</param>
            <param name="allowOne">Whether to allow 1.</param>
            <param name="allowNeg">Whether to allow negative values.</param>
            <param name="allowNull">Whether to allow null</param>
        </member>
        <member name="M:WhetStone.SystemExtensions.throwIf.ThrowIfAbsurd(System.Nullable{System.Int64},System.String,System.Boolean,System.Boolean,System.Boolean,System.Boolean)">
            <summary>
            Throw a <see cref="T:System.ArgumentNullException"/> if an long? is not positive or null.
            </summary>
            <param name="this">The double to check.</param>
            <param name="paramName">The string of the exception to throw. <see langword="null"/> for generic parameter name.</param>
            <param name="allowZero">Whether to allow 0.</param>
            <param name="allowOne">Whether to allow 1.</param>
            <param name="allowNeg">Whether to allow negative values.</param>
            <param name="allowNull">Whether to allow null</param>
        </member>
        <member name="T:WhetStone.SystemExtensions.toGenList">
            <summary>
            A static container for identity method
            </summary>
        </member>
        <member name="M:WhetStone.SystemExtensions.toGenList.ToGeneral``1(System.Collections.Generic.IList{``0})">
            <summary>
            Wraps an <see cref="T:System.Collections.Generic.IList`1"/> in a non-generic <see cref="T:System.Collections.IList"/> wrapper.
            </summary>
            <typeparam name="T">The type of the original <see cref="T:System.Collections.Generic.IList`1"/>.</typeparam>
            <param name="this">the <see cref="T:System.Collections.Generic.IList`1"/> to wrap.</param>
            <returns><paramref name="this"/> wrapped in a non-generic <see cref="T:System.Collections.IList"/> wrapper.</returns>
            <remarks>The wrapper still wraps a generic <see cref="T:System.Collections.Generic.IList`1"/>. Use with caution.</remarks>
        </member>
        <member name="T:WhetStone.SystemExtensions.SystemExtension">
            <summary>
            A static class for common extension methods.
            </summary>
        </member>
        <member name="M:WhetStone.SystemExtensions.SystemExtension.Indicator(System.Boolean)">
            <summary>
            Get 0 or 1 depending on a <see cref="T:System.Boolean"/>.
            </summary>
            <param name="this">The <see cref="T:System.Boolean"/> to use.</param>
            <returns>1 if <paramref name="this"/> is <see langword="true"/>, or 0 otherwise.</returns>
        </member>
        <member name="M:WhetStone.SystemExtensions.SystemExtension.Indicator``1(System.Boolean)">
            <summary>
            Get 0 or 1 depending on a <see cref="T:System.Boolean"/>.
            </summary>
            <param name="this">The <see cref="T:System.Boolean"/> to use.</param>
            <returns>1 if <paramref name="this"/> is <see langword="true"/>, or 0 otherwise.</returns>
        </member>
        <member name="M:WhetStone.SystemExtensions.SystemExtension.Pow(System.Decimal,System.Decimal)">
            <summary>
            Get one <see cref="T:System.Decimal"/> to the power of another.
            </summary>
            <param name="powbase">The base of the power.</param>
            <param name="powpower">The exponent of the power.</param>
            <returns><paramref name="powbase"/> raised to <paramref name="powpower"/>.</returns>
        </member>
        <member name="M:WhetStone.SystemExtensions.SystemExtension.Pow(System.Double,System.Double)">
            <summary>
            Get one <see cref="T:System.Double"/> to the power of another.
            </summary>
            <param name="powbase">The base of the power.</param>
            <param name="powpower">The exponent of the power.</param>
            <returns><paramref name="powbase"/> raised to <paramref name="powpower"/>.</returns>
        </member>
        <member name="M:WhetStone.SystemExtensions.SystemExtension.Pow(System.Single,System.Single)">
            <summary>
            Get one <see cref="T:System.Single"/> to the power of another.
            </summary>
            <param name="powbase">The base of the power.</param>
            <param name="powpower">The exponent of the power.</param>
            <returns><paramref name="powbase"/> raised to <paramref name="powpower"/>.</returns>
        </member>
        <member name="M:WhetStone.SystemExtensions.SystemExtension.Pow(System.Int32,System.Int32)">
            <summary>
            Get one <see cref="T:System.Int32"/> to the power of another.
            </summary>
            <param name="powbase">The base of the power.</param>
            <param name="powpower">The exponent of the power.</param>
            <returns><paramref name="powbase"/> raised to <paramref name="powpower"/>.</returns>
        </member>
        <member name="M:WhetStone.SystemExtensions.SystemExtension.Pow(System.Byte,System.Byte)">
            <summary>
            Get one <see cref="T:System.Byte"/> to the power of another.
            </summary>
            <param name="powbase">The base of the power.</param>
            <param name="powpower">The exponent of the power.</param>
            <returns><paramref name="powbase"/> raised to <paramref name="powpower"/>.</returns>
        </member>
        <member name="M:WhetStone.SystemExtensions.SystemExtension.Pow(System.SByte,System.SByte)">
            <summary>
            Get one <see cref="T:System.SByte"/> to the power of another.
            </summary>
            <param name="powbase">The base of the power.</param>
            <param name="powpower">The exponent of the power.</param>
            <returns><paramref name="powbase"/> raised to <paramref name="powpower"/>.</returns>
        </member>
        <member name="M:WhetStone.SystemExtensions.SystemExtension.Pow(System.Int16,System.Int16)">
            <summary>
            Get one <see cref="T:System.Int16"/> to the power of another.
            </summary>
            <param name="powbase">The base of the power.</param>
            <param name="powpower">The exponent of the power.</param>
            <returns><paramref name="powbase"/> raised to <paramref name="powpower"/>.</returns>
        </member>
        <member name="M:WhetStone.SystemExtensions.SystemExtension.Pow(System.UInt16,System.UInt16)">
            <summary>
            Get one <see cref="T:System.UInt16"/> to the power of another.
            </summary>
            <param name="powbase">The base of the power.</param>
            <param name="powpower">The exponent of the power.</param>
            <returns><paramref name="powbase"/> raised to <paramref name="powpower"/>.</returns>
        </member>
        <member name="M:WhetStone.SystemExtensions.SystemExtension.Pow(System.UInt32,System.UInt32)">
            <summary>
            Get one <see cref="T:System.UInt32"/> to the power of another.
            </summary>
            <param name="powbase">The base of the power.</param>
            <param name="powpower">The exponent of the power.</param>
            <returns><paramref name="powbase"/> raised to <paramref name="powpower"/>.</returns>
        </member>
        <member name="M:WhetStone.SystemExtensions.SystemExtension.Pow(System.Int64,System.Int64)">
            <summary>
            Get one <see cref="T:System.Int64"/> to the power of another.
            </summary>
            <param name="powbase">The base of the power.</param>
            <param name="powpower">The exponent of the power.</param>
            <returns><paramref name="powbase"/> raised to <paramref name="powpower"/>.</returns>
        </member>
        <member name="M:WhetStone.SystemExtensions.SystemExtension.Pow(System.UInt64,System.UInt64)">
            <summary>
            Get one <see cref="T:System.UInt64"/> to the power of another.
            </summary>
            <param name="powbase">The base of the power.</param>
            <param name="powpower">The exponent of the power.</param>
            <returns><paramref name="powbase"/> raised to <paramref name="powpower"/>.</returns>
        </member>
        <member name="M:WhetStone.SystemExtensions.SystemExtension.Pow(System.Numerics.BigInteger,System.Numerics.BigInteger)">
            <summary>
            Get one <see cref="T:System.Numerics.BigInteger"/> to the power of another.
            </summary>
            <param name="a">The base of the power.</param>
            <param name="b">The exponent of the power.</param>
            <returns><paramref name="a"/> raised to <paramref name="b"/>.</returns>
        </member>
        <member name="M:WhetStone.SystemExtensions.SystemExtension.PowMod(System.Int32,System.Int32,System.Int32)">
            <summary>
            Raises an <see cref="T:System.Int32"/> to the power of another with respect to a modulo.
            </summary>
            <param name="powbase">The base of the exponential.</param>
            <param name="power">The exponent of the exponential.</param>
            <param name="modulo">The modulo for the exponential.</param>
            <returns><paramref name="powbase"/> to the power of <paramref name="power"/> modulo <paramref name="modulo"/></returns>
        </member>
        <member name="M:WhetStone.SystemExtensions.SystemExtension.PowMod(System.Int64,System.Int64,System.Int64)">
            <summary>
            Raises an <see cref="T:System.Int64"/> to the power of another with respect to a modulo.
            </summary>
            <param name="powbase">The base of the exponential.</param>
            <param name="power">The exponent of the exponential.</param>
            <param name="modulo">The modulo for the exponential.</param>
            <returns><paramref name="powbase"/> to the power of <paramref name="power"/> modulo <paramref name="modulo"/></returns>
        </member>
        <member name="M:WhetStone.SystemExtensions.SystemExtension.Ceil(System.Double)">
            <summary>
            Rounds a <see cref="T:System.Double"/> up to the nearest integer.
            </summary>
            <param name="a">The <see cref="T:System.Double"/> to round.</param>
            <returns><paramref name="a"/> rounded up.</returns>
            <remarks></remarks>
        </member>
        <member name="M:WhetStone.SystemExtensions.SystemExtension.Floor(System.Double)">
            <summary>
            Rounds a <see cref="T:System.Double"/> down to the nearest integer.
            </summary>
            <param name="a">The <see cref="T:System.Double"/> to round.</param>
            <returns><paramref name="a"/> rounded down.</returns>
        </member>
        <member name="T:WhetStone.Random.ByteEnumeratorGenerator">
            <summary>
            A random generator that utilizes the <see cref="M:WhetStone.Random.RandomGenerator.Bytes"/> to generate an arbitrary length array.
            </summary>
        </member>
        <member name="M:WhetStone.Random.ByteEnumeratorGenerator.Bytes(System.Int32)">
            <inheritdoc />
        </member>
        <member name="M:WhetStone.Random.ByteEnumeratorGenerator.Byte">
            <inheritdoc />
        </member>
        <member name="T:WhetStone.Random.GlobalRandomGenerator">
            <summary>
            A <see cref="T:WhetStone.Random.RandomGenerator"/> that wraps a static instance of a <see cref="T:WhetStone.Random.RandomGenerator"/>.
            </summary>
            <remarks>
            <para>To ensure thread safety, usage of this <see cref="T:WhetStone.Random.RandomGenerator"/> is slightly slower than using <see cref="T:WhetStone.Random.LocalRandomGenerator"/>. Consider creating an instance upon rapid usage.</para>
            <para>Every thread has an independent static <see cref="T:WhetStone.Random.RandomGenerator"/>, this means that advancing one will not advance others.</para>
            </remarks>
        </member>
        <member name="M:WhetStone.Random.GlobalRandomGenerator.Bytes(System.Int32)">
            <inheritdoc />
        </member>
        <member name="M:WhetStone.Random.GlobalRandomGenerator.Byte">
            <inheritdoc />
        </member>
        <member name="M:WhetStone.Random.GlobalRandomGenerator.Double">
            <inheritdoc />
        </member>
        <member name="M:WhetStone.Random.GlobalRandomGenerator.Double(System.Double,System.Double)">
            <inheritdoc />
        </member>
        <member name="M:WhetStone.Random.GlobalRandomGenerator.Int(System.Int32,System.Int32)">
            <inheritdoc />
        </member>
        <member name="M:WhetStone.Random.GlobalRandomGenerator.Reset(System.Threading.Thread,System.Nullable{System.Int32})">
            <summary>
            Resets an instance of the static generator.
            </summary>
            <param name="thread">The thread instance for which to reset the generator.</param>
            <param name="seed">The new seed for which to reset the generator. <see langword="null"/> for a pseudo-random seed.</param>
        </member>
        <member name="M:WhetStone.Random.GlobalRandomGenerator.ThreadLocal">
            <summary>
            Get the thread-unsafe <see cref="T:WhetStone.Random.RandomGenerator"/> reserved for this thread only.
            </summary>
            <returns>The specific <see cref="T:WhetStone.Random.RandomGenerator"/> for the calling thread.</returns>
        </member>
        <member name="T:WhetStone.Random.LocalRandomGenerator">
            <summary>
            A random generator wrapping a <see cref="N:WhetStone.Random"/> object.
            </summary>
        </member>
        <member name="M:WhetStone.Random.LocalRandomGenerator.#ctor(System.Nullable{System.Int32})">
            <summary>
            Constructor
            </summary>
            <param name="seed">The initial seed for the inner <see cref="N:WhetStone.Random"/>. Setting to <see langword="null"/> will generate a seed.</param>
        </member>
        <member name="M:WhetStone.Random.LocalRandomGenerator.#ctor(System.Int32@)">
            <summary>
            Constructor
            </summary>
            <param name="seed">The generated seed for the inner <see cref="N:WhetStone.Random"/>.</param>
        </member>
        <member name="M:WhetStone.Random.LocalRandomGenerator.Bytes(System.Int32)">
            <inheritdoc />
        </member>
        <member name="M:WhetStone.Random.LocalRandomGenerator.Byte">
            <inheritdoc />
        </member>
        <member name="M:WhetStone.Random.LocalRandomGenerator.Double">
            <inheritdoc />
        </member>
        <member name="M:WhetStone.Random.LocalRandomGenerator.Double(System.Double,System.Double)">
            <inheritdoc />
        </member>
        <member name="M:WhetStone.Random.LocalRandomGenerator.Int(System.Int32,System.Int32)">
            <inheritdoc />
        </member>
        <member name="T:WhetStone.Random.pick">
            <summary>
            A static container for identity method
            </summary>
        </member>
        <member name="M:WhetStone.Random.pick.Pick``1(System.Collections.Generic.IEnumerable{``0},WhetStone.Random.RandomGenerator)">
            <summary>
            Get a random element in an <see cref="T:System.Collections.Generic.IEnumerable`1"/>.
            </summary>
            <typeparam name="T">The type of the <see cref="T:System.Collections.Generic.IEnumerable`1"/>.</typeparam>
            <param name="this">The <see cref="T:System.Collections.Generic.IEnumerable`1"/> to search in.</param>
            <param name="gen">The <see cref="T:WhetStone.Random.RandomGenerator"/> to use to roll for a random element. <see langword="null"/> for <see cref="T:WhetStone.Random.GlobalRandomGenerator"/>.</param>
            <returns>A random element from <paramref name="this"/>.</returns>
            <remarks>Running time: O(|<paramref name="this"/>|)</remarks>
        </member>
        <member name="M:WhetStone.Random.pick.Pick``1(System.Collections.Generic.IEnumerable{``0},System.Int32,WhetStone.Random.RandomGenerator)">
            <summary>
            Get random elements in an <see cref="T:System.Collections.Generic.IEnumerable`1"/>.
            </summary>
            <typeparam name="T">The type of the <see cref="T:System.Collections.Generic.IEnumerable`1"/>.</typeparam>
            <param name="this">The <see cref="T:System.Collections.Generic.IEnumerable`1"/> to search in.</param>
            <param name="count">The number of elements to return.</param>
            <param name="gen">The <see cref="T:WhetStone.Random.RandomGenerator"/> to use to roll for a random element. <see langword="null"/> for <see cref="T:WhetStone.Random.GlobalRandomGenerator"/>.</param>
            <returns><paramref name="count"/> random elements from <paramref name="this"/>.</returns>
            <remarks>
            <para>Running time: O(|<paramref name="this"/>| * <paramref name="count"/> / (<paramref name="count"/> + 1))</para>
            <para>The results are sorted by <paramref name="this"/>'s order.</para>
            </remarks>
        </member>
        <member name="M:WhetStone.Random.pick.Pick``1(System.Collections.Generic.IList{``0},WhetStone.Random.RandomGenerator)">
            <summary>
            Get a random element in an <see cref="T:System.Collections.Generic.IList`1"/>.
            </summary>
            <typeparam name="T">The type of the <see cref="T:System.Collections.Generic.IList`1"/>.</typeparam>
            <param name="this">The <see cref="T:System.Collections.Generic.IList`1"/> to search in.</param>
            <param name="gen">The <see cref="T:WhetStone.Random.RandomGenerator"/> to use to roll for a random element. <see langword="null"/> for <see cref="T:WhetStone.Random.GlobalRandomGenerator"/>.</param>
            <returns>A random element from <paramref name="this"/>.</returns>
        </member>
        <member name="M:WhetStone.Random.pick.Pick``1(System.Collections.Generic.IList{``0},System.Int32,WhetStone.Random.RandomGenerator)">
            <summary>
            Get random elements in an <see cref="T:System.Collections.Generic.IList`1"/>.
            </summary>
            <typeparam name="T">The type of the <see cref="T:System.Collections.Generic.IList`1"/>.</typeparam>
            <param name="this">The <see cref="T:System.Collections.Generic.IList`1"/> to search in.</param>
            <param name="count">The number of elements to return.</param>
            <param name="gen">The <see cref="T:WhetStone.Random.RandomGenerator"/> to use to roll for a random element. <see langword="null"/> for <see cref="T:WhetStone.Random.GlobalRandomGenerator"/>.</param>
            <returns><paramref name="count"/> random elements from <paramref name="this"/>.</returns>
            <remarks>
            <para>The results are sorted by <paramref name="this"/>'s order.</para>
            </remarks>
        </member>
        <member name="T:WhetStone.Random.RandomGenerator">
            <summary>
            A class that generates random values.
            </summary>
            <remarks>Either <see cref="M:WhetStone.Random.RandomGenerator.Bytes(System.Int32)"/>, <see cref="M:WhetStone.Random.RandomGenerator.Byte"/>, or <see cref="M:WhetStone.Random.RandomGenerator.Int(System.Int32,System.Int32)"/> must be implemented.</remarks>
        </member>
        <member name="M:WhetStone.Random.RandomGenerator.Bytes(System.Int32)">
            <summary>
            Generate random <see cref="T:System.Byte"/>s in an <see cref="T:System.Array"/>.
            </summary>
            <param name="length">The length of the resultant array.</param>
            <returns>A new <see cref="T:System.Array"/> full of random <see cref="T:System.Byte"/>s.</returns>
        </member>
        <member name="M:WhetStone.Random.RandomGenerator.Bytes">
            <summary>
            Generate random <see cref="T:System.Byte"/>s in an <see cref="T:System.Collections.Generic.IEnumerable`1"/>.
            </summary>
            <returns>A new <see cref="T:System.Collections.Generic.IEnumerable`1"/> full of random <see cref="T:System.Byte"/>s.</returns>
            <remarks>The resultant <see cref="T:System.Collections.Generic.IEnumerable`1"/> might return different members each time it is enumerated.</remarks>
        </member>
        <member name="M:WhetStone.Random.RandomGenerator.Byte">
            <summary>
            Get a random <see cref="T:System.Byte"/>.
            </summary>
            <returns>A randomly generated <see cref="T:System.Byte"/></returns>
        </member>
        <member name="M:WhetStone.Random.RandomGenerator.Int">
            <summary>
            Get a random <see cref="T:System.Int32"/>.
            </summary>
            <returns>A randomly generated <see cref="T:System.Int32"/></returns>
        </member>
        <member name="M:WhetStone.Random.RandomGenerator.Int(System.Int32)">
            <summary>
            Get a random <see cref="T:System.Int32"/>.
            </summary>
            <param name="max">The maximum value that can be returned. exclusive.</param>
            <returns>A randomly generated <see cref="T:System.Int32"/> between 0 and <paramref name="max"/>.</returns>
        </member>
        <member name="M:WhetStone.Random.RandomGenerator.Int(System.Int32,System.Int32)">
            <summary>
            Get a random <see cref="T:System.Int32"/>.
            </summary>
            <param name="min">The minimum value that can be returned. inclusive.</param>
            <param name="max">The maximum value that can be returned. exclusive.</param>
            <returns>A randomly generated <see cref="T:System.Int32"/> between <paramref name="min"/> and <paramref name="max"/>.</returns>
        </member>
        <member name="M:WhetStone.Random.RandomGenerator.Int(System.Int32,System.Int32,System.Boolean)">
            <summary>
            Get a random <see cref="T:System.Int32"/>.
            </summary>
            <param name="min">The minimum value that can be returned. inclusive.</param>
            <param name="max">The maximum value that can be returned.</param>
            <param name="inclusive">Whether <paramref name="max"/> is inclusive or not.</param>
            <returns>A randomly generated <see cref="T:System.Int32"/> between <paramref name="min"/> and <paramref name="max"/>.</returns>
        </member>
        <member name="M:WhetStone.Random.RandomGenerator.Long(System.Int64)">
            <summary>
            Get a random <see cref="T:System.Int64"/>.
            </summary>
            <param name="max">The maximum value that can be returned. exclusive.</param>
            <returns>A randomly generated <see cref="T:System.Int64"/> between 0 and <paramref name="max"/>.</returns>
        </member>
        <member name="M:WhetStone.Random.RandomGenerator.Long(System.Int64,System.Int64)">
            <summary>
            Get a random <see cref="T:System.Int64"/>.
            </summary>
            <param name="min">The minimum value that can be returned. inclusive.</param>
            <param name="max">The maximum value that can be returned. exclusive.</param>
            <returns>A randomly generated <see cref="T:System.Int64"/> between <paramref name="min"/> and <paramref name="max"/>.</returns>
        </member>
        <member name="M:WhetStone.Random.RandomGenerator.Long(System.Int64,System.Int64,System.Boolean)">
            <summary>
            Get a random <see cref="T:System.Int64"/>.
            </summary>
            <param name="min">The minimum value that can be returned. inclusive.</param>
            <param name="max">The maximum value that can be returned.</param>
            <param name="inclusive">Whether <paramref name="max"/> is inclusive or not.</param>
            <returns>A randomly generated <see cref="T:System.Int64"/> between <paramref name="min"/> and <paramref name="max"/>.</returns>
        </member>
        <member name="M:WhetStone.Random.RandomGenerator.ULong(System.UInt64)">
            <summary>
            Get a random <see cref="T:System.UInt64"/>.
            </summary>
            <param name="max">The maximum value that can be returned. exclusive.</param>
            <returns>A randomly generated <see cref="T:System.UInt64"/> between 0 and <paramref name="max"/>.</returns>
        </member>
        <member name="M:WhetStone.Random.RandomGenerator.ULong(System.UInt64,System.UInt64)">
            <summary>
            Get a random <see cref="T:System.UInt64"/>.
            </summary>
            <param name="min">The minimum value that can be returned. inclusive.</param>
            <param name="max">The maximum value that can be returned. exclusive.</param>
            <returns>A randomly generated <see cref="T:System.UInt64"/> between <paramref name="min"/> and <paramref name="max"/>.</returns>
        </member>
        <member name="M:WhetStone.Random.RandomGenerator.ULong(System.UInt64,System.UInt64,System.Boolean)">
            <summary>
            Get a random <see cref="T:System.UInt64"/>.
            </summary>
            <param name="min">The minimum value that can be returned. inclusive.</param>
            <param name="max">The maximum value that can be returned.</param>
            <param name="inclusive">Whether <paramref name="max"/> is inclusive or not.</param>
            <returns>A randomly generated <see cref="T:System.UInt64"/> between <paramref name="min"/> and <paramref name="max"/>.</returns>
        </member>
        <member name="M:WhetStone.Random.RandomGenerator.Double">
            <summary>
            Get a random <see cref="T:System.Double"/> between 0 and 1.
            </summary>
            <returns>A random <see cref="T:System.Double"/> between 0 and 1</returns>
        </member>
        <member name="M:WhetStone.Random.RandomGenerator.Double(System.Double)">
            <summary>
            Get a random <see cref="T:System.Double"/>.
            </summary>
            <param name="max">The maximum value that can be returned. exclusive.</param>
            <returns>A randomly generated <see cref="T:System.Double"/> between 0 and <paramref name="max"/>.</returns>
        </member>
        <member name="M:WhetStone.Random.RandomGenerator.Double(System.Double,System.Double)">
            <summary>
            Get a random <see cref="T:System.Double"/>.
            </summary>
            <param name="min">The minimum value that can be returned. inclusive.</param>
            <param name="max">The maximum value that can be returned. exclusive.</param>
            <returns>A randomly generated <see cref="T:System.Double"/> between <paramref name="min"/> and <paramref name="max"/>.</returns>
        </member>
        <member name="M:WhetStone.Random.RandomGenerator.success(System.Double)">
            <summary>
            get a random <see cref="T:System.Boolean"/>.
            </summary>
            <param name="odds">The likelihood <see langword="true"/> will be returned.</param>
            <returns><see langword="true"/> at likelihood <paramref name="odds"/></returns>
        </member>
        <member name="M:WhetStone.Random.RandomGenerator.Bool(System.Double,System.Double)">
            <summary>
            get a random <see cref="T:System.Boolean"/>.
            </summary>
            <param name="trueodds">Odds <see langword="true"/>  will be returned.</param>
            <param name="falseodds">Odds <see langword="false"/> will be returned.</param>
            <returns>A random <see cref="T:System.Boolean"/> with likelihoods of <paramref name="trueodds"/>:<paramref name="falseodds"/></returns>
        </member>
        <member name="M:WhetStone.Random.RandomGenerator.fromField``1">
            <summary>
            Generate a random element of a generic type using fielding.
            </summary>
            <typeparam name="T">The type of element to generate</typeparam>
            <returns>A randomly generated element of type <typeparamref name="T"/>.</returns>
            <remarks>
            <para>This function uses fielding.</para>
            <para>The field for type <typeparamref name="T"/> must support <see cref="F:WhetStone.Fielding.GenerationType.FromBytes"/> generation.</para>
            </remarks>
        </member>
        <member name="M:WhetStone.Random.RandomGenerator.fromField``1(``0,``0)">
            <summary>
            Generate a random element of a generic type using fielding.
            </summary>
            <typeparam name="T">The type of element to generate</typeparam>
            <param name="min">The minimum value to be generates. Inclusive.</param>
            <param name="max">The maximum value to be generated. Exclusive.</param>
            <returns>A randomly generated element of type <typeparamref name="T"/>.</returns>
            <remarks>
            <para>This function uses fielding.</para>
            <para>The field for type <typeparamref name="T"/> must support <see cref="F:WhetStone.Fielding.GenerationType.FromRange"/> generation.</para>
            </remarks>
        </member>
        <member name="M:WhetStone.Random.RandomGenerator.fromField``1(``0,``0,System.Object)">
            <summary>
            Generate a random element of a generic type using fielding.
            </summary>
            <typeparam name="T">The type of element to generate</typeparam>
            <param name="min">The minimum value to be generates. Inclusive.</param>
            <param name="max">The maximum value to be generated. Exclusive.</param>
            <param name="special">A special value to constrain the generated value.</param>
            <returns>A randomly generated element of type <typeparamref name="T"/>.</returns>
            <remarks>
            <para>This function uses fielding.</para>
            <para>The field for type <typeparamref name="T"/> must support <see cref="F:WhetStone.Fielding.GenerationType.Special"/> generation.</para>
            </remarks>
        </member>
        <member name="T:WhetStone.Random.ShaGenerator">
            <summary>
            A <see cref="T:WhetStone.Random.RandomGenerator"/> using SHA512 hashing to generate <see cref="T:System.Byte"/>s.
            </summary>
        </member>
        <member name="M:WhetStone.Random.ShaGenerator.#ctor(System.Collections.Generic.IEnumerable{System.Byte})">
            <summary>
            Constructor.
            </summary>
            <param name="seed">The initial seed for the SHA generator.</param>
        </member>
        <member name="M:WhetStone.Random.ShaGenerator.Bytes">
            <inheritdoc />
        </member>
        <member name="M:WhetStone.Random.ShaGenerator.Dispose">
            <inheritdoc />
        </member>
        <member name="T:WhetStone.WordPlay.CommonRegex">
            <summary>
            A static library containing common regex patterns for general use.
            </summary>
        </member>
        <member name="F:WhetStone.WordPlay.CommonRegex.RegexDoubleNoSign">
            <summary>
            A regex pattern representing a double without a sign. Either decimal (1.618) or exponential (1618e-3)
            </summary>
        </member>
        <member name="F:WhetStone.WordPlay.CommonRegex.RegexDouble">
            <summary>
            A regex pattern representing a double. Either decimal (-1.618) or exponential (-1618e-3)
            </summary>
        </member>
        <member name="T:WhetStone.WordPlay.convertToString">
            <summary>
            A static container for identity method
            </summary>
        </member>
        <member name="M:WhetStone.WordPlay.convertToString.ConvertToString(System.Collections.Generic.IEnumerable{System.Char})">
            <summary>
            Converts an <see cref="T:System.Collections.Generic.IEnumerable`1"/> of <see cref="T:System.Char"/>s into a <see cref="T:System.String"/>.
            </summary>
            <param name="x">The <see cref="T:System.Collections.Generic.IEnumerable`1"/> to convert.</param>
            <returns>A string formed of <paramref name="x"/>'s characters.</returns>
        </member>
        <member name="T:WhetStone.WordPlay.toString">
            <summary>
            A static container for identity method
            </summary>
        </member>
        <member name="M:WhetStone.WordPlay.toString.ToString(System.IFormattable,System.String)">
            <summary>
            Convert an <see cref="T:System.IFormattable"/> to a <see cref="T:System.String"/> with a specific format but default <see cref="T:System.IFormatProvider"/>.
            </summary>
            <param name="this">The <see cref="T:System.IFormattable"/> to convert.</param>
            <param name="format">The format to use.</param>
            <returns><paramref name="this"/> converted to <see cref="T:System.String"/> under <paramref name="format"/> and <see cref="P:System.Globalization.CultureInfo.CurrentCulture"/>.</returns>
        </member>
        <member name="T:WhetStone.Comparison.EnumerableCompararer`1">
            <summary>
            A comparer that compares <see cref="T:System.Collections.Generic.IEnumerable`1" />s, element-wise, then length-wise.
            </summary>
            <typeparam name="T">The type of the <see cref="T:System.Collections.Generic.IEnumerable`1" />s to compare.</typeparam>
        </member>
        <member name="M:WhetStone.Comparison.EnumerableCompararer`1.#ctor(System.Collections.Generic.IComparer{`0},System.Collections.Generic.IEqualityComparer{`0},System.Nullable{System.Int32})">
            <summary>
            Constructor.
            </summary>
            <param name="i">The inner <see cref="T:System.Collections.Generic.IComparer`1"/> to compare individual elements. <see langword="null"/> for default.</param>
            <param name="eq">The inner <see cref="T:System.Collections.Generic.IEqualityComparer`1"/> to compare and hash individual elements. <see langword="null"/> to use <paramref name="i"/> to compare equality and disallow hashing.</param>
            <param name="hashTake">The maximum number of element to take for the hash function. <see langword="null"/> for no maximum.</param>
        </member>
        <member name="M:WhetStone.Comparison.EnumerableCompararer`1.Compare(System.Collections.Generic.IEnumerable{`0},System.Collections.Generic.IEnumerable{`0})">
            <inheritdoc />
        </member>
        <member name="M:WhetStone.Comparison.EnumerableCompararer`1.Equals(System.Collections.Generic.IEnumerable{`0},System.Collections.Generic.IEnumerable{`0})">
            <inheritdoc />
        </member>
        <member name="M:WhetStone.Comparison.EnumerableCompararer`1.GetHashCode(System.Collections.Generic.IEnumerable{`0})">
            <inheritdoc cref = "M:System.Collections.Generic.IEqualityComparer`1.GetHashCode(`0)"/>
        </member>
        <member name="T:WhetStone.Comparison.FunctionComparer`2">
            <summary>
            A comparer that maps a value from one type to another, for either equality comparison or order comparison.
            </summary>
            <typeparam name="T">The original type to be compared.</typeparam>
            <typeparam name="G">The mapped type to compare.</typeparam>
        </member>
        <member name="M:WhetStone.Comparison.FunctionComparer`2.#ctor(System.Func{`0,`1},System.Collections.Generic.IComparer{`1},System.Collections.Generic.IEqualityComparer{`1})">
            <summary>
            Constructor.
            </summary>
            <param name="f">The mapper function to map from <typeparamref name="T"/> to <typeparamref name="G"/>.</param>
            <param name="c">The internal <see cref="T:System.Collections.Generic.IComparer`1"/> to compare mapped elements with. <see langword="null"/> for default.</param>
            <param name="e">the internal <see cref="T:System.Collections.Generic.IEqualityComparer`1"/> to hash and compare equality of mapped elements with. <see langword="null"/> for <paramref name="c"/> to compare equality and default hasher.</param>
        </member>
        <member name="M:WhetStone.Comparison.FunctionComparer`2.Compare(`0,`0)">
            <inheritdoc />
        </member>
        <member name="M:WhetStone.Comparison.FunctionComparer`2.Equals(`0,`0)">
            <inheritdoc />
        </member>
        <member name="M:WhetStone.Comparison.FunctionComparer`2.GetHashCode(`0)">
            <inheritdoc />
        </member>
        <member name="T:WhetStone.Comparison.minmax">
            <summary>
            A static container for identity method
            </summary>
        </member>
        <member name="M:WhetStone.Comparison.minmax.MinMax(System.Int32@,System.Int32@)">
            <summary>
            Reorganizes two values to have strict order.
            </summary>
            <param name="min">The smaller value.</param>
            <param name="max">The larger value.</param>
            <returns>Whether the two values were switched.</returns>
        </member>
        <member name="M:WhetStone.Comparison.minmax.MinMax(System.Numerics.BigInteger@,System.Numerics.BigInteger@)">
            <summary>
            Reorganizes two values to have strict order.
            </summary>
            <param name="min">The smaller value.</param>
            <param name="max">The larger value.</param>
            <returns>Whether the two values were switched.</returns>
        </member>
        <member name="M:WhetStone.Comparison.minmax.MinMax(System.Double@,System.Double@)">
            <summary>
            Reorganizes two values to have strict order.
            </summary>
            <param name="min">The smaller value.</param>
            <param name="max">The larger value.</param>
            <returns>Whether the two values were switched.</returns>
        </member>
        <member name="M:WhetStone.Comparison.minmax.MinMax``1(``0@,``0@,System.Collections.Generic.IComparer{``0})">
            <summary>
            Reorganizes two values to have strict order.
            </summary>
            <typeparam name="T">The type of the values</typeparam>
            <param name="min">The smaller value.</param>
            <param name="max">The larger value.</param>
            <param name="comp">The <see cref="T:System.Collections.Generic.IComparer`1"/> to compare the values.</param>
            <returns>Whether the two values were switched.</returns>
        </member>
        <member name="T:WhetStone.Comparison.PriorityComparer`1">
            <summary>
            An <see cref="T:System.Collections.Generic.IComparer`1"/> that compares elements through multiple <see cref="T:System.Collections.Generic.IComparer`1"/>s, returning the first inequality.
            </summary>
            <typeparam name="T">The type of elements to compare.</typeparam>
        </member>
        <member name="M:WhetStone.Comparison.PriorityComparer`1.#ctor(System.Collections.Generic.IComparer{`0}[])">
            <summary>
            Constructor.
            </summary>
            <param name="c">The <see cref="T:System.Collections.Generic.IComparer`1"/> to use.</param>
        </member>
        <member name="M:WhetStone.Comparison.PriorityComparer`1.Compare(`0,`0)">
            <inheritdoc />
        </member>
        <member name="T:WhetStone.Comparison.ReverseComparer">
            <summary>
            A static container for identity method
            </summary>
        </member>
        <member name="M:WhetStone.Comparison.ReverseComparer.Reverse``1(System.Collections.Generic.IComparer{``0})">
            <summary>
            Get an <see cref="T:System.Collections.Generic.IComparer`1"/> that is reverse of another.
            </summary>
            <typeparam name="T">The type of the <see cref="T:System.Collections.Generic.IComparer`1"/></typeparam>
            <param name="comp">The <see cref="T:System.Collections.Generic.IComparer`1"/> to reverse.</param>
            <returns>A reversed <see cref="T:System.Collections.Generic.IComparer`1"/> that creates an opposite order than <paramref name="comp"/>.</returns>
        </member>
        <member name="T:WhetStone.Comparison.TupleEqualityComparer`2">
            <summary>
            An <see cref="T:System.Collections.Generic.IEqualityComparer`1"/> for <see cref="T:System.ValueTuple`2"/>
            </summary>
            <typeparam name="T1">The first type of the tuple.</typeparam>
            <typeparam name="T2">The second type of the tuple.</typeparam>
        </member>
        <member name="M:WhetStone.Comparison.TupleEqualityComparer`2.#ctor(System.Collections.Generic.IEqualityComparer{`0},System.Collections.Generic.IEqualityComparer{`1})">
            <summary>
            Constructor.
            </summary>
            <param name="c1">The comparer between the first elements. <see langword="null"/> for default.</param>
            <param name="c2">The comparer between the second elements. <see langword="null"/> for default.</param>
        </member>
        <member name="M:WhetStone.Comparison.TupleEqualityComparer`2.Equals(System.ValueTuple{`0,`1},System.ValueTuple{`0,`1})">
            <inheritdoc />
        </member>
        <member name="M:WhetStone.Comparison.TupleEqualityComparer`2.GetHashCode(System.ValueTuple{`0,`1})">
            <inheritdoc />
        </member>
        <member name="T:WhetStone.Comparison.TupleEqualityComparer`3">
            <summary>
            An <see cref="T:System.Collections.Generic.IEqualityComparer`1"/> for <see cref="T:System.Tuple`2"/>
            </summary>
            <typeparam name="T1">The first type of the tuple.</typeparam>
            <typeparam name="T2">The second type of the tuple.</typeparam>
            <typeparam name="T3">The third type of the tuple.</typeparam>
        </member>
        <member name="M:WhetStone.Comparison.TupleEqualityComparer`3.#ctor(System.Collections.Generic.IEqualityComparer{`0},System.Collections.Generic.IEqualityComparer{`1},System.Collections.Generic.IEqualityComparer{`2})">
            <summary>
            Constructor.
            </summary>
            <param name="c1">The comparer between the first elements. <see langword="null"/> for default.</param>
            <param name="c2">The comparer between the second elements. <see langword="null"/> for default.</param>
            <param name="c3">The comparer between the third elements. <see langword="null"/> for default.</param>
        </member>
        <member name="M:WhetStone.Comparison.TupleEqualityComparer`3.Equals(System.Tuple{`0,`1,`2},System.Tuple{`0,`1,`2})">
            <inheritdoc />
        </member>
        <member name="M:WhetStone.Comparison.TupleEqualityComparer`3.GetHashCode(System.Tuple{`0,`1,`2})">
            <inheritdoc />
        </member>
        <member name="T:WhetStone.Fielding.FieldWrapper`1">
            <summary>
            A wrapper for an element, allowing for easy <see cref="T:WhetStone.Fielding.Field`1"/> functionality.
            </summary>
            <typeparam name="T">The type of the original wrapped element.</typeparam>
        </member>
        <member name="M:WhetStone.Fielding.FieldWrapper`1.#ctor(`0)">
            <summary>
            Constructor.
            </summary>
            <param name="val">The element to wrap.</param>
        </member>
        <member name="M:WhetStone.Fielding.FieldWrapper`1.#ctor(System.Int32)">
            <summary>
            Constructor.
            </summary>
            <param name="i">The <see cref="T:System.Int32"/> equivalent element to wrap.</param>
        </member>
        <member name="M:WhetStone.Fielding.FieldWrapper`1.#ctor(System.Double)">
            <summary>
            Constructor.
            </summary>
            <param name="i">The <see cref="T:System.Double"/> equivalent element to wrap.</param>
        </member>
        <member name="M:WhetStone.Fielding.FieldWrapper`1.#ctor(System.UInt64)">
            <summary>
            Constructor.
            </summary>
            <param name="i">The <see cref="T:System.UInt64"/> equivalent element to wrap.</param>
        </member>
        <member name="P:WhetStone.Fielding.FieldWrapper`1.val">
            <summary>
            The wrapped value.
            </summary>
        </member>
        <member name="M:WhetStone.Fielding.FieldWrapper`1.op_Implicit(`0)~WhetStone.Fielding.FieldWrapper{`0}">
            <summary>
            Converts an element by wrapping it.
            </summary>
            <param name="w">The element to wrap.</param>
        </member>
        <member name="M:WhetStone.Fielding.FieldWrapper`1.op_Implicit(System.Int32)~WhetStone.Fielding.FieldWrapper{`0}">
            <summary>
            Converts an element by wrapping it.
            </summary>
            <param name="w">The <see cref="T:System.Int32"/> equivalent element to wrap.</param>
        </member>
        <member name="M:WhetStone.Fielding.FieldWrapper`1.op_Implicit(System.Double)~WhetStone.Fielding.FieldWrapper{`0}">
            <summary>
            Converts an element by wrapping it.
            </summary>
            <param name="w">The <see cref="T:System.Double"/> equivalent element to wrap.</param>
        </member>
        <member name="M:WhetStone.Fielding.FieldWrapper`1.op_Implicit(System.UInt64)~WhetStone.Fielding.FieldWrapper{`0}">
            <summary>
            Converts an element by wrapping it.
            </summary>
            <param name="w">The <see cref="T:System.UInt64"/> equivalent element to wrap.</param>
        </member>
        <member name="M:WhetStone.Fielding.FieldWrapper`1.Log(`0)">
            <summary>
            Get the logarithm of the element.
            </summary>
            <param name="base">The base for the logarithm function.</param>
            <returns>The logarithm of <see cref="P:WhetStone.Fielding.FieldWrapper`1.val"/> and <paramref name="base"/>.</returns>
        </member>
        <member name="M:WhetStone.Fielding.FieldWrapper`1.Abs">
            <summary>
            Get the absolute value of the element.
            </summary>
            <returns><see cref="P:WhetStone.Fielding.FieldWrapper`1.val"/>'s absolute value.</returns>
        </member>
        <member name="M:WhetStone.Fielding.FieldWrapper`1.Pow(WhetStone.Fielding.FieldWrapper{`0})">
            <summary>
            Get the element raised to an exponent.
            </summary>
            <param name="p">The exponent.</param>
            <returns><see cref="P:WhetStone.Fielding.FieldWrapper`1.val"/> rasied to <paramref name="p"/>.</returns>
        </member>
        <member name="M:WhetStone.Fielding.FieldWrapper`1.PowInt(System.Int32)">
            <summary>
            Get the element raised to an exponent.
            </summary>
            <param name="p">The exponent.</param>
            <returns><see cref="P:WhetStone.Fielding.FieldWrapper`1.val"/> raised to <paramref name="p"/>.</returns>
        </member>
        <member name="M:WhetStone.Fielding.FieldWrapper`1.Invert">
            <summary>
            Gets the inverted value of <see cref="P:WhetStone.Fielding.FieldWrapper`1.val"/>.
            </summary>
            <returns>A <see cref="T:WhetStone.Fielding.FieldWrapper`1"/> wrapping <see cref="P:WhetStone.Fielding.FieldWrapper`1.val"/>'s inverted value.</returns>
        </member>
        <member name="M:WhetStone.Fielding.FieldWrapper`1.op_Implicit(WhetStone.Fielding.FieldWrapper{`0})~`0">
            <summary>
            Convert a <see cref="T:WhetStone.Fielding.FieldWrapper`1"/> to its underlying type.
            </summary>
            <param name="w">The <see cref="T:WhetStone.Fielding.FieldWrapper`1"/> to convert.</param>
        </member>
        <member name="M:WhetStone.Fielding.FieldWrapper`1.op_Explicit(WhetStone.Fielding.FieldWrapper{`0})~System.Nullable{System.Double}">
            <summary>
            Convert a <see cref="T:WhetStone.Fielding.FieldWrapper`1"/> to a nullable <see cref="T:System.Double"/>.
            </summary>
            <param name="w">The <see cref="T:WhetStone.Fielding.FieldWrapper`1"/> to convert.</param>
        </member>
        <member name="M:WhetStone.Fielding.FieldWrapper`1.op_Explicit(WhetStone.Fielding.FieldWrapper{`0})~System.Double">
            <summary>
            Convert a <see cref="T:WhetStone.Fielding.FieldWrapper`1"/> to a nullable <see cref="T:System.Double"/>.
            </summary>
            <param name="w">The <see cref="T:WhetStone.Fielding.FieldWrapper`1"/> to convert.</param>
            <exception cref="T:System.InvalidCastException">If the <see cref="T:WhetStone.Fielding.Field`1"/>'s double conversion failed.</exception>
        </member>
        <member name="M:WhetStone.Fielding.FieldWrapper`1.op_Addition(WhetStone.Fielding.FieldWrapper{`0},WhetStone.Fielding.FieldWrapper{`0})">
            <summary>
            Adds two <see cref="T:WhetStone.Fielding.FieldWrapper`1"/>s.
            </summary>
            <param name="w1">The first addend.</param>
            <param name="w2">The second addend.</param>
            <returns>The sum of <paramref name="w1"/> and <paramref name="w2"/>.</returns>
        </member>
        <member name="M:WhetStone.Fielding.FieldWrapper`1.op_Multiply(WhetStone.Fielding.FieldWrapper{`0},WhetStone.Fielding.FieldWrapper{`0})">
            <summary>
            Multiplies two <see cref="T:WhetStone.Fielding.FieldWrapper`1"/>s.
            </summary>
            <param name="w1">The first multiplicand.</param>
            <param name="w2">The second multiplicand.</param>
            <returns>The product of <paramref name="w1"/> and <paramref name="w2"/>.</returns>
        </member>
        <member name="M:WhetStone.Fielding.FieldWrapper`1.op_Subtraction(WhetStone.Fielding.FieldWrapper{`0},WhetStone.Fielding.FieldWrapper{`0})">
            <summary>
            Subtracts two <see cref="T:WhetStone.Fielding.FieldWrapper`1"/>s.
            </summary>
            <param name="w1">The minuend.</param>
            <param name="w2">The subtrahend.</param>
            <returns>The difference of <paramref name="w1"/> and <paramref name="w2"/>.</returns>
        </member>
        <member name="M:WhetStone.Fielding.FieldWrapper`1.op_UnaryNegation(WhetStone.Fielding.FieldWrapper{`0})">
            <summary>
            Negates a <see cref="T:WhetStone.Fielding.FieldWrapper`1"/>.
            </summary>
            <param name="w1">The element to negate.</param>
            <returns>The negative of <paramref name="w1"/>.</returns>
        </member>
        <member name="M:WhetStone.Fielding.FieldWrapper`1.op_Division(WhetStone.Fielding.FieldWrapper{`0},WhetStone.Fielding.FieldWrapper{`0})">
            <summary>
            Divides two <see cref="T:WhetStone.Fielding.FieldWrapper`1"/>s.
            </summary>
            <param name="w1">The dividend.</param>
            <param name="w2">The divisor.</param>
            <returns>The quotient of <paramref name="w1"/> and <paramref name="w2"/>.</returns>
        </member>
        <member name="M:WhetStone.Fielding.FieldWrapper`1.op_Modulus(WhetStone.Fielding.FieldWrapper{`0},WhetStone.Fielding.FieldWrapper{`0})">
            <summary>
            Modulo two <see cref="T:WhetStone.Fielding.FieldWrapper`1"/>s.
            </summary>
            <param name="w1">The dividend.</param>
            <param name="w2">The divisor.</param>
            <returns>The modulo of <paramref name="w1"/> and <paramref name="w2"/>.</returns>
        </member>
        <member name="M:WhetStone.Fielding.FieldWrapper`1.op_ExclusiveOr(WhetStone.Fielding.FieldWrapper{`0},WhetStone.Fielding.FieldWrapper{`0})">
            <summary>
            Raises a <see cref="T:WhetStone.Fielding.FieldWrapper`1"/> to the power of another.
            </summary>
            <param name="w1">The base.</param>
            <param name="w2">The exponent.</param>
            <returns>The power of <paramref name="w1"/> and <paramref name="w2"/>.</returns>
        </member>
        <member name="M:WhetStone.Fielding.FieldWrapper`1.op_ExclusiveOr(WhetStone.Fielding.FieldWrapper{`0},System.Int32)">
            <summary>
            Raises a <see cref="T:WhetStone.Fielding.FieldWrapper`1"/> to the power of an integer.
            </summary>
            <param name="w1">The base.</param>
            <param name="w2">The exponent.</param>
            <returns>The power of <paramref name="w1"/> and <paramref name="w2"/>.</returns>
        </member>
        <member name="M:WhetStone.Fielding.FieldWrapper`1.op_LessThanOrEqual(WhetStone.Fielding.FieldWrapper{`0},WhetStone.Fielding.FieldWrapper{`0})">
            <summary>
            Compare two <see cref="T:WhetStone.Fielding.FieldWrapper`1"/>s.
            </summary>
            <param name="w1">The first <see cref="T:WhetStone.Fielding.FieldWrapper`1"/> to compare</param>
            <param name="w2">The second <see cref="T:WhetStone.Fielding.FieldWrapper`1"/> to compare</param>
            <returns>Whether <paramref name="w1"/> is less than or equal to <paramref name="w2"/>.</returns>
        </member>
        <member name="M:WhetStone.Fielding.FieldWrapper`1.op_GreaterThanOrEqual(WhetStone.Fielding.FieldWrapper{`0},WhetStone.Fielding.FieldWrapper{`0})">
            <summary>
            Compare two <see cref="T:WhetStone.Fielding.FieldWrapper`1"/>s.
            </summary>
            <param name="w1">The first <see cref="T:WhetStone.Fielding.FieldWrapper`1"/> to compare</param>
            <param name="w2">The second <see cref="T:WhetStone.Fielding.FieldWrapper`1"/> to compare</param>
            <returns>Whether <paramref name="w1"/> is greater than or equal to <paramref name="w2"/>.</returns>
        </member>
        <member name="M:WhetStone.Fielding.FieldWrapper`1.op_LessThan(WhetStone.Fielding.FieldWrapper{`0},WhetStone.Fielding.FieldWrapper{`0})">
            <summary>
            Compare two <see cref="T:WhetStone.Fielding.FieldWrapper`1"/>s.
            </summary>
            <param name="w1">The first <see cref="T:WhetStone.Fielding.FieldWrapper`1"/> to compare</param>
            <param name="w2">The second <see cref="T:WhetStone.Fielding.FieldWrapper`1"/> to compare</param>
            <returns>Whether <paramref name="w1"/> is less than <paramref name="w2"/>.</returns>
        </member>
        <member name="M:WhetStone.Fielding.FieldWrapper`1.op_GreaterThan(WhetStone.Fielding.FieldWrapper{`0},WhetStone.Fielding.FieldWrapper{`0})">
            <summary>
            Compare two <see cref="T:WhetStone.Fielding.FieldWrapper`1"/>s.
            </summary>
            <param name="w1">The first <see cref="T:WhetStone.Fielding.FieldWrapper`1"/> to compare</param>
            <param name="w2">The second <see cref="T:WhetStone.Fielding.FieldWrapper`1"/> to compare</param>
            <returns>Whether <paramref name="w1"/> is greater than <paramref name="w2"/>.</returns>
        </member>
        <member name="M:WhetStone.Fielding.FieldWrapper`1.Equals(System.Object)">
            <inheritdoc />
        </member>
        <member name="M:WhetStone.Fielding.FieldWrapper`1.GetHashCode">
            <inheritdoc />
        </member>
        <member name="M:WhetStone.Fielding.FieldWrapper`1.Equals(`0)">
            <inheritdoc />
        </member>
        <member name="M:WhetStone.Fielding.FieldWrapper`1.Equals(WhetStone.Fielding.FieldWrapper{`0})">
            <inheritdoc />
        </member>
        <member name="M:WhetStone.Fielding.FieldWrapper`1.ToString">
            <inheritdoc />
        </member>
        <member name="M:WhetStone.Fielding.FieldWrapper`1.CompareTo(`0)">
            <inheritdoc />
        </member>
        <member name="M:WhetStone.Fielding.FieldWrapper`1.CompareTo(WhetStone.Fielding.FieldWrapper{`0})">
            <inheritdoc />
        </member>
        <member name="P:WhetStone.Fielding.FieldWrapper`1.Field">
            <summary>
            Get the <see cref="T:WhetStone.Fielding.Field`1"/> used for all arithmetic operations.
            </summary>
        </member>
        <member name="P:WhetStone.Fielding.FieldWrapper`1.isNegative">
            <summary>
            Get whether the element is strictly negative.
            </summary>
        </member>
        <member name="P:WhetStone.Fielding.FieldWrapper`1.isPositive">
            <summary>
            Get whether the element is strictly positive.
            </summary>
        </member>
        <member name="P:WhetStone.Fielding.FieldWrapper`1.isZero">
            <summary>
            Get whether the element is zero.
            </summary>
        </member>
        <member name="P:WhetStone.Fielding.FieldWrapper`1.isOne">
            <summary>
            Get whether the element is one.
            </summary>
        </member>
        <member name="M:WhetStone.Fielding.FieldWrapper`1.Deconstruct(`0@,WhetStone.Fielding.Field{`0}@)">
            <summary>
            Deconstruct the wrapped member to an original member and wrapping field.
            </summary>
            <param name="value">The wrapped value.</param>
            <param name="field">The wrapping field.</param>
        </member>
        <member name="T:WhetStone.Fielding.Field">
            <summary>
            A non-generic interface for all <see cref="T:WhetStone.Fielding.Field`1"/>s to use.
            </summary>
        </member>
        <member name="P:WhetStone.Fielding.Field.SubjectType">
            <summary>
            Get the type the <see cref="T:WhetStone.Fielding.Field"/> affects.
            </summary>
        </member>
        <member name="T:WhetStone.Fielding.GenerationType">
            <summary>
            The arguments needed to generate an arbitrary of a certain type.
            </summary>
        </member>
        <member name="F:WhetStone.Fielding.GenerationType.Never">
            <summary>
            An arbitrary value cannot be created.
            </summary>
        </member>
        <member name="F:WhetStone.Fielding.GenerationType.FromBytes">
            <summary>
            An arbitrary value can be created only with an enumeration of bytes.
            </summary>
        </member>
        <member name="F:WhetStone.Fielding.GenerationType.FromRange">
            <summary>
            An  arbitrary value can be created with an enumeration of bytes, but can also be created with a range bounding the generated value.
            </summary>
        </member>
        <member name="F:WhetStone.Fielding.GenerationType.Special">
            <summary>
            An arbitrary value can be created, but special constraints or arguments are necessary.
            </summary>
        </member>
        <member name="T:WhetStone.Fielding.Field`1">
            <summary>
            A universal class storing arithmetic operations for a certain type.
            </summary>
            <typeparam name="T">The type to affect.</typeparam>
        </member>
        <member name="P:WhetStone.Fielding.Field`1.zero">
            <summary>
            The additive identity of the type.
            </summary>
            <remarks>
            If addition and multiplication are defined, the following should be true for any a of type <typeparamref name="T"/>:
            a+<c>zero</c> == a
            a*<c>zero</c> == <c>zero</c>
            </remarks>
        </member>
        <member name="P:WhetStone.Fielding.Field`1.one">
            <summary>
            The multiplicative identity of the type.
            </summary>
            <remarks>
            If multiplication is defined, the following should be true for any a of type <typeparamref name="T"/>:
            a*<c>one</c> == <c>one</c>
            </remarks>
        </member>
        <member name="P:WhetStone.Fielding.Field`1.negativeOne">
            <summary>
            The negative identity of the type.
            </summary>
            <remarks>
            If addition and multiplication are defined, the following should be true for any a of type <typeparamref name="T"/>:
            a*<c>negative one</c> + a == <c>zero</c>
            </remarks>
        </member>
        <member name="M:WhetStone.Fielding.Field`1.Negate(`0)">
            <summary>
            Get the negative of an object.
            </summary>
            <param name="x">The number to negate.</param>
            <returns>The negative value of <paramref name="x"/>.</returns>
        </member>
        <member name="M:WhetStone.Fielding.Field`1.Invert(`0)">
            <summary>
            Get the inverse of an object.
            </summary>
            <param name="x">The number to invert.</param>
            <returns>The inverse value of <paramref name="x"/>.</returns>
        </member>
        <member name="M:WhetStone.Fielding.Field`1.Product(`0,`0)">
            <summary>
            Get the product of two elements.
            </summary>
            <param name="a">The first multiplicand.</param>
            <param name="b">The second multiplicand.</param>
            <returns>The product of <paramref name="a"/> and <paramref name="b"/>.</returns>
        </member>
        <member name="M:WhetStone.Fielding.Field`1.Quotient(`0,`0)">
            <summary>
            Get the quotient of two elements.
            </summary>
            <param name="a">The dividend.</param>
            <param name="b">The divisor.</param>
            <returns>The quotient <paramref name="a"/> and <paramref name="b"/>.</returns>
        </member>
        <member name="M:WhetStone.Fielding.Field`1.Sum(`0,`0)">
            <summary>
            Get the sum of two elements.
            </summary>
            <param name="a">The first addend.</param>
            <param name="b">The second addend.</param>
            <returns>The sum of <paramref name="a"/> and <paramref name="b"/></returns>
        </member>
        <member name="M:WhetStone.Fielding.Field`1.Difference(`0,`0)">
            <summary>
            Get the difference between two elements.
            </summary>
            <param name="a">The minuend.</param>
            <param name="b">The subtrahend.</param>
            <returns>The difference between <paramref name="a"/> and <paramref name="b"/>.</returns>
        </member>
        <member name="M:WhetStone.Fielding.Field`1.Pow(`0,`0)">
            <summary>
            Get the power of two elements.
            </summary>
            <param name="a">The base.</param>
            <param name="b">The exponential.</param>
            <returns><paramref name="a"/> to the power of <paramref name="b"/>.</returns>
        </member>
        <member name="M:WhetStone.Fielding.Field`1.Log(`0,`0)">
            <summary>
            Get the logarithm of two elements.
            </summary>
            <param name="a">The antilogarithm.</param>
            <param name="b">The base.</param>
            <returns>The logarithm of <paramref name="a"/> in base <paramref name="b"/>.</returns>
        </member>
        <member name="M:WhetStone.Fielding.Field`1.Modulo(`0,`0)">
            <summary>
            Get the modulo of two elements.
            </summary>
            <param name="a">The dividend.</param>
            <param name="b">The divisor.</param>
            <returns>The modulo of <paramref name="a"/> and <paramref name="b"/>.</returns>
        </member>
        <member name="M:WhetStone.Fielding.Field`1.toDouble(`0)">
            <summary>
            Attempts to convert an element to <see cref="T:System.Double"/>.
            </summary>
            <param name="a">The element to convert to double.</param>
            <returns><paramref name="a"/> converted to a double,  or <see langword="null"/> if conversion is impossible.</returns>
        </member>
        <member name="P:WhetStone.Fielding.Field`1.Invertible">
            <summary>
            Get whether every (non-<see cref="P:WhetStone.Fielding.Field`1.zero"/>) element in the field can be inverted.
            </summary>
        </member>
        <member name="P:WhetStone.Fielding.Field`1.Negatable">
            <summary>
            Get whether every element in the field can be negated.
            </summary>
        </member>
        <member name="M:WhetStone.Fielding.Field`1.isNegative(`0)">
            <summary>
            Get whether an element is negative.
            </summary>
            <param name="x">The element to check.</param>
            <returns>Whether <paramref name="x"/> is strictly negative (<see cref="P:WhetStone.Fielding.Field`1.zero"/> is not negative).</returns>
        </member>
        <member name="M:WhetStone.Fielding.Field`1.isPositive(`0)">
            <summary>
            Get whether an element is positive.
            </summary>
            <param name="x">The element to check.</param>
            <returns>Whether <paramref name="x"/> is strictly positive (<see cref="P:WhetStone.Fielding.Field`1.zero"/> is not negative).</returns>
        </member>
        <member name="P:WhetStone.Fielding.Field`1.GenType">
            <summary>
            The generation type for <typeparamref name="T"/>.
            </summary>
        </member>
        <member name="M:WhetStone.Fielding.Field`1.Generate(System.Collections.Generic.IEnumerable{System.Byte},System.Nullable{System.ValueTuple{`0,`0}},System.Object)">
            <summary>
            Generate an element of the type.
            </summary>
            <param name="bytes">A {potentially infinite) <see cref="T:System.Collections.Generic.IEnumerable`1"/> of bytes to serve as the generation seed of the element.</param>
            <param name="bounds">The bounds in which to constrain the created element. The first element is inclusive, the second is exclusive.</param>
            <param name="special">Special constraints for the created element.</param>
            <returns>An element created from the bytes and the constraints.</returns>
        </member>
        <member name="M:WhetStone.Fielding.Field`1.Compare(`0,`0)">
            <inheritdoc />
        </member>
        <member name="P:WhetStone.Fielding.Field`1.SubjectType">
            <inheritdoc />
        </member>
        <member name="M:WhetStone.Fielding.Field`1.Abs(`0)">
            <summary>
            Returns the absolute value of an element.
            </summary>
            <param name="x">The element to turn to absolute value.</param>
            <returns><paramref name="x"/>'s absolute value.</returns>
        </member>
        <member name="M:WhetStone.Fielding.Field`1.fromInt(System.UInt64)">
            <summary>
            Returns an element from an integer.
            </summary>
            <param name="x">The integer to generate the element from.</param>
            <returns>An element corresponding to an integer <paramref name="x"/>.</returns>
        </member>
        <member name="M:WhetStone.Fielding.Field`1.fromInt(System.Int32)">
            <summary>
            Returns an element from an integer.
            </summary>
            <param name="x">The integer to generate the element from.</param>
            <returns>An element corresponding to an integer <paramref name="x"/>.</returns>
        </member>
        <member name="M:WhetStone.Fielding.Field`1.fromFraction(System.Double)">
            <summary>
            Returns an element from a double.
            </summary>
            <param name="a">The double to generate the element from.</param>
            <returns>An element corresponding to a double <paramref name="a"/>.</returns>
        </member>
        <member name="M:WhetStone.Fielding.Field`1.fromFraction(System.Int32,System.Int32)">
            <summary>
            Returns an element from a fraction.
            </summary>
            <param name="numerator">The numerator of the fraction.</param>
            <param name="denominator">The denominator of the fraction.</param>
            <returns>An element corresponding to the fraction of <paramref name="numerator"/> and <paramref name="denominator"/>.</returns>
        </member>
        <member name="M:WhetStone.Fielding.Field`1.PowInt(`0,System.Int32)">
            <summary>
            Returns an element raised to an integer power.
            </summary>
            <param name="base">The element to raise.</param>
            <param name="x">The integer exponent.</param>
            <returns><paramref name="base"/> raised to <paramref name="x"/>.</returns>
        </member>
        <member name="M:WhetStone.Fielding.Field`1.Equals(`0,`0)">
            <inheritdoc />
        </member>
        <member name="M:WhetStone.Fielding.Field`1.GetHashCode(`0)">
            <inheritdoc />
        </member>
        <member name="M:WhetStone.Fielding.Field`1.Parse(System.String)">
            <summary>
            Parse a string into an element.
            </summary>
            <param name="s">The string to parse.</param>
            <returns>An element parsed from <paramref name="s"/>.</returns>
        </member>
        <member name="P:WhetStone.Fielding.Field`1.Min">
            <summary>
            The smallest element the type can contain.
            </summary>
        </member>
        <member name="P:WhetStone.Fielding.Field`1.Max">
            <summary>
            The largest element the type can contain.
            </summary>
        </member>
        <member name="T:WhetStone.Fielding.Fields">
            <summary>
            A central storage of all fields, allowing for easy field lookup.
            </summary>
        </member>
        <member name="M:WhetStone.Fielding.Fields.getField``1">
            <summary>
            Returns a <see cref="T:WhetStone.Fielding.Field`1"/> relevant to type <typeparamref name="T"/>.
            </summary>
            <typeparam name="T">The type return a <see cref="T:WhetStone.Fielding.Field`1"/> for.</typeparam>
            <returns>A new <see cref="T:WhetStone.Fielding.Field`1"/> relevant for type |<typeparamref name="T"/></returns>
            <remarks>
            <para>Will first look up for a field in the central dictionary. If it doesn't exist, it calls <typeparamref name="T"/>'s static constructor and looks up again. If it still doesn't exist, it returns a dynamic <see cref="T:WhetStone.Fielding.Field`1"/>.</para>
            </remarks>
        </member>
        <member name="M:WhetStone.Fielding.Fields.setField``1(WhetStone.Fielding.Field{``0})">
            <summary>
            Sets the <see cref="T:WhetStone.Fielding.Field`1"/> for type <typeparamref name="T"/>.
            </summary>
            <typeparam name="T">The type of the <see cref="T:WhetStone.Fielding.Field`1"/>'s subject type.</typeparam>
            <param name="f">The <see cref="T:WhetStone.Fielding.Field`1"/> to set to the type.</param>
            <returns>Whether or not a <see cref="T:WhetStone.Fielding.Field`1"/> was set for this type already.</returns>
            <remarks>If a <see cref="T:WhetStone.Fielding.Field`1"/> was already set for the type, it is overridden.</remarks>
        </member>
        <member name="M:WhetStone.Fielding.Fields.ToFieldWrapper``1(``0)">
            <summary>
            Converts an element to its respective <see cref="T:WhetStone.Fielding.FieldWrapper`1"/>.
            </summary>
            <typeparam name="T">The type of the element.</typeparam>
            <param name="this">The element to wrap in a <see cref="T:WhetStone.Fielding.FieldWrapper`1"/> object.</param>
            <returns>A <see cref="T:WhetStone.Fielding.FieldWrapper`1"/> that encapsulates <paramref name="this"/>.</returns>
        </member>
        <member name="T:WhetStone.Streams.loop">
            <summary>
            A static container for identity method
            </summary>
        </member>
        <member name="M:WhetStone.Streams.loop.Loop(System.IO.TextReader,System.Int32,System.Int32)">
            <summary>
            Get a <see cref="T:System.IO.TextReader"/>'s contents as an <see cref="T:System.Collections.Generic.IEnumerable`1"/>.
            </summary>
            <param name="this">The <see cref="T:System.IO.TextReader"/> to read from.</param>
            <param name="length">The length of each element in the returned <see cref="T:System.Collections.Generic.IEnumerable`1"/>. Setting to 0 or less will chunk the elements by lines.</param>
            <param name="cache">The maximum cache size (only storing the first-most members). Setting to 0 is an infinite cache, setting to less is no cache.</param>
            <returns>A (possibly cached) <see cref="T:System.Collections.Generic.IEnumerable`1"/> of parts of <paramref name="this"/>.</returns>
        </member>
        <member name="M:WhetStone.Streams.loop.Loop(System.IO.Stream,System.Nullable{System.Int32})">
            <summary>
            Get a <see cref="T:System.IO.Stream"/>'s contents as an <see cref="T:System.Collections.Generic.IEnumerable`1"/>.
            </summary>
            <param name="this">The <see cref="T:System.IO.Stream"/> to read from</param>
            <param name="cache">The maximum cache size (only storing the first-most members). Setting to 0 is an infinite cache, setting to less is no cache. setting to <see langword="null"/> means decide by whether <see cref="P:System.IO.Stream.CanSeek"/>.</param>
            <returns>A (possibly cached) <see cref="T:System.Collections.Generic.IEnumerable`1"/> of bytes from <paramref name="this"/>.</returns>
        </member>
        <member name="T:WhetStone.Streams.readAll">
            <summary>
            A static container for identity method
            </summary>
        </member>
        <member name="M:WhetStone.Streams.readAll.ReadAll(System.IO.Stream,System.Int32,System.Double,System.Int32)">
            <summary>
            Get all bytes left in a <see cref="T:System.IO.Stream"/>.
            </summary>
            <param name="this">The <see cref="T:System.IO.Stream"/> to read.</param>
            <param name="initialchunksize">The initial buffer size, it will grow exponentially as the stream continues.</param>
            <param name="bufferGrowthCoefficient">The rate at wich to expand the buffer.</param>
            <param name="maxBufferGrowth">The maximum amount of bytes the buffer can grow at once</param>
            <returns>An <see cref="T:System.Array"/> of all the bytes in <paramref name="this"/>.</returns>
            <exception cref="T:System.ArgumentException">The stream is unreadable.</exception>
        </member>
        <member name="M:WhetStone.Streams.readAll.ReadAllTerminating(System.IO.Stream,System.String,System.Text.Encoding,System.Boolean,System.Int32,System.Double,System.Int32)">
            <summary>
            Reads a <see cref="T:System.IO.Stream"/> until it ends or until a certain string is at the end.
            </summary>
            <param name="this">The <see cref="T:System.IO.Stream"/> to read from.</param>
            <param name="end">The terminating string.</param>
            <param name="encoding">The encoding to decode <paramref name="this"/>'s bytes. Default is <see cref="P:System.Text.Encoding.UTF8"/>.</param>
            <param name="keepEnd">Whether to remove <paramref name="end"/> from the return value or not. If the value is returned due to <paramref name="this"/> ending, nothing will be removed regardless.</param>
            <param name="initialchunksize">The initial size of the read buffer.</param>
            <param name="bufferGrowthCoefficient">The growth coefficient of the read buffer.</param>
            <param name="maxBufferGrowth">The maximum size of the read buffer.</param>
            <returns>The contents of <paramref name="this"/> up to <paramref name="end"/>, if it exists.</returns>
            <exception cref="T:System.ArgumentException">If <paramref name="this"/> cannot be read.</exception>
            <remarks>The encoding must be 1-to-1</remarks>
        </member>
        <member name="M:WhetStone.Streams.readAll.ReadAllTerminating(System.IO.Stream,System.Byte[],System.Boolean,System.Int32,System.Double,System.Int32)">
            <summary>
            Reads a <see cref="T:System.IO.Stream"/> until it ends or until a certain array is at the end.
            </summary>
            <param name="this">The <see cref="T:System.IO.Stream"/> to read from.</param>
            <param name="end">The terminating byte array.</param>
            <param name="keepEnd">Whether to remove <paramref name="end"/> from the return value or not. If the value is returned due to <paramref name="this"/> ending, nothing will be removed regardless.</param>
            <param name="initialchunksize">The initial size of the buffer.</param>
            <param name="bufferGrowthCoefficient">The growth coefficient of the buffer.</param>
            <param name="maxBufferGrowth">The maximum growth of the read buffer at once.</param>
            <returns>The contents of <paramref name="this"/> up to <paramref name="end"/>, if it exists.</returns>
            <exception cref="T:System.ArgumentException">If <paramref name="this"/> cannot be read.</exception>
        </member>
        <member name="T:WhetStone.Units.Time.TimeExtentions">
            <summary>
            A static class for handling <see cref="T:System.TimeSpan"/>s.
            </summary>
        </member>
        <member name="M:WhetStone.Units.Time.TimeExtentions.Divide(System.TimeSpan,System.Double)">
            <summary>
            Get a <see cref="T:System.TimeSpan"/> divided by a factor.
            </summary>
            <param name="t">The <see cref="T:System.TimeSpan"/> to divide.</param>
            <param name="divisor">The factor to divide by.</param>
            <returns><paramref name="t"/> divided by <paramref name="divisor"/>.</returns>
        </member>
        <member name="M:WhetStone.Units.Time.TimeExtentions.Divide(System.TimeSpan,System.TimeSpan)">
            <summary>
            Get the ratio between two <see cref="T:System.TimeSpan"/>s.
            </summary>
            <param name="t">The <see cref="T:System.TimeSpan"/> to divide.</param>
            <param name="divisor">The <see cref="T:System.TimeSpan"/> to divide by.</param>
            <returns>The ratio between <paramref name="t"/> and <paramref name="divisor"/></returns>
        </member>
        <member name="M:WhetStone.Units.Time.TimeExtentions.Multiply(System.TimeSpan,System.Double)">
            <summary>
            Get a <see cref="T:System.TimeSpan"/> multiplied by a factor.
            </summary>
            <param name="t">The <see cref="T:System.TimeSpan"/> to multiply.</param>
            <param name="factor">The factor to multiply by.</param>
            <returns><paramref name="t"/> multiplied by <paramref name="factor"/>.</returns>
        </member>
        <member name="T:WhetStone.Guard.IGuard`1">
            <summary>
            A generic, mutable wrapper, made for immutable objects.
            </summary>
            <typeparam name="T">The type to wrap.</typeparam>
        </member>
        <member name="P:WhetStone.Guard.IGuard`1.value">
            <summary>
            The internal value of the <see cref="T:WhetStone.Guard.IGuard`1"/>
            </summary>
        </member>
        <member name="T:WhetStone.Guard.Guard">
            <summary>
            Static container for <see cref="T:WhetStone.Guard.IGuard`1"/> extension methods
            </summary>
        </member>
        <member name="M:WhetStone.Guard.Guard.CondSet``1(WhetStone.Guard.IGuard{``0},``0)">
            <summary>
            Sets an <see cref="T:WhetStone.Guard.IGuard`1"/>'s value only if it is not <see langword="null"/>.
            </summary>
            <typeparam name="T">The type of the <see cref="T:WhetStone.Guard.IGuard`1"/>.</typeparam>
            <param name="this">The <see cref="T:WhetStone.Guard.IGuard`1"/> whose value to set.</param>
            <param name="val">The value to set the <paramref name="this"/> to, if it is not <see langword="null"/>.</param>
            <returns>Whether the value was set or not.</returns>
        </member>
        <member name="M:WhetStone.Guard.Guard.CondGet``1(WhetStone.Guard.IGuard{``0},``0)">
            <summary>
            Gets an <see cref="T:WhetStone.Guard.IGuard`1"/>'s value only if it is not <see langword="null"/>.
            </summary>
            <typeparam name="T">The type of the <see cref="T:WhetStone.Guard.IGuard`1"/>.</typeparam>
            <param name="this">The <see cref="T:WhetStone.Guard.IGuard`1"/> whose value to set.</param>
            <param name="defval">The value to return if <paramref name="this"/> is <see langword="null"/>.</param>
            <returns>The value of <paramref name="this"/> or <paramref name="defval"/> if <paramref name="this"/> is <see langword="null"/>.</returns>
        </member>
        <member name="M:WhetStone.Guard.Guard.CondMutate``1(WhetStone.Guard.IGuard{``0},System.Func{``0,``0})">
            <summary>
            Mutates and <see cref="T:WhetStone.Guard.IGuard`1"/>'s value if it is not <see langword="null"/>.
            </summary>
            <typeparam name="T">The type of the <see cref="T:WhetStone.Guard.IGuard`1"/>.</typeparam>
            <param name="this">The <see cref="T:WhetStone.Guard.IGuard`1"/> whose value to mutate.</param>
            <param name="val">The mutator function for <paramref name="this"/>'s value, if it exists.</param>
            <returns>Whether the value was mutated.</returns>
        </member>
        <member name="T:WhetStone.Guard.Guard`1">
            <summary>
            A simple <see cref="T:WhetStone.Guard.IGuard`1"/>, storing only the internal value.
            </summary>
            <typeparam name="T">The type of the inner element.</typeparam>
        </member>
        <member name="P:WhetStone.Guard.Guard`1.value">
            <inheritdoc />
        </member>
        <member name="M:WhetStone.Guard.Guard`1.#ctor(`0)">
            <summary>
            Constructor.
            </summary>
            <param name="load">The initial value.</param>
        </member>
        <member name="M:WhetStone.Guard.Guard`1.Clone">
            <inheritdoc />
        </member>
        <member name="M:WhetStone.Guard.Guard`1.op_Implicit(WhetStone.Guard.Guard{`0})~`0">
            <summary>
            Converts a <see cref="T:WhetStone.Guard.Guard`1"/> to a <typeparamref name="T"/> type.
            </summary>
            <param name="this">The <see cref="T:WhetStone.Guard.Guard`1"/> to convert.</param>
        </member>
        <member name="M:WhetStone.Guard.Guard`1.ToString">
            <inheritdoc />
        </member>
        <member name="T:WhetStone.Guard.EventGuard`1">
            <summary>
            An <see cref="T:WhetStone.Guard.IGuard`1"/> that supports triggering event upon access.
            </summary>
            <typeparam name="T">The type of the inner element.</typeparam>
            <remarks>For any event to be fired upon access, the value must be retrieved through the <see cref="P:WhetStone.Guard.EventGuard`1.EventValue"/> property.</remarks>
        </member>
        <member name="T:WhetStone.Guard.EventGuard`1.EventGuardSetArgs">
            <summary>
            Arguments for when the value is set.
            </summary>
        </member>
        <member name="M:WhetStone.Guard.EventGuard`1.EventGuardSetArgs.#ctor(`0,`0)">
            <summary>
            Constructor
            </summary>
            <param name="oldVal">The old value of the <see cref="T:WhetStone.Guard.IGuard`1"/></param>
            <param name="newVal">The new value of the <see cref="T:WhetStone.Guard.IGuard`1"/></param>
        </member>
        <member name="P:WhetStone.Guard.EventGuard`1.EventGuardSetArgs.oldVal">
            <summary>
            the old value of the <see cref="T:WhetStone.Guard.IGuard`1"/>.
            </summary>
        </member>
        <member name="P:WhetStone.Guard.EventGuard`1.EventGuardSetArgs.newVal">
            <summary>
            the new value of the <see cref="T:WhetStone.Guard.IGuard`1"/>.
            </summary>
        </member>
        <member name="T:WhetStone.Guard.EventGuard`1.EventGuardAccessArgs">
            <summary>
            Arguments for when the value is accessed (either set ot get).
            </summary>
        </member>
        <member name="T:WhetStone.Guard.EventGuard`1.EventGuardAccessArgs.AccessType">
            <summary>
            The types of access to access an <see cref="T:WhetStone.Guard.EventGuard`1"/>'s value.
            </summary>
        </member>
        <member name="F:WhetStone.Guard.EventGuard`1.EventGuardAccessArgs.AccessType.Get">
            <summary>
            When the value was accessed as a <see langword="get"/>.
            </summary>
        </member>
        <member name="F:WhetStone.Guard.EventGuard`1.EventGuardAccessArgs.AccessType.Set">
            <summary>
            When the value was accessed as a <see langword="set"/>.
            </summary>
        </member>
        <member name="M:WhetStone.Guard.EventGuard`1.EventGuardAccessArgs.#ctor(WhetStone.Guard.EventGuard{`0}.EventGuardAccessArgs.AccessType)">
            <summary>
            constructor
            </summary>
            <param name="accesType">The access type of the Access.</param>
        </member>
        <member name="P:WhetStone.Guard.EventGuard`1.EventGuardAccessArgs.AccesType">
            <summary>
            The access type of the Access.
            </summary>
        </member>
        <member name="T:WhetStone.Guard.EventGuard`1.GuardSetHandler">
            <summary>
            Handler for when the <see cref="T:WhetStone.Guard.IGuard`1"/>'s value is set.
            </summary>
            <param name="sender">The <see cref="T:WhetStone.Guard.IGuard`1"/> sender.</param>
            <param name="e">The event arguments.</param>
        </member>
        <member name="T:WhetStone.Guard.EventGuard`1.GuardAccessedHandler">
            <summary>
            Handler for when the <see cref="T:WhetStone.Guard.IGuard`1"/>'s value is set or gotten.
            </summary>
            <param name="sender">The <see cref="T:WhetStone.Guard.IGuard`1"/> sender.</param>
            <param name="e">The event arguments.</param>
        </member>
        <member name="T:WhetStone.Guard.EventGuard`1.GuardGetHandler">
            <summary>
            Handler for when the <see cref="T:WhetStone.Guard.IGuard`1"/>'s value is gotten.
            </summary>
            <param name="sender">The <see cref="T:WhetStone.Guard.IGuard`1"/> sender.</param>
            <param name="e">The event arguments.</param>
        </member>
        <member name="P:WhetStone.Guard.EventGuard`1.EventValue">
            <summary>
            Accesses the value, and triggers the relevant events
            </summary>
        </member>
        <member name="E:WhetStone.Guard.EventGuard`1.Changed">
            <summary>
            is called when the direct value is changed, first parameter([0]) is the new value, second parameter ([1]) is the old value, third is whether the value is equal to the old value
            </summary>
        </member>
        <member name="E:WhetStone.Guard.EventGuard`1.Accessed">
            <summary>
            is called whenever the value is accessed, first parameter dictates whether the value was accessed from get or set ("get","set")
            </summary>
        </member>
        <member name="E:WhetStone.Guard.EventGuard`1.Drawn">
            <summary>
            is called whenever the value is looked at, has no parameters
            </summary>
        </member>
        <member name="M:WhetStone.Guard.EventGuard`1.#ctor(`0)">
            <summary>
            Constructor.
            </summary>
            <param name="load">The initial value of the <see cref="T:WhetStone.Guard.EventGuard`1"/>.</param>
        </member>
        <member name="M:WhetStone.Guard.EventGuard`1.Clone">
            <inheritdoc />
        </member>
        <member name="M:WhetStone.Guard.EventGuard`1.ToString">
            <inheritdoc />
        </member>
        <member name="T:WhetStone.Processes.timeout">
            <summary>
            A static container for identity method
            </summary>
        </member>
        <member name="M:WhetStone.Processes.timeout.TimeOut(System.Action,System.TimeSpan)">
            <summary>
            Perform an <see cref="T:System.Action"/>, or cancel it if it exceeds a timeout.
            </summary>
            <param name="action">The <see cref="T:System.Action"/> to invoke.</param>
            <param name="maxtime">The timeout to cancel <paramref name="action"/> if exceeded.</param>
            <returns>Whether the action completed within the allotted time.</returns>
        </member>
        <member name="M:WhetStone.Processes.timeout.TimeOut``1(System.Func{``0},System.TimeSpan,``0@)">
            <summary>
            Perform an <see cref="T:System.Func`1"/>, or cancel it if it exceeds a timeout.
            </summary>
            <param name="action">The <see cref="T:System.Func`1"/> to invoke.</param>
            <param name="maxtime">The timeout to cancel <paramref name="action"/> if exceeded.</param>
            <param name="result">The output of <paramref name="action"/>.</param>
            <returns>Whether the action completed within the allotted time.</returns>
        </member>
        <member name="T:WhetStone.Tuples.toTuple">
            <summary>
            A static container for identity method
            </summary>
        </member>
        <member name="M:WhetStone.Tuples.toTuple.ToTuple``1(System.Collections.IList)">
            <summary>
            Convert an <see cref="T:System.Collections.Generic.IList`1"/> into a tuple of 1 member.
            </summary>
            <typeparam name="T1">The type of the first tuple member.</typeparam>
            <param name="this">The <see cref="T:System.Collections.Generic.IList`1"/> to convert.</param>
            <returns><paramref name="this"/> converted to a tuple.</returns>
        </member>
        <member name="M:WhetStone.Tuples.toTuple.ToTuple``1(System.Collections.IEnumerable)">
            <summary>
            Convert an <see cref="T:System.Collections.Generic.IEnumerable`1"/> into a tuple of 1 member.
            </summary>
            <typeparam name="T1">The type of the first tuple member.</typeparam>
            <param name="this">The <see cref="T:System.Collections.Generic.IEnumerable`1"/> to convert.</param>
            <returns><paramref name="this"/> converted to a tuple.</returns>
        </member>
        <member name="M:WhetStone.Tuples.toTuple.ToTuple``2(System.Collections.IList)">
            <summary>
            Convert an <see cref="T:System.Collections.Generic.IList`1"/> into a tuple of 2 members.
            </summary>
            <typeparam name="T1">The type of the first tuple member.</typeparam>
            <typeparam name="T2">The type of the second tuple member.</typeparam>
            <param name="this">The <see cref="T:System.Collections.Generic.IList`1"/> to convert.</param>
            <returns><paramref name="this"/> converted to a tuple.</returns>
        </member>
        <member name="M:WhetStone.Tuples.toTuple.ToTuple``2(System.Collections.IEnumerable)">
            <summary>
            Convert an <see cref="T:System.Collections.Generic.IEnumerable`1"/> into a tuple of 2 members.
            </summary>
            <typeparam name="T1">The type of the first tuple member.</typeparam>
            <typeparam name="T2">The type of the second tuple member.</typeparam>
            <param name="this">The <see cref="T:System.Collections.Generic.IEnumerable`1"/> to convert.</param>
            <returns><paramref name="this"/> converted to a tuple.</returns>
        </member>
        <member name="M:WhetStone.Tuples.toTuple.ToTuple``3(System.Collections.IList)">
            <summary>
            Convert an <see cref="T:System.Collections.Generic.IList`1"/> into a tuple of 3 members.
            </summary>
            <typeparam name="T1">The type of the first tuple member.</typeparam>
            <typeparam name="T2">The type of the second tuple member.</typeparam>
            <typeparam name="T3">The type of the third tuple member.</typeparam>
            <param name="this">The <see cref="T:System.Collections.Generic.IList`1"/> to convert.</param>
            <returns><paramref name="this"/> converted to a tuple.</returns>
        </member>
        <member name="M:WhetStone.Tuples.toTuple.ToTuple``3(System.Collections.IEnumerable)">
            <summary>
            Convert an <see cref="T:System.Collections.Generic.IEnumerable`1"/> into a tuple of 3 members.
            </summary>
            <typeparam name="T1">The type of the first tuple member.</typeparam>
            <typeparam name="T2">The type of the second tuple member.</typeparam>
            <typeparam name="T3">The type of the third tuple member.</typeparam>
            <param name="this">The <see cref="T:System.Collections.Generic.IEnumerable`1"/> to convert.</param>
            <returns><paramref name="this"/> converted to a tuple.</returns>
        </member>
        <member name="M:WhetStone.Tuples.toTuple.ToTuple``4(System.Collections.IList)">
            <summary>
            Convert an <see cref="T:System.Collections.Generic.IList`1"/> into a tuple of 4 members.
            </summary>
            <typeparam name="T1">The type of the first tuple member.</typeparam>
            <typeparam name="T2">The type of the second tuple member.</typeparam>
            <typeparam name="T3">The type of the third tuple member.</typeparam>
            <typeparam name="T4">The type of the fourth tuple member.</typeparam>
            <param name="this">The <see cref="T:System.Collections.Generic.IList`1"/> to convert.</param>
            <returns><paramref name="this"/> converted to a tuple.</returns>
        </member>
        <member name="M:WhetStone.Tuples.toTuple.ToTuple``4(System.Collections.IEnumerable)">
            <summary>
            Convert an <see cref="T:System.Collections.Generic.IEnumerable`1"/> into a tuple of 4 members.
            </summary>
            <typeparam name="T1">The type of the first tuple member.</typeparam>
            <typeparam name="T2">The type of the second tuple member.</typeparam>
            <typeparam name="T3">The type of the third tuple member.</typeparam>
            <typeparam name="T4">The type of the fourth tuple member.</typeparam>
            <param name="this">The <see cref="T:System.Collections.Generic.IEnumerable`1"/> to convert.</param>
            <returns><paramref name="this"/> converted to a tuple.</returns>
        </member>
        <member name="M:WhetStone.Tuples.toTuple.ToTuple``5(System.Collections.IList)">
            <summary>
            Convert an <see cref="T:System.Collections.Generic.IList`1"/> into a tuple of 5 members.
            </summary>
            <typeparam name="T1">The type of the first tuple member.</typeparam>
            <typeparam name="T2">The type of the second tuple member.</typeparam>
            <typeparam name="T3">The type of the third tuple member.</typeparam>
            <typeparam name="T4">The type of the fourth tuple member.</typeparam>
            <typeparam name="T5">The type of the fifth tuple member.</typeparam>
            <param name="this">The <see cref="T:System.Collections.Generic.IList`1"/> to convert.</param>
            <returns><paramref name="this"/> converted to a tuple.</returns>
        </member>
        <member name="M:WhetStone.Tuples.toTuple.ToTuple``5(System.Collections.IEnumerable)">
            <summary>
            Convert an <see cref="T:System.Collections.Generic.IEnumerable`1"/> into a tuple of 5 members.
            </summary>
            <typeparam name="T1">The type of the first tuple member.</typeparam>
            <typeparam name="T2">The type of the second tuple member.</typeparam>
            <typeparam name="T3">The type of the third tuple member.</typeparam>
            <typeparam name="T4">The type of the fourth tuple member.</typeparam>
            <typeparam name="T5">The type of the fifth tuple member.</typeparam>
            <param name="this">The <see cref="T:System.Collections.Generic.IEnumerable`1"/> to convert.</param>
            <returns><paramref name="this"/> converted to a tuple.</returns>
        </member>
    </members>
</doc>
